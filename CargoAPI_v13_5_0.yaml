openapi: 3.0.2
servers:
  - url: 'https://capri.sbbcargo.com/v13'
    description: Produktive Umgebung
security:
  - bearerAuth: []
info:
  title: Cargo API von SBB Cargo AG
  description: |
    Das Cargo Application Programming Interface (CAPrI) bietet verschiedene Services um Daten zu Ihren Aufträgen oder Sendungen abzurufen.
    In der description wird dokumentiert welche Rolle nötig ist, um die Methode anzusprechen. Wenn eine Liste von Rollen steht, dann reicht eine von diesen Rollen.
    Damit wir diese API weiterentwicklen können, sollen Sie mit unbekannten Felder umgehen können. Breaking Changes werden nur mit einer Major Version umgesetzt.
  version: "13.4.1"
  license:
    name: SBB Cargo AG
    url: 'https://www.sbbcargo.com/de/kundencenter/e-services/sbb-cargo-digital.html'
  contact:
    name: Cargo Digital Projekt
    email: cargodigital@sbbcargo.com
paths:
  /login-jwt:
    get:
      tags:
        - Authentifikation
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Gibt bei erfolgreicher Anmeldung ein JSON Web Token (JWT) für weitere Anfragen zurück. Es muss ein HTTP Authorization Header mit ZKK Nummer und Passwort (Base64 codiert) übergeben werden. Nach erfolgreicher Überprüfung der Anmeldedaten wird ein JSON Web Token (JWT) zurückgegeben, dass für alle weiteren Anfragen an sonstige Services verwendet werden muss.
      parameters:
        - name: Authorization
          in: header
          description: Base64 encodierte Anmeldedaten (ZKK Nummer und Passwort)
          required: true
          schema:
            type: string
      responses:
        200:
          description: |
            Bei erfolgreicher Anmeldung wird ein Token für die weiteren Aufrufe zurückgegeben. Das Token ist maximal 10
            Stunden gültig.
          headers:
            Authorization:
              description: |
                Das JSON Web Token, bestehend aus Header, Payload und Signature
                jeweils Base64 encodiert und per "." verbunden
              schema:
                type: string
        400:
          description: Überprüfung der Anmeldedaten fehlgeschlagen
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /sendungen:
    get:
      deprecated: true
      tags:
        - Sendungen
      description: |
        Benötigt eine der Rollen: CargoDigital-CAPrI, CargoDigital-CargoCheckin, CargoDigital-FastTrack, CargoDigital-Support

        Ruft alle Sendungen ab, bei denen der Requester Absender, Empfänger oder Frachtzahler ist

        *Hinweis:* Wird in durch *"/bestellungen"* und *"/auftraege"* abgelöst
      parameters:
        - name: sortierung
          in: query
          description: |
            Die Sendungen können bereits vom Backend vorsortiert ausgegeben
            werden. Ist keine Sortierung angegeben,

            werden die Sendungen nach Empfangszeit (aufsteigend) per Default
            sortiert.


            Die Sortierung erfolgt folgendermassen:

            - Versandzeit (aufsteigend)

            - Empfangszeit (aufsteigend)
          schema:
            type: string
            enum:
              - Versandzeit
              - Empfangszeit
            default: Empfangszeit
        - name: pageSize
          in: query
          description: Wieviele Sendungen sollen gleichzeitig angefordert werden?
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: pageStart
          in: query
          description: |
            Ab welcher Position sollen die mit der pageSize gewählte Anzahl
            Elemente gesucht werden.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: versandbahnhof
          in: query
          required: false
          description: |
            Die Sendungen können auf einen Versandbahnhof eingegrenzt werden, es
            wird das UIC Land und der UIC Code des

            Bahnhofs erwartet. UIC-Code Formatierung Beispiel: 0085-001234


            Wird gleichzeitig der Parameter "empfangsbahnhof" angegeben, werden
            alle Sendungen auf dieser

            konkreten Verbindung (Versand nach Empfang) gesucht
            ("und"-Verknüpfung).
          schema:
            type: string
            pattern: '[\d]{4}-[\d]{6}'
        - name: empfangsbahnhof
          in: query
          required: false
          description: |
            Die Sendungen können auf einen Empfangsbahnhof eingegrenzt werden,
            es wird das UIC Land und der UIC Code des

            Bahnhofs erwartet. UIC-Code Formatierung Beispiel: 0085-001234


            Wird gleichzeitig der Parameter "versandbahnhof" angegeben, werden
            alle Sendungen auf dieser

            konkreten Verbindung (Versand nach Empfang) gesucht
            ("und"-Verknüpfung).
          schema:
            type: string
            pattern: '[\d]{4}-[\d]{6}'
        - name: partnerTyp
          in: query
          required: false
          description: |
            Falls angegeben, werden die Sendungen nach Partnertyp gefiltert und
            nur Sendungen zurückgegeben, in denen

            der im Authorization Header angegebene Kunde in der passenden Rolle
            vorkommen.
          schema:
            type: string
            enum:
              - Versender
              - Empfaenger
              - Meldungsabsender
              - FrachtzahlerVersand
              - FrachtzahlerEmpfang
        - name: status
          in: query
          required: false
          description: |
            Sendungen können nach ihrem Status gefiltert werden. So ist es
            möglich z.B. alle Sendungen zu finden, die

            in der Phase "Transport" sind.

            * Vorbereitung: Sendungen, die keinen Check-in haben

            * Bereit: eingecheckte Sendungen, die bereit für den Transport sind
            (Sendung kann auch schon transportiert werden, da keine scharfe
            Trennung zwischen Status "Bereit" und "Transport" im betrieblichen
            Ablauf gemacht wird)

            * Transport: Sendungen in der Phase Transport

            * Angekommen: am Zielort angekommene Sendungen (Status hat nur kurze
            Zeit Bestand und wir nach einigen Stunden in die Abrechung/Archiv
            verschoben)

            * Abgeschlossen: abgeschlossene Sendungen (max. 14 tage zurück)

            * Muster: Mustersendungen
          schema:
            type: string
            enum:
              - Vorbereitung
              - Bereit
              - Transport
              - Angekommen
              - Abgeschlossen
              - Muster
            default: Transport
        - name: befoerderungsart
          in: query
          required: false
          description: |
            Sendungen können nach Beförderungsart gefiltert werden


            * einzelwagen - Wagenladungsverkehre, Cargo Rail oder Cargo Rail
            Express Netz

            * ganzzug

            ** Ganzzugsverkehr, Cargo Train Netz

            ** Kombinierter Verkehr im KV Liniennetz (Achtung: es gibt auch KV
            im Wagenladungsverkehrsnetz)

            ** Ganzugsverkehre für die Paket und Briefpost Netze

            ** Wagenladungsverkehr ohne Bedienzeitfenster, die im Zuckerfabrik
            Netz transportiert werden

            ** Eigens organisierte Transporte z.B. für Baumaschinen oder andere
            Waren mit speziellen Anforderungen

            ** von SBB Cargo AG transportierte Züge für andere Bahnen
          schema:
            type: string
            enum:
              - einzelwagen
              - ganzzug
            default: einzelwagen
        - name: sprache
          in: query
          description: 'Die Sprache, in welcher Antworten vom Server ausgegeben werden'
          required: false
          schema:
            type: string
            enum:
              - de
              - fr
              - it
            default: de
      responses:
        200:
          description: 'Abfrage erfolgreich, es wurden eine oder mehrere Sendungen gefunden'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sendung'
        204:
          description: |
            Es konnten keine dem Requester zugeordneten Sendungen gefunden
            werden.
        400:
          description: |
            Fehlerhafte Anfrage, die Anfrage konnte vom Server nicht verarbeitet
            werden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CargoError'
        401:
          description: 'Zugriff verboten, Token konnte nicht überprüft werden.'
        403:
          description: 'Nicht erlaubt, die Rollen im Token konnten nicht überprüft werden'
        500:
          description: 'Unerwarteter Fehler, die Anfrage konnte nicht verarbeitet werden.'
        501:
          description: |
            Funktion nicht implementiert, es kann nur GET und PUT verwendet
            werden.
        503:
          description: Backend Systeme sind nicht erreichbar.
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    post:
      deprecated: true
      tags:
        - Sendungen
      description: |
        Benötigt eine der Rollen: CargoDigital-FastTrack

        Führt die Buchung und das Check-in einer Sendung aus einer Mustersendung durch.

        Für das Update ist nur das *Delta* der Daten notwendig.

        Das Delta kann z.B. so aussehen:
          ~~~
          {
             "id":{
                "uicLand":85,
                "uicBahnhof":62109,
                "uicEVU":2185,
                "laufnummer":0
             },
             "transportID":548712149,
             "checkInErfolgt":true,
             "letzteAenderung":"2019-02-22T07:35:44.969Z",
             "versandLadestelle":{
                "nummer":"43"
             },
             "versandZeitLadestelle":{
                "beginn":"2019-02-28T13:30:00.000Z"
             },
             "wagen":[
                {
                   "befoerderungsid":"817845149",
                   "nummer":"018812345678",
                   "laufnummer":1,
                   "waren":[
                      {
                         "laufnummer":1,
                         "nummer":"998020",
                         "beschreibung":"Leer Kisten des Typs H ohne Gut nach einem Bahnvolltransport",
                         "absenderBeschreibung":"",
                         "gewicht":5048,
                         "gewichtFrachtpflichtig":5048
                      }
                   ]
                }
             ]
          }
          ~~~
      parameters:
        - name: sprache
          in: query
          description: 'Die Sprache, in welcher Antworten vom Server ausgegeben werden'
          required: false
          schema:
            type: string
            enum:
              - de
              - fr
              - it
            default: de
      responses:
        200:
          description: |
            Sendung wurde erfolgreich aktualisiert, eine aktuelle und
            vollständige Repräsentation der Sendung wird

            zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sendung'
        400:
          description: |
            Die Sendung konnte aufgrund einer Falscheingabe nicht gespeichert
            werden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CargoError'
        401:
          description: 'Unautorisierter Zugriff, Token fehlt'
        403:
          description: 'Zugriff verboten, der User darf die Schnittstelle nicht benutzen'
        409:
          description: |
            Die Sendung konnte nicht eingecheckt werden, da die Check-in
            Funktion für diese Art Sendung verboten wurde.
        500:
          description: |
            Es ist ein unerwarteter Fehler aufgetreten, weshalb die Anfrage
            nicht verarbeitet werden konnte.
        501:
          description: |
            Eine angeforderte Funktionalität ist mit diesem Endpoint nicht
            möglich.
        default:
          $ref: '#/components/responses/CargoErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sendung'
        description: |
          Neue Daten für die einzelne Sendung. Momentan werden nur Check-in und
          Abholbereitschaft unterstützt.
        required: true
  '/sendungen/{transportid}':
    get:
      deprecated: true
      tags:
        - Sendungen
      description: |
        Benötigt eine der Rollen: CargoDigital-CAPrI, CargoDigital-CargoCheckin, CargoDigital-FastTrack, CargoDigital-Support

        Ruft Sendungsdaten zu einer einzelnen Sendung ab. Wird eine Transport ID als Teil der URI übergeben, werden nur Sendungsdaten zu der *einzelnen* Sendung zurückgegeben (falls die Transport ID vorhanden und der User berechtigt ist).
      parameters:
        - name: transportid
          in: path
          description: Gibt die Sendungsdaten zu einer spezifischen Sendung zurück
          required: true
          schema:
            type: integer
            format: int32
        - name: sprache
          in: query
          description: 'Die Sprache, in welcher Antworten vom Server ausgegeben werden'
          required: false
          schema:
            type: string
            enum:
              - de
              - fr
              - it
            default: de
      responses:
        200:
          description: 'Abfrage erfolgreich, die Sendung wurde gefunden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sendung'
        204:
          description: |
            Abfrage konnte erfolgreich durchgeführt werden, es wurde aber
            **keine** Sendung gefunden.
        400:
          description: |
            Die Anfrage konnte vom Server nicht verarbeitet werden, da sie keine
            korrekte Syntax beinhaltet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CargoError'
        401:
          description: 'Unautorisierter Zugriff, Token fehlt'
        403:
          description: 'Zugriff verboten, der User darf die Schnittstelle nicht benutzen'
        500:
          description: |
            Es ist ein unerwarteter Fehler aufgetreten, weshalb die Anfrage
            nicht verarbeitet werden konnte.
        501:
          description: |
            Eine angeforderte Funktionalität ist mit diesem Endpoint nicht
            möglich.
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    put:
      deprecated: true
      tags:
        - Sendungen
      description: |
        Benötigt eine der Rollen: CargoDigital-CargoCheckin

        Aktualisiert eine Sendung mit den gegebenen Daten. Es ist nur ein Delta der Daten nötig. Mit der Angabe der entsprechenden Transport ID können Updates der Sendung vorgenommen werden.

        Ein Check-in für eine Sendung kann nur vom jeweiligen Versender der Sendung erfolgen.

        Für das Update ist nur das *Delta* der Daten notwendig.


        Momentan werden nur Check-in und Abholbereitschaft unterstützt.
        Mutationen von Sendungen werden nur von der App Cargo Check-in erlaubt

        Das Delta kann z.B. so aussehen:
          ~~~
          {
            "transportID": 842822587,
            "id": {
              "uicLand": 85,
              "uicBahnhof": 70102,
              "uicEVU": 2185,
              "laufnummer": 72214273
            },
            "checkInErfolgt": true,
            "letzteAenderung":"2017-08-03T11:05:22.307Z",
            "wagen": [
              {
                "nummer": "218533014609",
                "waren": [
                  {
                    "laufnummer": 1,
                    "nummer": 220300,
                    "gewicht": 666,
                    "gewichtFrachtpflichtig": 666
                    "behaelter": {
                      "laufnummer": 1,
                      "nummer": "1",
                      "tara": 3000
                    }
                  },
                  {
                    "laufnummer": 2,
                    "nummer": 271210,
                    "gewicht": 4500,
                    "gewichtFrachtpflichtig": 4500,
                    "behaelter": {
                      "laufnummer": 1,
                      "nummer": "1",
                      "tara": 3000
                    }
                  }
                ]
              }
            ]
          }
          ~~~
      parameters:
        - name: transportid
          in: path
          description: 'Definiert die Sendung, zu der Daten aktualisiert werden sollen'
          required: true
          schema:
            type: integer
            format: int32
        - name: sprache
          in: query
          description: 'Die Sprache, in welcher Antworten vom Server ausgegeben werden'
          required: false
          schema:
            type: string
            enum:
              - de
              - fr
              - it
            default: de
      responses:
        200:
          description: |
            Sendung wurde erfolgreich aktualisiert, eine aktuelle und
            vollständige Repräsentation der Sendung wird

            zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sendung'
        400:
          description: |
            Die Sendung konnte aufgrund einer Falscheingabe nicht gespeichert
            werden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CargoError'
        401:
          description: 'Unautorisierter Zugriff, Token fehlt'
        403:
          description: 'Zugriff verboten, der User darf die Schnittstelle nicht benutzen'
        409:
          description: |
            Die Sendung konnte nicht eingecheckt werden, da die Check-in
            Funktion für diese Art Sendung verboten wurde.
        500:
          description: |
            Es ist ein unerwarteter Fehler aufgetreten, weshalb die Anfrage
            nicht verarbeitet werden konnte.
        501:
          description: |
            Eine angeforderte Funktionalität ist mit diesem Endpoint nicht
            möglich.
        default:
          $ref: '#/components/responses/CargoErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sendung'
        description: |
          Neue Daten für die einzelne Sendung. Momentan werden nur Check-in und
          Abholbereitschaft unterstützt.
        required: true
  '/zuglauf/{zugnummer}/{verkehrsdatum}':
    get:
      tags:
        - Transport
      description: |
        Benötigt eine der Rollen: CargoDigital-CAPrI, CargoDigital-API, CargoDigital-Support

        Liefert Informationen über den Weg, den ein bestimmter Zug nehmen soll oder bereits gefahren hat. Die Wegbeschreibung eines Zuges erfolgt auf Basis der Betriebspunkte, die der Zug passiert. Diese Punkte sind im Schienenetz definiert und haben eine geographische Position.

        Es kann zwischen Plan-, Istdaten und beiden zusammen per Paramter gewählt werden. Dabei kann es vorkommen, dass ein Wagen mit einer Sendung nur auf einem Teilabschnitt der Sendung transportiert wird und somit Start/Ziel nicht mit Start/Ziel des Wagens übereinstimmen.
      parameters:
        - name: zugnummer
          in: path
          description: |
            Die Zugnummmer, die im Transportkettenglied der Wagen einer Sendung
            vermerkt ist
          required: true
          schema:
            type: string
            pattern: '[0-9]{5}-[0-9]{3}'
        - name: verkehrsdatum
          in: path
          description: |
            Das Datum am dem der gesuchte Zug verkehrt (ein Zug kann an einem
            anderen Tag einen anderen Weg nehmen)
          required: true
          schema:
            type: string
            format: date
        - name: variante
          in: query
          description: |
            Es gibt mehrere Varianten eines Zuglaufes, es kann zwischen dem
            geplanten Zuglauf, den

            bereits gefahrenene Teilen des Zuglaufs oder beiden gewählt werden
          schema:
            type: string
            enum:
              - ist
              - plan
              - komplett
            default: ist
      responses:
        200:
          description: Es wurde ein passender Zuglauf gefunden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zuglauf'
        204:
          description: |
            Es wurde ein passender Zug gefunden, es sind aber keine Zuglaufdaten
            bekannt. Dies kann passieren, wenn z.B.

            ein Zug in der Planungsphase ist.
        401:
          description: 'Zugriff verboten, Token konnte nicht überprüft werden.'
        403:
          description: 'Nicht erlaubt, die Rollen im Token konnten nicht überprüft werden'
        500:
          description: 'Unerwarteter Fehler, die Anfrage konnte nicht verarbeitet werden.'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  '/zuglauf/international/{consignmentnummer}/{wagennummer}/{empfangsbahnhof}':
    get:
      deprecated: true
      tags:
        - Transport
      description: |
        Benötigt eine der Rollen: CargoDigital-CAPrI, CargoDigital-API, CargoDigital-Support

        Liefert Informationen über den Weg, den ein bestimmter Zug bereits im international Verkehr gefahren hat. Die Wegbeschreibung eines Zuges erfolgt auf Basis der internationalen Betriebspunkte, die der Zug passiert. Diese Punkte sind im Schienennetz definiert und haben eine approximative geographische Position. Im Moment werden nur Sendungen berücksichtigt, die über die Xrail-Plattform gebucht wurden.
      parameters:
        - name: consignmentnummer
          in: path
          description: Die consignmentnummer
          required: true
          schema:
            type: string
            pattern: '[0-9]{6}'
        - name: wagennummer
          in: path
          description: Die UIC Wagennummer
          required: true
          schema:
            type: string
            pattern: '[0-9]{12}'
        - name: empfangsbahnhof
          in: path
          required: true
          description: Der Empfangsbahnhof der Sendung (kann im Ausland oder der Schweiz liegen)
          schema:
            type: string
            pattern: '[\d]{4}-[\d]{6}'
      responses:
        200:
          description: |
            Es wurde ein passender Zuglauf gefunden.
            Hier wird nur der Auslandsteil der Strecke zurück gegeben und ausschliesslich Ist-Daten.
            Der zurückgegebene Zuglauf kann mehrere reale Zuglaufe/Transportkettenglieder umfassen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zuglauf'
        204:
          description: |
            Es wurde ein passender Zug gefunden, es sind aber keine Zuglaufdaten
            bekannt. Dies kann passieren, wenn z.B.

            ein Zug noch nicht abgefahren ist.
        400:
          description: Der Request ist nicht gültig (z.B. ungültiger Bahnhof angegeben)
        401:
          description: 'Zugriff verboten, Token konnte nicht überprüft werden.'
        403:
          description: 'Nicht erlaubt, die Rollen im Token konnten nicht überprüft werden'
        500:
          description: 'Unerwarteter Fehler, die Anfrage konnte nicht verarbeitet werden.'
  /partner:
    get:
      tags:
        - Partner
      description: |
        Benötigt eine der Rollen: CargoDigital-Support, CargoDigital-Cockpit

        Ruft alle Partner ab, die eine Übereinstimmung mit einer unvollständigen Partner-ID (ZKK-Nummer) haben, wie es z.B. für einen Typeahead-Service benötigt wird.

        Wird ein spezifischer Partner gesucht sollte besser der Endpoint "/partner/{partnerid}" benutzt werden.
      parameters:
        - name: partnerid
          in: query
          description: Teil einer Partner-Identifikation, um übereinstimmende Partner zu finden
          required: true
          schema:
            type: string
            pattern: '^[0-9]{3,8}$'
      responses:
        200:
          description: 'Abfrage erfolgreich, es wurden einer oder mehrere Partner gefunden'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Partner'
        204:
          description: Es konnten keine übereinstimmenden Partner gefunden werden
        400:
          description: |
            Der Request ist nicht gültig (z.B. keine oder zu kurze
            Partner-Identifikation angegeben)
        500:
          description: 'Unerwarteter Fehler, die Anfrage konnte nicht verarbeitet werden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CargoError'
        503:
          description: API Gateway oder Backendservice nicht erreichbar
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /partner/{partnerid}:
    get:
      tags:
        - Partner
      description: |
        Benötigt eine der Rollen: CargoDigital-Support, CargoDigital-Cockpit, jegliche Cargo Digital Rolle (Path partnerid gleich oder VerknuepftePartner von Token partnerid)
         Ruft Details eines angefragten Partners ab, wie z.B. Name oder Ort. Kann ausserdem verwendet werden um zu erfahren, auf welche verknüpften Partner Zugriff besteht.
      parameters:
        - name: partnerid
          in: path
          description: |
            ZKK des Partners, dessen zugehörigen Partnerinformationen abgerufen werden sollen.
          required: true
          schema:
            type: string
            pattern: '^[0-9]{8}$'
      responses:
        200:
          description: 'Abfrage erfolgreich, der gewünschte Partner wurde gefunden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /partner/{partnerid}/stammdaten:
    get:
      tags:
        - Partner
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle (Es können ausschliesslich die Stammdaten für den eingeloggten Partner abgerufen werden)

        Liefert detaillierte Stammdaten-Kundeninformationen, wie zum Beispiel, ob der Kunde Reservierungen oder eine Buchungssperre hat.
      operationId: getPartnerStammdaten
      parameters:
        - name: partnerid
          in: path
          required: true
          schema:
            type: string
            pattern: '^[0-9]{8}$'
      responses:
        200:
          description: 'Abfrage erfolgreich, der gewünschte Partner wurde gefunden und die Stammdaten wurden geliefert'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerStammdaten'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /bahnhoefe:
    get:
      deprecated: true
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: CargoDigital-CAPrI, CargoDigital-CargoCheckin, CargoDigital-FastTrack, CargoDigital-Support

        Um die Anzahl der relevanten Sendungen besser einzugrenzen kann optional der aktuelle Standort auf Basis des nächsten Bahnhofs eingegrenzt werden.

        Der Service liefert eine Liste aller Bahnhöfe eines Kunden auf Basis der gerade verfügbaren Bahnhöfe in den offenen Sendungen (keine Stammdaten).

        Es wird keine Geoposition zum Bahnhof mitgesendet.
      parameters:
        - name: typ
          in: query
          description: |
            Begrenze die Bahnhöfe auf solche, an denen der Kunde entweder
            Versender oder Empfänger in den aktuellen

            Sendungen ist.
          required: false
          schema:
            type: string
            enum:
              - empfang
              - versand
            default: versand
        - name: land
          in: query
          description: Filtert die Bahnhöfe nach UIC Ländercode
          required: false
          schema:
            type: integer
            format: int32
            pattern: '[0-9]{1,4}'
            default: 85
        - name: transportID
          in: query
          description: |
            Gibt nur Bahnhöfe einer spezifischen Sendung zurück, identifiziert
            durch die Transport-ID
          schema:
            type: integer
            format: int32
        - name: sendungsnummer
          in: query
          description: |
            Gibt nur Bahnhöfe einer spezifischen Sendung zurück, identifiziert
            durch die Frachtbriefnummer.

            Es werden die einzelnen Bestandteile der Sendungsnummer als CSV
            Liste erwartet.


            Example: "/bahnhoefe?sendungsnummer=85,53090,2185,195787072"
          style: form
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: Es wurden Bahnhöfe gefunden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ort'
        204:
          description: Es wurden keine Bahnhöfe gefunden
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /produkte/status:
    get:
      tags:
        - Systemstatus
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Gibt Informationen über den Status der verfügbaren Cargo Digital Produkte. Alle Cargo Digital Produkte und ihre Status werden hier geliefert.
      parameters:
        - name: sprache
          in: query
          description: 'Die Sprache, in welcher Antworten vom Server ausgegeben werden.'
          schema:
            type: string
            enum:
              - de
              - fr
              - it
            default: de
      responses:
        200:
          description: 'Abfrage erfolgreich, es wurden alle Produkte gefunden.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Produkt'
        400:
          description: |
            Fehlerhafte Anfrage, die Anfrage konnte vom Server nicht verarbeitet
            werden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CargoError'
        500:
          description: |
            Es ist ein unerwarteter Fehler aufgetreten, weshalb die Anfrage
            nicht verarbeitet werden konnte.
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /users/{userid}/profile:
    get:
      tags:
        - Benutzerprofil Einstellungen
      operationId: getUserSettings
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Gibt alle Benutzerprofil Einstellungen des angemeldeten Kunden zurück.
      parameters:
        - name: userid
          in: path
          required: true
          description: Zu welchem User muss die Profilkonfiguration zugeordnet sein?
          schema:
            type: string
      responses:
        200:
          description: Abfrage erfolgreich
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BenutzerProfilEinstellungen'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    put:
      tags:
        - Benutzerprofil Einstellungen
      operationId: replaceUserSettings
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Ersetzt die bestehende Benutzerprofil Einstellungen des angemeldeten Kunden.
      parameters:
        - name: userid
          in: path
          required: true
          description: Zu welchem User muss die Profilkonfiguration zugeordnet sein?
          schema:
            type: string
      requestBody:
        description: Erwartet wird ein Benutzerprofil Einstellungen Objekt, dass insgesamt das jetzige vollständig ersetzt.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenutzerProfilEinstellungen'
      responses:
        200:
          description: Die Benutzerprofil Einstellungen wurden erfolgreich ersetzt
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /users/{userid}/services:
    get:
      tags:
        - Benutzer spezifische Dienste
      operationId: getServiceConfigurations
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Gibt alle vorhandenen Benutzerdienste zurück. Die Benutzerdienste können pro Account individuell konfiguriert und aktiviert werden.
      parameters:
        - name: userid
          in: path
          required: true
          description: Zu welchem User muss die Servicekonfiguration zugeordnet sein?
          schema:
            type: string
      responses:
        200:
          description: Abfrage erfolgreich
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSpecificService'
        204:
          description: Für den aktuellen Benutzer gibt es noch keine Dienstkonfigurationen
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    post:
      tags:
        - Benutzer spezifische Dienste
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Es können verschiedene Konfigurationen für Benutzerspezifische Dienste angelegt werden.

        Ein möglicher Anwendungsfall (bei ETA Veränderungen) sind diverse Konfigurationen für verschiedene Standorte, die jeweils eigene Kontaktadressen und Schwellwerte beinhalten.
      operationId: createServiceConfiguration
      parameters:
        - name: userid
          in: path
          required: true
          description: Zu welchem User muss die Servicekonfiguration zugeordnet sein?
          schema:
            type: string
      requestBody:
        description: |
          Die Konfiguration, die neu angelegt werden soll.

          **Momentan** werden nur Cargo Digital Push ETA Konfigurationen unterstützt.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSpecificService'
      responses:
        200:
          description: |
            Die Benutzerkonfiguration wurde erfolgreich angelegt. Es wird das angelegte Objekt zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSpecificService'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /users/{userid}/services/{serviceid}:
    get:
      tags:
        - Benutzer spezifische Dienste
      operationId: getServiceConfiguration
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Wird benutzt um auf Benutzerebene verschiedene Dienste zu konfigurieren
      parameters:
        - name: userid
          in: path
          required: true
          description: Zu welchem User muss die Servicekonfiguration zugeordnet sein?
          schema:
            type: string
        - name: serviceid
          in: path
          required: true
          description: ID der einzelnen Konfiguration
          schema:
            type: string
      responses:
        200:
          description: Abfrage erfolgreich
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSpecificService'
        '204':
          description: Für diesen User und Cargo Push Service sind keine Daten hinterlegt.
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    put:
      tags:
        - Benutzer spezifische Dienste
      operationId: updateServiceConfiguration
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Aktualisiert den Datensatz für einen Bereich in Cargo Push. Der Datensatz wird mit den eingegebenen Formulardaten überschrieben.
      parameters:
        - name: userid
          in: path
          required: true
          description: Identifiziert von welchem User der Datensatz überschrieben werden soll.
          schema:
            type: string
        - name: serviceid
          in: path
          required: true
          description: ID der einzelnen Konfiguration
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSpecificService'
        description: Datensatz für die Konfiguration der Benachrichtigungen
        required: true
      responses:
        '200':
          description: |
            Datensatz wurde erfolgreich aktualisiert, eine aktuelle und vollständige Repräsentation des Datensatzes wird zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSpecificService'
        '400':
          description: |
            Der Datensatz konnte aufgrund einer Falscheingabe nicht gespeichert
            werden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CargoError'
        401:
          description: 'Unautorisierter Zugriff, Token fehlt'
        403:
          description: 'Zugriff verboten, der User darf die Schnittstelle nicht benutzen.'
        500:
          description: |
            Es ist ein unerwarteter Fehler aufgetreten, weshalb die Anfrage nicht verarbeitet werden konnte.
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    delete:
      tags:
        - Benutzer spezifische Dienste
      operationId: deleteServiceConfiguration
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Entfernt die Dienstkonfiguration.
      parameters:
        - name: userid
          in: path
          required: true
          description: |
            Identifiziert von welchem User der Datensatz überschrieben werden soll.
          schema:
            type: string
        - name: serviceid
          in: path
          required: true
          description: ID der einzelnen Konfiguration
          schema:
            type: string
      responses:
        204:
          description: Dienstkonfiguration wurde erfolgreich entfernt
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /fahrplan:
    get:
      tags:
        - Fahrplan
      operationId: getFahrplan
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert die Soll-Plan-Zugfahrten welche dem anfragenden Kunden zugeordnet sind.
      parameters:
        - name: fahrplanperiode
          in: query
          description: Fahrplanperiode für welche die Daten abgerufen werden wollen.(z.B. 2022). Wenn nicht gesendet, heute gueltige Fahrplanperiode
          schema:
            type: integer
            format: int32
            example: 2022
        - name: zugNr
          in: query
          description: die vollständige 5-stellige Zugnummer (z.B. 40012)
          schema:
            type: string
      responses:
        '200':
          description: Alle zum Fahrplan des Kunden gehörenden Plan-Zugfahrten
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanZugfahrt'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /fahrplanZugfahrten:
    get:
      tags:
        - Fahrplan
      operationId: getFahrplanZugfahrten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert die konkreten Zugfahrten welche aus dem Soll-Fahrplan generiert wurden und dem anfragenden Kunden zugeordnet sind.
      parameters:
        - name: verkehrstagVon
          in: query
          description: Der erste Verkehrstag ab welchem die Daten geliefert werden sollen.
          required: true
          schema:
            type: string
            format: date
            example: '2022-08-29'
        - name: verkehrstagBis
          in: query
          description: Der letzte Verkehrstag für welchen die Daten geliefert werden sollen.
          required: true
          schema:
            type: string
            format: date
            example: '2022-08-29'
        - name: zugNr
          in: query
          description: die vollständige 5-stellige Zugnummer (z.B. 40012)
          schema:
            type: string
      responses:
        '200':
          description: Alle zum Fahrplan des Kunden gehörenden Plan-Zugfahrten
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Zugfahrt'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /reservierungen:
    get:
      tags:
        - Reservierungen
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Gibt alle eingeplanten Reservierungen für den angemeldeten User zurück. Wenn es zum Beispiel für einen spezifischen Tag schon eine SBB Cargo Planung für einen Kunden auf einer spezifischen Relation gibt, wird dies in einer eingeplanten Reservierung abgebildet.

        Diese eingeplanten Reservierungen können mit weniger Informationen als einer normalen Bestellung vervollständigt werden und sind bei SBB Cargo in den Kapazitäten vorgemerkt.
      operationId: getReservierungen
      parameters:
        - name: startDatum
          in: query
          description: Sucht alle Reservierungen ab diesem Datum. Kann in Kombination mit "endDatum" benutzt werden.
          schema:
            type: string
            format: date
        - name: endDatum
          in: query
          description: Sucht alle eingeplanten Reservierungen bis zu diesem Datum. **Muss** in Kombination mit "startDatum" benutzt werden.
          schema:
            type: string
            format: date
      responses:
        200:
          description: Es wurden keine, eine oder mehrere Reservierungen für den aktuellen User gefunden.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservierung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /bestellungen:
    get:
      tags:
        - Bestellungen
      operationId: getBestellungen
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Gibt die Liste von allen vorhandenen Bestellungen zurück.
      parameters:
        - name: datumVon
          in: query
          description: Datum der Bestellung im Zeitbereich von
          required: true
          schema:
            type: string
            format: date
        - name: datumBis
          in: query
          description: Datum der Bestellung im Zeitbereich bis
          required: true
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Filter die Bestellungen nach Status.
            Wenn der Filter nicht gesetzt ist, werden alle Status geliefert.
            Wenn mindestens ein Status vorhanden ist, dann werden nur die Bestellungen mit den gewünschten Status zurückgegeben.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BestellungStatus'
        - name: auftragStatus
          in: query
          description: Filter die Aufträge der Bestellungen nach Status.
            Wenn der Filter nicht gesetzt ist, werden alle Status (inkl. geloescht) geliefert.
            Wenn mindestens ein Status vorhanden ist, dann werden nur die Auftäge mit den gewünschten Status zurückgegeben.
          style: form
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AuftragStatus'
      responses:
        200:
          description: Es wurden Bestellungen für den angemeldeten User gefunden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    post:
      tags:
        - Bestellungen
      operationId: createBestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Legt eine neue Bestellung an.
      parameters:
        - name: musterid
          in: query
          description: Die MusterID kann beim Anlegen einer Bestellung aus einer Musterbestellung mitgegeben werden, damit das Datum `letzteVerwendung` des entsprechenden Musters aktualisiert wird.
          schema:
            type: string
      requestBody:
        description: Die neu anzulegende Bestellung mit allen ihren Attributen muss hier erfasst werden
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bestellung'
      responses:
        200:
          description: |
            Die neue Bestellung wurde erfolgreich angelegt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bestellung'
        202:
          description: |
            Die neue Bestellung wurde empfangen, ist aber noch in der Verarbeitung. Es ist keine weitere Information bekannt.

            Der Client kann zu einem späteren Zeitpunkt die Existenz manuell prüfen.
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /bestellungen/{bestellid}:
    get:
      tags:
        - Bestellungen
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Eine einzelne Bestellung kann über ihre technische ID direkt gesucht werden.
      operationId: getBestellung
      parameters:
        - name: bestellid
          in: path
          description: ID der Bestellung
          required: true
          schema:
            type: string
        - name: auftragStatus
          in: query
          description: Filter die Aufträge der Bestellung nach Status.
            Wenn der Filter nicht gesetzt ist, werden alle Status (inkl. geloescht) geliefert.
            Wenn mindestens ein Status vorhanden ist, dann werden nur die Auftäge mit den gewünschten Status zurückgegeben.
          style: form
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AuftragStatus'
      responses:
        200:
          description: 'Abfrage erfolgreich, Daten werden gesendet'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    put:
      tags:
        - Bestellungen
      operationId: replaceBestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Ersetzt die bestehende Bestellung mit der angegebenen Ressource.
      parameters:
        - name: bestellid
          in: path
          description: ID der Bestellung
          required: true
          schema:
            type: string
      requestBody:
        description: Erwartet wird ein Bestellobjekt, dass insgesamt das jetzige vollständig ersetzt.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bestellung'
      responses:
        200:
          description: Die Bestellung wurde erfolgreich ersetzt. Die Antwort enhält IDs für neu erstellte Aufträge.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    delete:
      tags:
        - Bestellungen
      operationId: deleteBestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Löscht eine nicht gesendete Bestellung oder setzt eine zurückgegebene Bestellung im Status kundenAbgelehnt.
      parameters:
        - name: bestellid
          in: path
          description: ID der Bestellung
          required: true
          schema:
            type: string
      responses:
        204:
          description: Die Bestellung wurde erfolgreich gelöscht oder auf kundenAbgelehnt gesetzt.
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /bestellungen/{bestellid}/confirm:
    post:
      tags:
        - Bestellungen
      operationId: confirmBestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Übergibt die Bestellung an SBB Cargo für Prüfung und Umsetzung.
      parameters:
        - name: bestellid
          in: path
          description: ID der Bestellung
          required: true
          schema:
            type: string
      responses:
        200:
          description: Sie haben erfolgreich bestellt, es erfolgt eine Prüfung Ihrer Angaben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /bestellungen/{bestellid}/cancel:
    post:
      tags:
        - Bestellungen
      operationId: cancelBestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Übergibt die Bestellung an SBB Cargo für den Stornoprozess.
      parameters:
        - name: bestellid
          in: path
          description: ID der Bestellung
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelBestellungRequest'
      responses:
        200:
          description: Sie haben erfolgreich storniert.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /bestellungen/{bestellid}/umbestellen:
    post:
      tags:
        - Bestellungen
      operationId: umbestellenBestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Übergibt die Bestellung und die gewünschten Änderungen an SBB Cargo für den Umbestellungsprozess. Diese Funktion kann nur im Status "bestaetigt" ausgeführt werden.
      parameters:
        - name: bestellid
          in: path
          description: ID der Bestellung
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Umbestellungsanfrage'
      responses:
        200:
          description: Sie haben den Umbestellungsprozess erfolgreich angestossen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /bestellungen/{bestellid}/stornokonditionen:
    get:
      tags:
        - Bestellungen
      operationId: getBestellungStornokonditionen
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Gibt die Stornokonditionen der spezifischen Bestellung zurück.
      parameters:
        - name: bestellid
          in: path
          description: Nummer der Bestellung
          required: true
          schema:
            type: string
      responses:
        200:
          description: Die Stornokonditionen der Bestellung wurden gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stornokonditionen'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /bestellungen/confirm:
    post:
      tags:
        - Bestellungen
      operationId: confirmBestellungen
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Übergibt eine oder mehrere Bestellungen an SBB Cargo für Prüfung und Umsetzung.
      requestBody:
        description: ID(s) der Bestellung(en)
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                description: ID einer Bestellung
              minItems: 1
      responses:
        200:
          description: Sie haben erfolgreich bestellt, es erfolgt eine Prüfung Ihrer Angaben.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /bestellungen/{bestellid}/bestellbar/check:
    get:
      tags:
        - Bestellungen
      operationId: checkBestellungBestellbar
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Prüft ob die Bestellung aus SBB Cargo Sicht bestellbar ist. Wenn nicht, wird die möglichen Begründungen geliefert.
      parameters:
        - name: bestellid
          in: path
          description: Nummer der Bestellung
          required: true
          schema:
            type: string
      responses:
        200:
          description: Das Ergebnis der Prüfung
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckErgebnis'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /muster/bestellungen:
    get:
      tags:
        - Musterbestellungen
      operationId: getMusterbestellungen
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Gibt die Liste von allen vorhandenen Musterbestellungen zurück.
      responses:
        200:
          description: Es wurden Bestellungen für den angemeldeten User gefunden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Musterbestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    post:
      tags:
        - Musterbestellungen
      operationId: createMusterbestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Legt eine neue Musterbestellung an.
      requestBody:
        description: Die neu anzulegende Musterbestellung mit allen ihren Attributen muss hier erfasst werden
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Musterbestellung'
      responses:
        200:
          description: |
            Die neue Musterbestellung wurde erfolgreich angelegt.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Musterbestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /muster/bestellungen/{musterid}:
    get:
      tags:
        - Musterbestellungen
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Eine einzelne Musterbestellung kann über ihre technische ID direkt gesucht werden.
      operationId: getMusterbestellung
      parameters:
        - name: musterid
          in: path
          description: ID der Musterbestellung
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Abfrage erfolgreich, Daten werden gesendet'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Musterbestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    put:
      tags:
        - Musterbestellungen
      operationId: updateMusterbestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Ersetzt die bestehende Bestellung mit der angegebenen Ressource.
      parameters:
        - name: musterid
          in: path
          description: ID der Musterbestellung
          required: true
          schema:
            type: string
      requestBody:
        description: Erwartet wird ein Musterbestellobjekt, dass insgesamt das jetzige vollständig ersetzt.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Musterbestellung'
      responses:
        200:
          description: Die Musterbestellung wurde erfolgreich ersetzt. Die Antwort enhält IDs für neu erstellte Aufträge in der Musterbestellung.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Musterbestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    delete:
      tags:
        - Musterbestellungen
      operationId: deleteMusterbestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Löscht eine Musterbestellung.
      parameters:
        - name: musterid
          in: path
          description: ID der Musterbestellung
          required: true
          schema:
            type: string
      responses:
        204:
          description: Die Musterbestellung wurde erfolgreich gelöscht.
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /auftraege:
    get:
      tags:
        - Aufträge
      operationId: getAuftraege
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Gibt eine Liste von allen vorhandenen Aufträgen zurück.
      parameters:
        - name: datumVon
          in: query
          description: Datum des Auftrags im Zeitbereich von
          required: true
          schema:
            type: string
            format: date
        - name: datumBis
          in: query
          description: Datum des Auftrags im Zeitbereich bis
          required: true
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Filter die Aufträge nach Status.
            Wenn der Filter nicht gesetzt ist, werden alle Status (inkl. geloescht) geliefert.
            Wenn mindestens ein Status vorhanden ist, dann werden nur die Aufträge mit den gewünschten Status zurückgegeben.
          style: form
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AuftragStatus'
        - name: versandbahnhof
          in: query
          description: |
            Der Versandbahnhof der Aufträge (UIC-Land und UIC-Nummer).
          required: false
          schema:
            type: string
            pattern: '[0-9]{2}-[0-9]{6}'
            example: '85-070102'
        - name: empfangsbahnhof
          in: query
          description: |
            Der Empfangsbahnhof der Aufträge (UIC-Land und UIC-Nummer).
          required: false
          schema:
            type: string
            pattern: '[0-9]{2}-[0-9]{6}'
            example: '85-070102'
        - name: detailliert
          in: query
          description: |
            Wenn dieser Parameter `true` ist, wird die Liste von Aufträgen mit allen Details (analog zur Antwort von `/auftraege/{auftragsid}`) zurück gegeben.
            In diesem Fall gelten folgende Einschränkungen:
            * der abgefragte Zeitraum darf max 15 Tage betragen 
            * es muss zwingend ein Versand- oder Empfangsbahnhof festgelegt werden
          required: false
          schema:
            default: false
            type: boolean
      responses:
        200:
          description: Es wurden 0 bis n Aufträge für den angemeldeten User gefunden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auftrag'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /auftraege/{auftragsid}:
    get:
      tags:
        - Aufträge
      operationId: getAuftrag
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Gibt den spezifischen Auftrag zurück.
      parameters:
        - name: auftragsid
          in: path
          description: Nummer des Auftrags
          required: true
          schema:
            type: string
      responses:
        200:
          description: Der Auftrag wurde gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auftrag'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    put:
      tags:
        - Aufträge
      operationId: updateAuftrag
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Aktualisiert den spezifischen Auftrag.
      parameters:
        - name: auftragsid
          in: path
          description: Nummer des Auftrags
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auftrag'
      responses:
        200:
          description: Der Auftrag wurde aktualisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auftrag'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    delete:
      tags:
        - Aufträge
      operationId: deleteAuftrag
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Löscht den Auftrag.
      parameters:
        - name: auftragsid
          in: path
          description: Nummer des Auftrags
          required: true
          schema:
            type: string
      responses:
        200:
          description: Der Auftrag wurde erfolgreich gelöscht.
          content:
            application/json:
              schema:
                type: string
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /auftraege/{auftragsid}/complete:
    post:
      tags:
        - Aufträge
      operationId: completeErfassungAuftrag
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Bietet dem Kunden die Möglichkeit die Erfassung des Auftrags als abgeschlossen oder nicht abgeschlossen zu melden. Die Methode prüft die Durchführbarkeit des Auftrags und aktualisiert das Feld erfassungAbgeschlossen.
      parameters:
        - name: auftragsid
          in: path
          description: Nummer des Auftrags
          required: true
          schema:
            type: string
        - name: abgeschlossen
          in: query
          description: Definiert ob der Auftrag abgeschlossen ist oder nicht.
          required: true
          schema:
            type: boolean
      responses:
        200:
          description: Der aktualisierte Auftrag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auftrag'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /auftraege/{auftragsid}/abfahrtUnterwegsortSetzen:
    post:
      tags:
        - Aufträge
      operationId: setAbfahrtUnterwegsort
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Bietet dem Kunden die Möglichkeit, den Empfangsbahnhof und andere Daten einzugeben, falls diese bei der Bestellung noch nicht erfasst wurden. Diese Methode darf nur mit dem passenden Vertrag (mit Unterwegsbahnhof) verwendet werden.

        Diese Methode darf nur einmal aufgerufen werden. Nach dieser Operation muss keine zusätzliche Aktion durchgeführt werden.
      parameters:
        - name: auftragsid
          in: path
          description: Nummer des Auftrags
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AbfahrtUnterwegsortSetzenRequest'
      responses:
        200:
          description: Der aktualisierte Auftrag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auftrag'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /auftraege/{auftragsid}/kapazitaetErweitern:
    post:
      tags:
        - Aufträge
      operationId: changeCapacityAuftrag
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Bietet dem Kunden die Möglichkeit für einen geänderten Auftrag bei welchen die ursprünglich bestätigte Kapazität nicht ausreicht eine Erhöhnung der gebuchten Kapazität zu veranlassen unter Beibehaltung der aktuell gebuchten Transportkette.
        Kann die zusätzlich benötigte Kapazität auf der vorher bestätigten Transportkette nicht gebucht werden, bleibt die ursprünglich bestätigte Kapazität und Transportkette erhalten. In diesem Fall muss entweder der Auftrag erneut angepasst oder storniert werden.
        Kapazität welche bestätigt war und gemäss den aktuellen Auftragsdaten nicht benötigt wird, wird freigegeben.
      parameters:
        - name: auftragsid
          in: path
          description: Nummer des Auftrags
          required: true
          schema:
            type: string
      responses:
        200:
          description: Kapazitätsanfrage wurde erfolgreich bearbeitet. Die Antwort auf diese Kapazitätserweiterung findet asynchron statt (ist anhand eines Webhook-Callbacks auf der Ressource Auftrag erkennbar).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auftrag'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /auftraege/{auftragsid}/download:
    get:
      tags:
        - Aufträge
      operationId: getAuftragPDF
      security:
        - bearerAuth: []
        - cookieAuth: [] # primaer fuer Nutzung im Browser/Download
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Liefert die Auftragsdaten als PDF
      parameters:
        - name: auftragsid
          in: path
          description: Nummer des Auftrags
          required: true
          schema:
            type: string
        - name: partnerid
          in: query
          description: |
            ZKK des Partners (nur erlaubt/notwendig mit Support Rolle)
          required: false
          schema:
            type: string
            pattern: '^[0-9]{8}$'
      responses:
        200:
          description: Die Auftragsdaten
          headers:
            Content-Disposition:
              schema:
                type: string
                pattern: '^attachment; filename=".*"$'
              description: Standard Dateiname
              example: attachment; filename="Auftrag_12348_2020-08-27.pdf"
          content:
            application/pdf: # dies impliziert den Header "Content-Type: application/pdf"
              schema:
                type: string
                format: binary
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /auftraege/{auftragsid}/durchfuehrbar/check:
    get:
      tags:
        - Aufträge
      operationId: checkAuftragDurchfuehrbar
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Prüft ob der Auftrag aus SBB Cargo Sicht durchführbar ist. Wenn nicht, wird die möglichen Begründungen geliefert.
      parameters:
        - name: auftragsid
          in: path
          description: Nummer des Auftrags
          required: true
          schema:
            type: string
      responses:
        200:
          description: Das Ergebnis der Prüfung
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckErgebnis'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /auftraege/{auftragsid}/bestellbar/check:
    get:
      tags:
        - Aufträge
      operationId: checkAuftragBestellbar
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Prüft ob der Auftrag aus SBB Cargo Sicht bestellbar ist. Wenn nicht, wird die möglichen Begründungen geliefert.
      parameters:
        - name: auftragsid
          in: path
          description: Nummer des Auftrags
          required: true
          schema:
            type: string
      responses:
        200:
          description: Das Ergebnis der Prüfung
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckErgebnis'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /auftraege/{auftragsid}/auftragspositionen:
    post:
      tags:
        - Aufträge
      operationId: createAuftragspositionen
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Ergänzt den gegebenen Auftrag mit einer oder mehreren Auftragspositionen. Falls Auftragspositionen schon vorhanden sind, werden die beibehalten.
      parameters:
        - name: auftragsid
          in: path
          description: Nummer des Auftrags
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Auftragsposition'
        required: true
      responses:
        200:
          description: Die Auftragsposition(en) wurde(n) erfolgreich hinzugefügt
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auftragsposition'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    delete:
      tags:
        - Aufträge
      operationId: deleteAllAuftragspositionen
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Löscht alle Auftragspositionen auf dem gegebenen Auftrag
      parameters:
        - name: auftragsid
          in: path
          description: Nummer des Auftrags
          required: true
          schema:
            type: string
      responses:
        200:
          description: Die Auftragspositionen wurden erfolgreich gelöscht
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /auftraege/{auftragsid}/auftragsposition/{laufnummer}:
    put:
      tags:
        - Aufträge
      operationId: updateAuftragsposition
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Aktualisiert die gegebene Auftragsposition im gegebenen Auftrag
      parameters:
        - name: auftragsid
          in: path
          description: Nummer des Auftrags
          required: true
          schema:
            type: string
        - name: laufnummer
          in: path
          description: Laufnummer der Auftragsposition im Auftrag
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auftragsposition'
        required: true
      responses:
        200:
          description: Die Auftragsposition wurde erfolgreich aktualisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auftragsposition'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    delete:
      tags:
        - Aufträge
      operationId: deleteAuftragsposition
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Löscht gegebene Auftragsposition im gegebenen Auftrag
      parameters:
        - name: auftragsid
          in: path
          description: Nummer des Auftrags
          required: true
          schema:
            type: string
        - name: laufnummer
          in: path
          description: Laufnummer der Auftragsposition im Auftrag
          required: true
          schema:
            type: string
      responses:
        200:
          description: Die Auftragsposition wurde erfolgreich gelöscht
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /leerwagenbestellungen:
    get:
      tags:
        - Leerwagenbestellung
      operationId: getLeerwagenbestellungen
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Liefert alle Leerwagenbestellung der angemeldeten Kunde
      parameters:
        - name: datumVon
          in: query
          description: Zustelldatum der Leerwagenbestellung im Zeitbereich von
          required: true
          schema:
            type: string
            format: date
        - name: datumBis
          in: query
          description: Zustelldatum der Leerwagenbestellung im Zeitbereich bis
          required: true
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: |
            Filter die Leerwagenbestellungen nach Status.
            Wenn der Filter nicht gesetzt ist, werden alle Status geliefert.
            Wenn mindestens ein Status vorhanden ist, dann werden nur die Bestellungen mit den gewünschten Status zurückgegeben.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LeerwagenbestellungStatus'
      responses:
        200:
          description: Die Leerwagenbestellungen wurden gefunden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Leerwagenbestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    post:
      tags:
        - Leerwagenbestellung
      operationId: postLeerwagenbestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Erstellt eine Leerwagenbestellung für den angemeldeten Kunde
      requestBody:
        description: Die neu anzulegende Leerwagenbestellung mit allen ihren Attributen muss hier erfasst werden
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Leerwagenbestellung'
      responses:
        200:
          description: Die Leerwagenbestellungen wurden erstellt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leerwagenbestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /leerwagenbestellungen/{leerwagenbestellungid}:
    get:
      tags:
        - Leerwagenbestellung
      operationId: getLeerwagenbestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Liefert eine Leerwagenbestellung
      parameters:
        - name: leerwagenbestellungid
          in: path
          description: Nummer der Leerwagenbestellung
          required: true
          schema:
            type: string
      responses:
        200:
          description: Die Leerwagenbestellung wurde gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leerwagenbestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    put:
      tags:
        - Leerwagenbestellung
      operationId: updateLeerwagenbestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Liefert eine Leerwagenbestellung
      parameters:
        - name: leerwagenbestellungid
          in: path
          description: Nummer der Leerwagenbestellung
          required: true
          schema:
            type: string
      requestBody:
        description: Die zu aktualisierende Leerwagenbestellung mit allen ihren Attributen muss hier erfasst werden
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Leerwagenbestellung'
      responses:
        200:
          description: Die Leerwagenbestellung wurde erfolgreich aktualisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leerwagenbestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
    delete:
      tags:
        - Leerwagenbestellung
      operationId: deleteLeerwagenbestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Löscht eine Leerwagenbestellung
      parameters:
        - name: leerwagenbestellungid
          in: path
          description: Nummer der Leerwagenbestellung
          required: true
          schema:
            type: string
      responses:
        204:
          description: Die Leerwagenbestellung wurde gelöscht
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /leerwagenbestellungen/{leerwagenbestellungid}/confirm:
    post:
      tags:
        - Leerwagenbestellung
      operationId: confirmLeerwagenbestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Bestellt eine Leerwagenbestellung
      parameters:
        - name: leerwagenbestellungid
          in: path
          description: Nummer der Leerwagenbestellung
          required: true
          schema:
            type: string
      responses:
        200:
          description: Sie haben erfolgreich bestellt, es erfolgt eine Prüfung Ihrer Angaben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leerwagenbestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /leerwagenbestellungen/{leerwagenbestellungid}/bestellbar/check:
    get:
      tags:
        - Leerwagenbestellung
      operationId: checkLeerwagenbestellungBestellbar
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Prüft, ob die Bestellung im aktuellen Stand bestellabr ist
      parameters:
        - name: leerwagenbestellungid
          in: path
          description: Nummer der Leerwagenbestellung
          required: true
          schema:
            type: string
      responses:
        200:
          description: Das Ergebnis der Prüfung
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckErgebnis'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /leerwagenbestellungen/{leerwagenbestellungid}/cancel:
    post:
      tags:
        - Leerwagenbestellung
      operationId: cancelLeerwagenbestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Übergibt die Leerwagenbestellung an SBB Cargo für den Stornoprozess. Diese Funktion kann nur im Status "gesendet" ausgeführt werden.
      parameters:
        - name: leerwagenbestellungid
          in: path
          description: ID der Bestellung
          required: true
          schema:
            type: string
      responses:
        200:
          description: Sie haben erfolgreich storniert.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leerwagenbestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /leerwagenbestellungen/{leerwagenbestellungid}/umbestellen:
    post:
      tags:
        - Leerwagenbestellung
      operationId: umbestellenLeerwagenbestellung
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders

        Übergibt die Leerwagenbestellung und die gewünschten Änderungen an SBB Cargo für den Änderungsprozess. Diese Funktion kann nur im Status "gesendet" ausgeführt werden.
      parameters:
        - name: leerwagenbestellungid
          in: path
          description: ID der Leerwagenbestellung
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Leerwagenbestellung'
      responses:
        200:
          description: Sie haben den Umbestellungsprozess erfolgreich angestossen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leerwagenbestellung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /wagen/abholbereitMelden:
    post:
      tags:
        - Wagenstatus
      operationId: setWagenAbholbereit
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Setzt den Status Abholbereit für die im Request aufgeführten Wagen.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AbholbereiterWagen'
      responses:
        200:
          description: Anfrage erfolgreich, Daten wurden gespeichert
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Zustellvorgang'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /vertraege:
    get:
      tags:
        - Verträge
      operationId: getVertraege
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Orders, CargoDigital-Support

        Liefert die verschiedenen Verträge des angemeldeten Kunden, bei dem dieser der Auftraggeber ist.
      parameters:
        - name: gueltigAm
          in: query
          description: Begrenzt die Vertraege die an diesem Tag gültig sind. Wenn das Feld nicht gesetzt ist, wird das heutige Datum gesetzt.
          schema:
            type: string
            format: date
        - name: gueltigAb
          in: query
          description: 'Tag, ab/nach dem die Variante gültig sein soll'
          schema:
            type: string
            format: date
      responses:
        200:
          description: Es wurden 0 bis n Verträge für den angemeldeten User gefunden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vertrag'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/bedienzeiten:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert die Bedienzeiten für eine bestimmte Ladestelle

        Für eine Ladestelle werden die vorhandenen Bedienzeiten geliefert. Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.
      operationId: getBedienzeiten
      parameters:
        - name: bahnhof
          in: query
          description: |
            Der gewünschte Bahnhof (uicLand und uicNummer)
          required: true
          schema:
            type: string
            pattern: '[0-9]{2}-[0-9]{6}'
            example: '85-070102'
        - name: ladestellennummer
          in: query
          description: |
            Damit eine Abfrage nach Ladestellennummer möglich ist, muss immer auch der Parameter Bahnhof passend dazu
            befüllt sein
          required: false
          schema:
            type: string
            pattern: '[a-zA-Z0-9]{1,10}'
            example: '1'
        - name: vonDatum
          in: query
          description: |
            Begrenzt die Suche auf einen Tag (oder einen Zeitraum wenn "bisDatum" auch gesetzt ist), an dem die Bedienzeit offen ist.
            Wenn dieses Feld nicht gesetzt ist, wird es defaultmässig auf das heutige Datum gesetzt.
          required: false
          schema:
            type: string
            format: 'date-time'
            example: '2021-07-01T00:00:00.000Z'
        - name: bisDatum
          in: query
          description: |
            Begrenzt die Suche auf einen Zeitraum (wird ignoriert wenn "vonDatum" nicht gesetzt ist), an dem die Bedienzeit offen ist.
          required: false
          schema:
            type: string
            format: 'date-time'
            example: '2021-07-31T23:59:59.999Z'
      responses:
        '200':
          description: Die Daten konnten erfolgreich geliefert werden.
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bedienzeit'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/bedienzeitfenster:
    get:
      tags:
        - Stammdaten
      # Deprecated
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert die Bedienzeitfenster für einen bestimmten Bahnhof / für eine bestimmte Ladestelle

        Für einen Bahnhof / eine Ladestelle werden die vorhandenen Bedienzeitfenster geliefert. Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.

        Deprecated: wird bei der getBedienzeiten Methode ersetzt
      parameters:
        - name: bahnhof
          in: query
          description: |
            Der gewünschte Bahnhof (uicLand und uicNummer)
          required: false
          schema:
            type: string
            pattern: '[0-9]{2}-[0-9]{6}'
            example: '85-070102'
        - name: ladestellennummer
          in: query
          description: |
            Damit eine Abfrage nach Ladestellennummer möglich ist, muss immer auch der Parameter Bahnhof passend dazu
            befüllt sein
          required: false
          schema:
            type: string
            pattern: '[0-9]{2}'
            example: '01'
        - name: vonDatum
          in: query
          description: |
            Begrenzt die Suche auf einen Tag (oder **einen** Zeitraum wenn "bisDatum" auch gesetzt ist)
          required: false
          schema:
            type: string
            format: date
            example: '2018-04-23'
        - name: bisDatum
          in: query
          description: |
            Begrenzt die Suche auf einen Zeitraum (wird ignoriert wenn "vonDatum" nicht gesetzt ist)
          required: false
          schema:
            type: string
            format: date
            example: '2018-04-28'
      responses:
        '200':
          description: Es wurde ein passendes Bedienzeitfenster gefunden.
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bedienzeitfenster'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/befoerderungsbeschraenkungen:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liste aller bekannten Befoerderungsbeschraenkungen.

        Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.
      operationId: getBefoerderungsbeschraenkungen
      parameters:
        - $ref: '#/components/parameters/ParamQuerySprache'
      responses:
        '200':
          description: Die Daten konnten erfolgreich geliefert werden.
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Befoerderungsbeschraenkung'
  /stammdaten/frachtbrief/erklaerungabsender:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert alle ErklaerungAbsenderStammdaten Objekte für die Erklärung des Absenders

        Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.
      parameters:
        - $ref: '#/components/parameters/ParamQuerySprache'
      responses:
        '200':
          description: Die Daten konnten erfolgreich geliefert werden.
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErklaerungAbsenderStammdaten'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/frachtbrief/frankaturen:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert alle Frankaturen

        Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.
      parameters:
        - $ref: '#/components/parameters/ParamQuerySprache'
      responses:
        '200':
          description: Die Daten konnten erfolgreich geliefert werden.
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FrankaturStammdaten'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/frachtbrief/frankaturen/gebuehren:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert alle möglichen Gebühren für alle Frankaturen

        Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.
      parameters:
        - $ref: '#/components/parameters/ParamQuerySprache'
      responses:
        '200':
          description: Die Daten konnten erfolgreich geliefert werden.
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FrankaturGebuehrStammdaten'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/frachtbrief/beilagen:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert alle FrachtbriefBeilageStammdaten Objekte für die Beilagen zum Frachtbrief

        Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.
      parameters:
        - $ref: '#/components/parameters/ParamQuerySprache'
      responses:
        '200':
          description: Die Daten konnten erfolgreich geliefert werden.
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FrachtbriefBeilageStammdaten'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/gefahrgutdaten:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert die Stammdaten für Gefahrgut Daten. Wenn keine Vorschriftversion gegeben wird, werden nur die aktive(n) Version(en) geliefert.
        Die durch diesen Endpunkt abgerufenen Gefahrgut Daten können verwendet werden um zum Beispiel eine Buchung mit Gefahrgut vorzunehmen. Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.
      parameters:
        - name: vorschriftVersion
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/GefahrgutDatenVersion'
        - name: unNummer
          in: query
          schema:
            type: string
            pattern: '[0-9]{4}'
      responses:
        '200':
          description: Alle passenden Gefahrgut Objekte
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GefahrgutStammdaten'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/partner:
    get:
      tags:
        - Partner
        - Stammdaten
      operationId: getStammdatenPartner
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Ruft alle Partner ab, die eine Übereinstimmung (Name, Ort, ZKK) mit dem Suchtext haben.
      parameters:
        - name: suchtext
          in: query
          description: Teil vom Name, Ort oder von ZKK Nummer
          schema:
            type: string
      responses:
        200:
          description: 'Abfrage erfolgreich, es wurden einer oder mehrere Partner gefunden'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Partner'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/verpackungsarten:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert die Stammdaten für Verpackungsarten. Response Http Header wird so gesetzt, damit die Werte im Browser gecached werden können.
      parameters:
        - name: code
          in: query
          description: der Code der Verpackungsart
          schema:
            type: string
        - name: bezeichnung
          in: query
          description: die Bezeichnung der Verpackungsart
          schema:
            type: string
        - $ref: '#/components/parameters/ParamQuerySprache'
      responses:
        '200':
          description: Alle passenden Verpackungsart Objekte
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Verpackungsart'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/gefahrgutdaten/leerverpackungen:
    get:
      tags:
        - Stammdaten
      operationId: getGefahrgutLeerverpackungen
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert die Leerverpackung Stammdaten für Gefahrgut Daten. Die durch diesen Endpunkt abgerufenen Daten können verwendet werden um zum Beispiel eine Buchung mit Gefahrgut und Leerverpackung vorzunehmen. Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.
      responses:
        '200':
          description: Alle passenden Leerverpackung für Gefahrgut Objekte
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GefahrgutLeerverpackungStammdaten'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/gefahrgutdaten/sondervorschriften:
    get:
      tags:
        - Stammdaten
      operationId: getGefahrdatenSondervorschriften
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liste aller Sondervorschriften für die Gefahrgutdaten
      responses:
        '200':
          description: Abfrage erfolgreich. Daten werden gesendet
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GefahrgutSondervorschriftStammdaten'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/gefahrgutdaten/vorschriftversionen:
    get:
      tags:
        - Stammdaten
      operationId: getGefahrgutdatenVorschriftversionen
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liste aller Versionen für die Gefahrgutdaten
      responses:
        '200':
          description: Abfrage erfolgreich. Daten werden gesendet
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GefahrgutVorschriftVersionStammdaten'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/asNummern:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert die Stammdaten der bei SBB Cargo bekannten AS-Nummern für die Erfassung von Aussergewöhnliche Sendungen.
        Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.
      parameters:
        - name: eiuCode
          in: query
          description: EIU-Code
          required: false
          schema:
            type: string
            pattern: '[0-9]{4}'
            example: '2185'
      responses:
        '200':
          description: Alle passenden AS Objekte
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AsNummerStammdaten'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/eiuCodes:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert die Stammdaten der bei SBB Cargo bekannten EIU-Codes.
        Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.
      responses:
        '200':
          description: Alle EIU-Codes
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EiuCode'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/nhmgutart:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert die Stammdaten für NHM Gutart. Die durch diesen Endpunkt abgerufenen NHM-Daten können verwendet werden um zum Beispiel eine Buchung mit dem gewissen NHM-Code vorzunehmen. Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.
      parameters:
        - name: codeBeginntMit
          in: query
          description: NHM Code beginnt mit
          required: false
          schema:
            type: string
            example: '780'
        - name: bezeichnungEnthaelt
          in: query
          description: NHM Bezeichnung enthält
          required: false
          schema:
            type: string
            example: 'Bier'
        - $ref: '#/components/parameters/ParamQuerySprache'
      responses:
        '200':
          description: Alle passenden NHM Gutart Objekte
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NhmGutart'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/nhmladezustand:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert die Stammdaten für NHM Ladezustand. Die durch diesen Endpunkt abgerufenen NHM-Daten können verwendet werden um zum Beispiel eine Buchung mit dem gewissen NHM-Code vorzunehmen. Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.
      parameters:
        - name: codeBeginntMit
          in: query
          description: NHM Code beginnt mit
          required: false
          schema:
            type: string
            example: '780'
        - name: bezeichnungEnthaelt
          in: query
          description: NHM Bezeichnung enthält
          required: false
          schema:
            type: string
            example: 'Bier'
        - $ref: '#/components/parameters/ParamQuerySprache'
      responses:
        '200':
          description: Alle passenden NHM Gutart Objekte
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NhmLadezustand'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/isoLaender:
    get:
      tags:
        - Stammdaten
      operationId: getIsoLaender
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liste aller bekannten (politischen) Laender
      parameters:
        - $ref: '#/components/parameters/ParamQuerySprache'
      responses:
        '200':
          description: Liste der UIC Länder
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IsoLand'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/uicLaender:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liste der im System bekannten UIC Länder
      parameters:
        - $ref: '#/components/parameters/ParamQuerySprache'
      responses:
        '200':
          description: Liste der ISO Länder
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UicLand'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/uicLaender/{uicCode}:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Fragt ein UIC-Land anhand seines UIC-Ländercodes ab.
      parameters:
        - name: uicCode
          in: path
          description: Aus zwei Ziffern bestehender UIC-Ländercode.
          required: true
          example: '85'
          schema:
            type: string
            pattern: '[0-9]{2}'
        - $ref: '#/components/parameters/ParamQuerySprache'
      responses:
        '200':
          description: Das Land mit dem angegebenen UIC-Ländercode.
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UicLand'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/orte:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert die Stammdaten für Orte (Betriebspunkte und Ladestellen). Die durch diesen Endpunkt abgerufenen Orts-Daten können verwendet werden um zum Beispiel eine Buchung ab einem gewissen Versandbahnhof vorzunehmen. Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.
      parameters:
        - name: uicLand
          in: query
          description: |
            Das gewünschte Land
          required: false
          schema:
            type: string
            pattern: '[0-9]{2}'
            example: '85'
        - name: uicNummer
          in: query
          description: |
            Der Code des Betriebspunkts inkl. Prüfziffer
          required: false
          schema:
            type: string
            pattern: '[0-9]{6}'
            example: '070102'
        - name: typ
          in: query
          description: |
            Der gewünschte Typ der gelieferten Ort. Sollen nur Betriebspunkte oder Ladestellen geliefert werden. Wenn dieses Parameter nicht gesetzt ist, werden beide Typen geliefert.
          required: false
          schema:
            $ref: '#/components/schemas/OrtTyp'
      responses:
        '200':
          description: Alle passenden Orte
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ort'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/feiertage:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Stellt Stammdaten zu Feiertagen für SBB Cargo Orte zur Verfügung. Response Http Header wird so gesetzt damit die Werte im Browser gecached werden können.
      parameters:
        - name: bahnhof
          in: query
          description: |
            Der gewünschte Bahnhof (uicLand und uicNummer)
          required: true
          schema:
            type: string
            pattern: '[0-9]{2}-[0-9]{6}'
            example: '85-070102'
        - name: datumVon
          in: query
          description: Datum des Feiertags im Zeitbereich seit dem übergebenen Wert. Wenn dieser Wert nicht gesetzt ist, werden Feiertage ab dem 01.01. des Vorjahres zurückgegeben.
          required: false
          schema:
            type: string
            format: date
        - name: datumBis
          in: query
          description: Datum des Feiertags im Zeitbereich bis zum übergebenen Wert.
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Alle passenden Feiertage
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feiertag'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/leerwagenbestellungZusatzleistungen:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Gibt die Liste mit den bestellbaren Zusatzleistungen für Leerwagebestellungen 
        gem. Katalog "Preise und Konditionen von SBB Cargo AG" zurück. 
      operationId: getLeerwagenbestellungZusatzleistungen
      parameters:
        - $ref: '#/components/parameters/ParamQuerySprache'      
      responses:
        '200':
          description: |
            OK. 
            Die Response enthält die Liste mit den bestellbaren Zusatzleistungen für 
            Leerwagebestellungen gem. Katalog "Preise und Konditionen von SBB Cargo AG".
          headers:
            Cache-Control:
              schema:
                type: string
              example: 'public, max-age=86400'
              description: Definiert Cache Typ und Max-age.
            Expires:
              schema:
                type: string
              example: 'Tue, 18 Jun 2019 08:57:29 GMT'
              description: Definiert Datum und Zeit wann Cache ablaufen wird.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ZusatzleistungArt'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/ladeeinheitmetadaten:
    get:
      tags:
        - Stammdaten
      operationId: getLadeeinheitmetadaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert alle Ladeeinheit Metadaten die zu den passenden Parametern passt.
      parameters:
        - name: bezeichnungEnthaelt
          in: query
          description: Ladeeinheit-Bezeichnungen die diese Zeichen enthält (mind. 3 Zeichen)
          required: true
          schema:
            type: string
            pattern: '[A-Z0-9]{3}'
        - name: art
          in: query
          description: Art der Ladeeinheit
          required: true
          schema:
            $ref: '#/components/schemas/LadeeinheitArt'
        - $ref: '#/components/parameters/ParamQueryPageOffset'
        - $ref: '#/components/parameters/ParamQueryPageLimit'
      responses:
        '200':
          description: OK, der Body enthält die Liste Ladeeinheit Metadaten.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LadeeinheitMetadatenResponse'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/wagenmetadaten:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert alle Wagen Metadaten die zu den passenden Parametern passen, getrennt nach kundenspezifischen zuletzen und weiteren aus Stammdaten.
      parameters:
        - name: wagennummerEndetMit
          in: query
          description: Die letzten 4 Ziffern einer Wagennummer.
          required: true
          schema:
            type: string
            pattern: '[0-9]{4}'
        - name: partnerid
          in: query
          description: |
            ZKK des Partners
          required: false
          schema:
            type: string
            pattern: '^[0-9]{8}$'
        - $ref: '#/components/parameters/ParamQueryPageLimit'
        - $ref: '#/components/parameters/ParamQueryPageOffset'
      responses:
        '200':
          description: |
            OK, der Body enthält die Liste der zuletzten und weiteren Wagen Metadaten.
            Das Paging betrifft nur die "weiteren" Ergebnisse. Die "zuletzt" werden zusätzlich nur für offset=0 mitgeliefert.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WagenMetadatenResponse'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/wagenmetadaten/{wagennummer}:
    get:
      tags:
        - Stammdaten
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert alle Wagen Metadaten eines Wagens.
      parameters:
        - name: wagennummer
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9]{12}'
      responses:
        '200':
          description: OK, der Body enthält die Wagen Metadaten.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WagenMetadaten'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/wagentypen:
    get:
      tags:
        - Stammdaten
      operationId: getWagentypen
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert alle Wagentypen, die zu den übergebenen Parametern passen.
      parameters:
        - name: beginntMit
          in: query
          description: Die Bezeichnung beginnt mit dem übergebenen Substring.
          schema:
            type: string
      responses:
        '200':
          description: OK, der Body enthält die Liste der Wagentypen.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WagenTyp'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /stammdaten/zollverfahren:
    get:
      tags:
        - Stammdaten
      operationId: getZollverfahren
      description: |
        Benötigt eine der Rollen: jegliche Cargo Digital Rolle

        Liefert alle Zollverfahren
      parameters:
        - $ref: '#/components/parameters/ParamQuerySprache'
      responses:
        '200':
          description: OK, der Body enthält die Liste der Zollverfahren.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Zollverfahren'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /rcpdienstleister/auftraege:
    get:
      tags:
        - rcpdienstleisterAufträge
      operationId: getRcpdienstleisterAuftraege
      description: |
        Benötigt eine der Rollen: CargoDigital-RCP, CargoDigital-Support

        Gibt eine Liste von allen vorhandenen Aufträgen unabhängig von der Beteiligung am Auftrag für die berechtigten Versand- oder Empfangsstandorte zurück.
      parameters:
        - name: bahnhof
          in: query
          description: |
            Der gewünschte Empfangsbahnhof und/oder Versandbahnhof der Aufträge (uicLand und uicNummer).
          required: true
          schema:
            type: string
            pattern: '[0-9]{2}-[0-9]{6}'
            example: '85-070102'
        - name: ladestellennummer
          in: query
          description: |
            Damit eine Abfrage nach Ladestellennummer möglich ist, muss immer auch der Parameter Bahnhof passend dazu
            befüllt sein.
          required: false
          schema:
            type: string
            pattern: '[0-9]{2}'
            example: '01'
        - name: datumVon
          in: query
          description: |
            Datum des Auftrags im Zeitbereich von , kann maximal 5 Tage vor dem aktuellen Tag liegen.
            Wenn art=ankommende, der Parameter entspricht dem Empfangsdatum
            Wenn art=abgehende, der Parameter entspricht dem Abgangsdatum
            Wenn art=alle, der Parameter entspricht dem Abgangsdatum für den abgehenden Verkehr und dem Empfangsdatum für den ankommenden Verkehr
          required: true
          schema:
            type: string
            pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            format: date
            example: '2022-08-29'
        - name: datumBis
          in: query
          description: |
            Datum des Auftrags im Zeitbereich bis, kann maximal 5 Tage nach dem aktuellen Tag liegen.
            Wenn art=ankommende, der Parameter entspricht dem Empfangsdatum
            Wenn art=abgehende, der Parameter entspricht dem Abgangsdatum
            Wenn art=alle, der Parameter entspricht dem Abgangsdatum für den abgehenden Verkehr und dem Empfangsdatum für den ankommenden Verkehr
          required: true
          schema:
            type: string
            pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
            format: date
            example: '2022-08-29'
        - name: art
          in: query
          description: Gibt an welche Art von Aufträgen abgerufen werden wollen (ankommende, abgehende oder alle Aufträge) für den angefragten Ort.
          required: true
          schema:
            type: string
            enum:
              - ankommende
              - abgehende
              - alle
        - name: status
          in: query
          description: Filter die Aufträge nach Status.
            Wenn der Filter nicht gesetzt ist, werden alle Status (inkl. geloescht) geliefert.
            Wenn mindestens ein Status vorhanden ist, dann werden nur die Aufträge mit den gewünschten Status zurückgegeben.
          style: form
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AuftragStatus'
      responses:
        200:
          description: Es wurden 0 bis n Aufträge für den angemeldeten User gefunden
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auftrag'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /zustellvorgaenge/{id}':
    get:
      tags:
        - Storage
      description: |
        Benötigt eine der Rollen: CargoDigital-Storage, CargoDigital-Cockpit, CargoDigital-Support

        Liefert den Zustellvorgang mit der gegebenen ID inklusive ZustellvorgangDetails.
      parameters:
        - name: id
          in: path
          description: |
            Die technische ID des Zustellvorgangs. Sie ist zusammengesetzt aus einem Timestamp, der den Beginnn des Zustellvorgangs
            beschreibt, und dem entsprechenden Ereignis (Zustellung oder kommerzielle Abstellung).
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK, der Body enthält den Zustellvorgang mit der gegebenen ID mit befüllten ZustellvorgangDetails.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Zustellvorgang'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /wagenstandgeld:
    get:
      tags:
        - Storage
      description: |
        Benötigt eine der Rollen: CargoDigital-Storage, CargoDigital-Cockpit, CargoDigital-Support

        Liefert eine Übersicht über das für einen bestimmten Partner und Monat angefallene Wagenstandgeld.

        Optional kann ein Bahnhof übergeben werden - dann werden nur die Kosten für diesen Bahnhof zurückgegeben, andernfalls wird eine Übersicht
        über alle Bahnhöfe zurückgegeben.
      parameters:
        - name: jahrMonat
          in: query
          description: Jahr und Monat des Betrachtungszeitraums, getrennt durch Bindestrich.
          required: true
          schema:
            $ref: '#/components/schemas/JahrMonat'
        - name: bahnhof
          in: query
          description: |
            Der UIC-Code des Bahnhofs, für den Zustellvorgänge abgefragt werden sollen. Falls dieser Parameter nicht vorhanden ist, werden
            die Zustellvorgänge aller Bahnhöfe zurückgegeben.
          schema:
            type: string
            pattern: '[\d]{2}-[\d]{6}'
            example: '85-080887'
        - name: details
          in: query
          description: Legt fest, ob bei den zurückgegebenen Zustellvorgängen das Objekt ZustellvorgangDetails schon befüllt sein soll.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK, der Body enthält die Liste der Zustellvorgänge für eine Abrechnung.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wagenstandgeld'
        '410':
          description: Das Datum (`jahrMonat`) liegt mehr als 12 Monate in der Vergangenheit.
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /webhooks:
    get:
      tags:
        - Webhooks
      description: |
        Benötigt eine der Rollen: CargoDigital-Webhooks, CargoDigital-Support

        Liefert die Liste aller Webhooks, in der aktuellen Version, die vom aktuellen User angelegt wurden.
      operationId: getWebhooks
      responses:
        200:
          description: Alle Webhooks, die vom aktuellen User angelegt wurden.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /webhooks/upgradeVersion:
    put:
      tags:
        - Webhooks
      description: |
        Benötigt eine der Rollen: CargoDigital-Webhooks

        Diese Methode dient als Convenience-Methode und aktualisiert alle Webhooks Konfigurationen des angemeldeten Users auf die aktuelle Version.
      operationId: upgradeWebhooksVersion
      responses:
        200:
          description: Alle Webhooks, die aktualisiert wurden.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /webhooks/{webhookid}:
    delete:
      tags:
        - Webhooks
      description: |
        Benötigt eine der Rollen: CargoDigital-Webhooks

        Löscht den Webhook mit dieser ID.
      operationId: deleteWebhook
      parameters:
        - name: webhookid
          in: path
          required: true
          description: Die ID des Webhooks, der gelöscht werden soll.
          schema:
            type: string
      responses:
        204:
          description: Der Webhook wurde gelöscht.
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /webhooks/bestellungen:
    post:
      tags:
        - Webhooks
      operationId: createBestellungWebhook
      description: |
        Benötigt eine der Rollen: CargoDigital-Webhooks

        Erstellt einen Webhook, in der aktuellen Version, an den Änderungen bei der Bestellung geschickt werden.

        Nur der Auftraggeber der Bestellung wird über Bestellung Callbacks informiert. Für die anderen Beteiligte (z.B. Empfänger), sollte der Auftrag Webhook verwendet werden.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        200:
          description: Der Webhook wurde erstellt und wird im Body zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
      callbacks:
        bestellungGeaendert:
          '{$request.body#/callbackUrl}':
            post:
              parameters:
                - name: aenderungTypen
                  in: query
                  description: Gibt an, was sich an der Bestellung geändert hat.
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/BestellungCallbackTyp'
                - name: X-Cargo-Signature
                  description: |
                    Dieser Header ist nur dann vorhanden, wenn beim Erstellen des Webhooks das Attribut signaturSchluessel mitgegeben wurde. In diesem
                    Fall ist der Wert dieses Headers ein HMAC SHA-1 Hash, der aus dem Request Body mit diesem Schlüssel berechnet wird.
                  in: header
                  schema:
                    type: string
              requestBody:
                description: Die Bestellung mit den aktuellen Daten.
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Bestellung'
              responses:
                200:
                  description: Der Callback wurde erfolgreich verarbeitet.
                default:
                  description: |
                    Im Fall eines Fehlers wird ein HTTP 4xx oder 5xx zurückgegeben. 4xx bedeutet, dass der Callback wegen unerwarteter Daten nicht
                    verarbeitet werden kann. 5xx bedeutet, dass ein interner Fehler beim Empfänger des Callbacks aufgetreten ist. Bei einem 5xx
                    wird der Callback innerhalb der nächsten Stunden in exponentiell wachsenden Zeitabständen erneut versandt.
  /webhooks/bestellungen/{webhookid}:
    put:
      tags:
        - Webhooks
      description: |
        Benötigt eine der Rollen: CargoDigital-Webhooks

        Aktualisiert einen Webhook, in der aktuellen Version, an den Änderungen bei der Bestellung geschickt werden.

        Nur der Auftraggeber der Bestellung wird über Bestellung Callbacks informiert. Für die anderen Beteiligte (z.B. Empfänger), sollte der Auftrag Webhook verwendet werden.
      operationId: updateBestellungWebhook
      parameters:
        - name: webhookid
          in: path
          required: true
          description: Die ID des Bestellung-Webhooks, der aktualisiert werden soll.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        200:
          description: Der Webhook wurde aktualisiert und wird im Body zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
      callbacks:
        bestellungGeaendert:
          '{$request.body#/callbackUrl}':
            post:
              parameters:
                - name: aenderungTypen
                  in: query
                  description: Gibt an, was sich an der Bestellung geändert hat.
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/BestellungCallbackTyp'
                - name: X-Cargo-Signature
                  description: |
                    Dieser Header ist nur dann vorhanden, wenn beim Erstellen des Webhooks das Attribut signaturSchluessel mitgegeben wurde. In diesem
                    Fall ist der Wert dieses Headers ein HMAC SHA-1 Hash, der aus dem Request Body mit diesem Schlüssel berechnet wird.
                  in: header
                  schema:
                    type: string
              requestBody:
                description: Die Bestellung mit den aktuellen Daten.
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Bestellung'
              responses:
                200:
                  description: Der Callback wurde erfolgreich verarbeitet.
                default:
                  description: |
                    Im Fall eines Fehlers wird ein HTTP 4xx oder 5xx zurückgegeben. 4xx bedeutet, dass der Callback wegen unerwarteter Daten nicht
                    verarbeitet werden kann. 5xx bedeutet, dass ein interner Fehler beim Empfänger des Callbacks aufgetreten ist. Bei einem 5xx
                    wird der Callback innerhalb der nächsten Stunden in exponentiell wachsenden Zeitabständen erneut versandt.
  /webhooks/auftraege:
    post:
      tags:
        - Webhooks
      operationId: createAuftragWebhook
      description: |
        Benötigt eine der Rollen: CargoDigital-Webhooks

        Erstellt einen Webhook, in der aktuellen Version, an den Änderungen bei Aufträgen geschickt werden.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        200:
          description: Der Webhook wurde erstellt und wird im Body zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
      callbacks:
        auftragGeaendert:
          '{$request.body#/callbackUrl}':
            post:
              parameters:
                - name: aenderungTypen
                  in: query
                  description: Gibt an, was sich an dem Auftrag geändert hat.
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuftragCallbackTyp'
                - name: X-Cargo-Signature
                  description: |
                    Dieser Header ist nur dann vorhanden, wenn beim Erstellen des Webhooks das Attribut signaturSchluessel mitgegeben wurde. In diesem
                    Fall ist der Wert dieses Headers ein HMAC SHA-1 Hash, der aus dem Request Body mit diesem Schlüssel berechnet wird.
                  in: header
                  schema:
                    type: string
              requestBody:
                description: Der Auftrag mit den aktuellen Daten.
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Auftrag'
              responses:
                200:
                  description: Der Callback wurde erfolgreich verarbeitet.
                default:
                  description: |
                    Im Fall eines Fehlers wird ein HTTP 4xx oder 5xx zurückgegeben. 4xx bedeutet, dass der Callback wegen unerwarteter Daten nicht
                    verarbeitet werden kann. 5xx bedeutet, dass ein interner Fehler beim Empfänger des Callbacks aufgetreten ist. Bei einem 5xx
                    wird der Callback innerhalb der nächsten Stunden in exponentiell wachsenden Zeitabständen erneut versandt.
  /webhooks/auftraege/{webhookid}:
    put:
      tags:
        - Webhooks
      description: |
        Benötigt eine der Rollen: CargoDigital-Webhooks

        Aktualisiert einen Webhook, in der aktuellen Version, an den Änderungen bei Aufträgen geschickt werden.
      operationId: updateAuftragWebhook
      parameters:
        - name: webhookid
          in: path
          required: true
          description: Die ID des Auftrags-Webhooks, der aktualisiert werden soll.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        200:
          description: Der Webhook wurde aktualisiert und wird im Body zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
      callbacks:
        auftragGeaendert:
          '{$request.body#/callbackUrl}':
            post:
              parameters:
                - name: aenderungTypen
                  in: query
                  description: Gibt an, was sich an dem Auftrag geändert hat.
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuftragCallbackTyp'
                - name: X-Cargo-Signature
                  description: |
                    Dieser Header ist nur dann vorhanden, wenn beim Erstellen des Webhooks das Attribut signaturSchluessel mitgegeben wurde. In diesem
                    Fall ist der Wert dieses Headers ein HMAC SHA-1 Hash, der aus dem Request Body mit diesem Schlüssel berechnet wird.
                  in: header
                  schema:
                    type: string
              requestBody:
                description: Der Auftrag mit den aktuellen Daten.
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Auftrag'
              responses:
                200:
                  description: Der Callback wurde erfolgreich verarbeitet.
                default:
                  description: |
                    Im Fall eines Fehlers wird ein HTTP 4xx oder 5xx zurückgegeben. 4xx bedeutet, dass der Callback wegen unerwarteter Daten nicht
                    verarbeitet werden kann. 5xx bedeutet, dass ein interner Fehler beim Empfänger des Callbacks aufgetreten ist. Bei einem 5xx
                    wird der Callback innerhalb der nächsten Stunden in exponentiell wachsenden Zeitabständen erneut versandt.
  /webhooks/sendungen:
    post:
      tags:
        - Webhooks
      operationId: createSendungWebhook
      description: |
        Benötigt eine der Rollen: CargoDigital-Webhooks

        Erstellt einen Webhook, in der aktuellen Version, an den Sendungen geschickt werden. Der Webhook wird für jede Änderung am Status, an ETA oder an der Transportkette der Sendung aufgerufen.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        200:
          description: Der Webhook wurde erstellt und wird im Body zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
      callbacks:
        sendungGeaendert:
          '{$request.body#/callbackUrl}':
            post:
              parameters:
                - name: aenderungTypen
                  in: query
                  description: Gibt an, was sich an der Sendung geändert hat.
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/SendungCallbackTyp'
                - name: X-Cargo-Signature
                  description: |
                    Dieser Header ist nur dann vorhanden, wenn beim Erstellen des Webhooks das Attribut signaturSchluessel mitgegeben wurde. In diesem
                    Fall ist der Wert dieses Headers ein HMAC SHA-1 Hash, der aus dem Request Body mit diesem Schlüssel berechnet wird.
                  in: header
                  schema:
                    type: string
              requestBody:
                description: Die Sendung mit den aktuellen Daten.
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Sendung'
              responses:
                200:
                  description: Der Callback wurde erfolgreich verarbeitet.
                default:
                  description: |
                    Im Fall eines Fehlers wird ein HTTP 4xx oder 5xx zurückgegeben. 4xx bedeutet, dass der Callback wegen unerwarteter Daten nicht
                    verarbeitet werden kann. 5xx bedeutet, dass ein interner Fehler beim Empfänger des Callbacks aufgetreten ist. Bei einem 5xx
                    wird der Callback innerhalb der nächsten Stunden in exponentiell wachsenden Zeitabständen erneut versandt.
  /webhooks/sendungen/{webhookid}:
    put:
      tags:
        - Webhooks
      description: |
        Benötigt eine der Rollen: CargoDigital-Webhooks

        Aktualisiert einen Webhook, in der aktuellen Version, an den Sendungen geschickt werden. Der Webhook wird für jede Änderung am Status der Sendung oder der ETA aufgerufen.
      operationId: updateSendungWebhook
      parameters:
        - name: webhookid
          in: path
          required: true
          description: Die ID des Sendungs-Webhooks, der aktualisiert werden soll.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        200:
          description: Der Webhook wurde aktualisiert und wird im Body zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
      callbacks:
        sendungGeaendert:
          '{$request.body#/callbackUrl}':
            post:
              parameters:
                - name: aenderungTypen
                  in: query
                  description: Gibt an, was sich an der Sendung geändert hat.
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/SendungCallbackTyp'
                - name: X-Cargo-Signature
                  description: |
                    Dieser Header ist nur dann vorhanden, wenn beim Erstellen des Webhooks das Attribut signaturSchluessel mitgegeben wurde. In diesem
                    Fall ist der Wert dieses Headers ein HMAC SHA-1 Hash, der aus dem Request Body mit diesem Schlüssel berechnet wird.
                  in: header
                  schema:
                    type: string
              requestBody:
                description: Die Sendung mit den aktuellen Daten.
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Sendung'
              responses:
                200:
                  description: Der Callback wurde erfolgreich verarbeitet.
                default:
                  description: |
                    Im Fall eines Fehlers wird ein HTTP 4xx oder 5xx zurückgegeben. 4xx bedeutet, dass der Callback wegen unerwarteter Daten nicht
                    verarbeitet werden kann. 5xx bedeutet, dass ein interner Fehler beim Empfänger des Callbacks aufgetreten ist. Bei einem 5xx
                    wird der Callback innerhalb der nächsten Stunden in exponentiell wachsenden Zeitabständen erneut versandt.
  /webhooks/sensor:
    post:
      tags:
        - Webhooks
      operationId: createSensorWebhook
      description: |
        Benötigt eine der Rollen: CargoDigital-Webhooks

        Erstellt einen Webhook, in der aktuellen Version, an den Sensoren Daten geschickt werden. Der Webhook wird durch ein Scheduler aufgerufen.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        200:
          description: Der Webhook wurde erstellt und wird im Body zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
      callbacks:
        sensorDaten:
          '{$request.body#/callbackUrl}':
            post:
              parameters:
                - name: sensorenTyp
                  in: query
                  description: Gibt an, um welchen Sensoretyp es sich handlet.
                  schema:
                    $ref: '#/components/schemas/SensorenTyp'
                - name: X-Cargo-Signature
                  description: |
                    Dieser Header ist nur dann vorhanden, wenn beim Erstellen des Webhooks das Attribut signaturSchluessel mitgegeben wurde. In diesem
                    Fall ist der Wert dieses Headers ein HMAC SHA-1 Hash, der aus dem Request Body mit diesem Schlüssel berechnet wird.
                  in: header
                  schema:
                    type: string
              requestBody:
                description: Die aktuellen Daten des Sensoren.
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Sensor'
              responses:
                200:
                  description: Der Callback wurde erfolgreich verarbeitet.
                default:
                  description: |
                    Im Fall eines Fehlers wird ein HTTP 4xx oder 5xx zurückgegeben. 4xx bedeutet, dass der Callback wegen unerwarteter Daten nicht
                    verarbeitet werden kann. 5xx bedeutet, dass ein interner Fehler beim Empfänger des Callbacks aufgetreten ist. Bei einem 5xx
                    wird der Callback innerhalb der nächsten Stunden in exponentiell wachsenden Zeitabständen erneut versandt.
  /webhooks/sensor/{webhookid}:
    put:
      tags:
        - Webhooks
      description: |
        Benötigt eine der Rollen: CargoDigital-Webhooks

        Aktualisiert einen Webhook, in der aktuellen Version, an den Sensordaten geschickt werden.
      operationId: updateSensorWebhook
      parameters:
        - name: webhookid
          in: path
          required: true
          description: Die ID des Sensor-Webhooks, der aktualisiert werden soll.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        200:
          description: Der Webhook wurde aktualisiert und wird im Body zurückgegeben.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
      callbacks:
        sensorDaten:
          '{$request.body#/callbackUrl}':
            post:
              parameters:
                - name: sensorenTyp
                  in: query
                  description: Gibt an, um welchen Sensoretyp es sich handlet.
                  schema:
                    $ref: '#/components/schemas/SensorenTyp'
                - name: X-Cargo-Signature
                  description: |
                    Dieser Header ist nur dann vorhanden, wenn beim Erstellen des Webhooks das Attribut signaturSchluessel mitgegeben wurde. In diesem
                    Fall ist der Wert dieses Headers ein HMAC SHA-1 Hash, der aus dem Request Body mit diesem Schlüssel berechnet wird.
                  in: header
                  schema:
                    type: string
              requestBody:
                description: Die aktuellen Daten des Sensoren.
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Sensor'
              responses:
                200:
                  description: Der Callback wurde erfolgreich verarbeitet.
                default:
                  description: |
                    Im Fall eines Fehlers wird ein HTTP 4xx oder 5xx zurückgegeben. 4xx bedeutet, dass der Callback wegen unerwarteter Daten nicht
                    verarbeitet werden kann. 5xx bedeutet, dass ein interner Fehler beim Empfänger des Callbacks aufgetreten ist. Bei einem 5xx
                    wird der Callback innerhalb der nächsten Stunden in exponentiell wachsenden Zeitabständen erneut versandt.
  /wagen/lokalisierungen:
    get:
      tags:
        - Wagenstatus
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Support

        Liefert eine Liste mit Wagenlokalisierungs-Daten für alle dem Berechtigten zugewiesenen Wagen.
        
        Ein Mieter, Halter oder Kunde mit fest zugewiesenen Wagen kann dazu berechtigt werden, die ihm zugewiesen Wagen zu lokalisieren.
        Diese Operation liefert für jeden Wagen die letzte bekannte Position und den Zustand.
      operationId: getWagenLokalisierungen
      parameters: []
      responses:
        '200':
          description: Die Liste mit Wagenlokalisierungs-Daten für alle dem Berechtigten zugewiesenen Wagen.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wagenlokalisierung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
  /wagen/lokalisierungen/{wagennummer}:
    get:    
      tags: 
        - Wagenstatus
      description: |
        Benötigt eine der Rollen: CargoDigital-API, CargoDigital-Support

        Liefert die Wagenlokalisierungs-Daten für einen bestimmten, dem Berechtigten zugewiesenen Wagen.
        
        Ein Mieter, Halter oder Kunde mit fest zugewiesenen Wagen kann dazu berechtigt werden, die ihm zugewiesen Wagen zu lokalisieren.
        Diese Operation liefert für jeden Wagen die letzte bekannte Position und den Zustand.
      operationId: getWagenLokalisierung
      parameters:
        - name: wagennummer
          in: path
          description: |
            Identifiziert den Wagen, dessen Lokalisierungs-Daten abgefragt werden sollen. 
          required: true
          schema:
            type: string
            pattern: '[0-9]{12}'
      responses:
        '200':
          description: Die Wagenlokalisierungs-Daten zum spezifizierten Wagen.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wagenlokalisierung'
        default:
          $ref: '#/components/responses/CargoErrorResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: cd_auth
      description: |
        Der Wert des Cookies ist der Logintoken (JWT) ohne "Bearer" Prefix.
        Dies wird nur für Dateidownloads verwendet.
  parameters:
    ParamQuerySprache:
      in: query
      name: sprache
      description: |
        Die Sprache, in welcher Antworten vom Server ausgegeben werden. Wenn keine Sprache gesetzt ist, wird Deutsch geliefert.
      schema:
        type: string
        enum:
          - de
          - fr
          - it
    ParamQueryPageOffset:
      in: query
      name: offset
      description: |
        Offset der Ergebnisse (in Elementen).
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    ParamQueryPageLimit:
      in: query
      name: limit
      description: |
        Anzahl der maximal zu liefernden Ergebnisse.
      required: false
      schema:
        type: integer
        format: int32
        default: 10
        minimum: 1
        maximum: 100
  responses:
    CargoErrorResponse:
      description: Ein Fehler wurde festgestellt.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CargoError'
  schemas:
    AbholbereiterWagen:
      description: |
        Beinhaltet alle Informationen, welche für die Abholbereit-Meldung eines Wagens übermittelt werden müssen.
        Beim  aktuellen Standort müssen UIC Land und UIC Bahnhof sowie die Nummer der Ladestelle geliefert werden.
      type: object
      required:
        - wagennummer
        - aktuellerStandort
        - beladen
        - zeitpunkt
      properties:
        wagennummer:
          type: string
          pattern: '[0-9]{12}'
        aktuellerStandort:
          $ref: "#/components/schemas/Ort"
        beladen:
          description: Der Ladezustand des Wagens der abholbereit gemeldet werden soll
          type: boolean
        zeitpunkt:
          description: Zeitpunkt zu welchem der Wagen abholbereit ist. Darf nicht in der Vergangenheit liegen.
          type: string
          format: date-time
          example: '2022-07-18T12:28:28.231Z'
    AbfahrtUnterwegsortSetzenRequest:
      description: |
        Ermöglicht den Kunden alle Informationen zu liefern, die für die Vervollständigung eines bereits begonnenen Auftrags nötig sind.
        Der Empfangsort und Empfänger können nur gesetzt werden, wenn diese noch nicht vorhanden sind (Vorabfuhr ohne Empfangsort und Empfänger).
      type: object
      required:
        - abgangszeit
      properties:
        abgangszeit:
          description: Die gewünschte Abgangszeit des Auftrags am Unterwegsbahnhof
          type: string
          format: 'date-time'
          example: '2022-08-02T09:15:00.000Z'
        empfangsort:
          $ref: "#/components/schemas/Ort"
        empfaenger:
          $ref: '#/components/schemas/Partner'
    Auftrag:
      description: |
        Ein Auftrag umfasst die Metadaten zu einer oder mehreren Auftragspostitionen die von SBB Cargo bereits in der Umsetzung sind. 
        Die Objekte `positionen`, `frachtbriefDaten` und `mrnNummern` werden nur dann geliefert, wenn ein spezifischer Auftrag mit `getAuftrag` abgefragt wird, 
        oder wenn `getAuftraege` mit dem Flag `detailliert=true` aufgerufen wird.
      type: object
      properties:
        nummer:
          description: die ID eines Auftrags in ORCA
          type: string
          # Read Only
        kontrolletikett:
          $ref: '#/components/schemas/Kontrolletikett'
          # Read Only
        frachtbriefDaten:
          $ref: '#/components/schemas/FrachtbriefDaten'
          # Dieses Objekt wird nur mit der Methode getAuftrag oder mit getAuftraege mit detailliert=true geliefert (z.B. getAuftraege mit detailliert=false liefert es nicht)
        datum:
          description: |
            Datum des Auftrages - das Feld wird automatisch vom System gerechnet:
              * Wenn noch keine Zeit definiert ist, wird das Feld auf das heutige Datum gesetzt
              * Wenn gewuenschte Abfahrtszeit gesetzt ist, wird das Feld auf dieses Datum gesetzt
          type: string
          format: date
          # Read Only
        status:
          $ref: '#/components/schemas/AuftragStatus'
          # Read Only
        kapazitaetsstatus:
          $ref: '#/components/schemas/Kapazitaetsstatus'
          # Read Only
        bestellungsnummer:
          description: die ID der dazugehörigen Bestellung
          type: string
        reservierungsnummer:
          description: die ID der dazugehörigen Reservierung
          type: string
        letzteUmbestellung:
          $ref: '#/components/schemas/UmbestellungsdatenAuftrag'
          # Read Only
        leerwagenbestellungen:
          description: Liste der Nummern aller dazugehörigen Leerwagenbestellungen inkl. der jeweiligen Wagentypen
          type: array
          items:
            $ref: '#/components/schemas/LeerwagenbestellungReferenz'
          # Read Only
        versandort:
          $ref: '#/components/schemas/Ort'
        betrieblicherVersandort:
          $ref: '#/components/schemas/Ort'
          # Der betriebliche Versandort muss nur erfasst werden, wenn sich dieser vom (kommerziellen) Versandort unterscheidet
        empfangsort:
          $ref: '#/components/schemas/Ort'
        betrieblicherEmpfangsort:
          $ref: '#/components/schemas/Ort'
          # Der betriebliche Empfangsort muss nur erfasst werden, wenn sich dieser vom (kommerziellen) Empfangsort unterscheidet
        unterwegsort:
          $ref: '#/components/schemas/Ort'
          # Read Only
        versandzeit:
          $ref: '#/components/schemas/ZeitPlanung'
        empfangszeit:
          $ref: '#/components/schemas/ZeitPlanung'
        arbeitsrichtungVersand:
          type: string
          description: Text zur Arbeitsrichtung am Versandbahnhof
          maxLength: 30
        arbeitsrichtungEmpfang:
          type: string
          description: Text zur Arbeitsrichtung am Empfangsbahnhof
          maxLength: 30
        international:
          type: boolean
        vertragsvariante:
          $ref: '#/components/schemas/Vertragsvariante'
        kundenabkommen:
          type: string
          description: Kundenabkommen des Vertrages auf dem der Auftrag basiert
        auftraggeber:
          $ref: '#/components/schemas/Partner'
        absender:
          $ref: '#/components/schemas/Partner'
        empfaenger:
          $ref: '#/components/schemas/Partner'
        frachtzahlerVersand:
          $ref: '#/components/schemas/Partner'
        frachtzahlerEmpfang:
          $ref: '#/components/schemas/Partner'
        erfasser:
          type: array
          items:
            $ref: '#/components/schemas/Partner'
        endkunde:
          $ref: '#/components/schemas/Partner'
        beobachter:
          type: array
          items:
            $ref: '#/components/schemas/Partner'
        referenzAbsender:
          type: string
          description: Referenzierung des Auftrages beim Absender
          maxLength: 35
        vermerkEmpfaenger:
          type: string
          description: Vermerk für den Empfänger. Bearbeitung via Frachtbrief-Element
          # Read Only
        mrnNummern:
          type: array
          description: |
            Liste der MrnNummer des Auftrags. Wenn die MrnNummern auf Ebene Auftrag erfasst werden, dürfen keine MrnNummern auf Ebene Auftragsposition, Ladeeinheit oder LadungGutart erfasst werden.
            Dieses Objekt wird nur mit der Methode `getAuftrag` oder mit `getAuftraege` mit `detailliert=true` geliefert (z.B. `getAuftraege` mit `detailliert=false` liefert es nicht)
          items:
            $ref: '#/components/schemas/MrnNummer'
        referenzKundensystem:
          type: string
          description: Referenz des Auftrages im Kundensystem. Kann zum Beispiel für die Beförderungsauftragsnummer gemäss Kunde verwendet verwenden.
          maxLength: 50
        zugnummerVersand:
          description: Die Zugnummer des Versandzuges des Auftrags. Kann bei Ganzzugsverkehren als Referenz durch den Kunden mitgegeben werden.
          type: string
          pattern: '[0-9]{5,6}'
        zubringerZug:
          $ref: '#/components/schemas/ZugZubringer'
        nachfolgerZug:
          $ref: '#/components/schemas/ZugNachfolger'
        stornobegruendung:
          $ref: '#/components/schemas/Stornobegruendung'
          # Read Only
        durchfuehrbar:
          description: Zeigt an, ob der Auftrag in seiner aktuellen Form aus Sicht der SBB durchführbar ist
          type: boolean
          # Read Only
        erfassungAbgeschlossen:
          description: |
            Ermöglicht der Kunde zu melden, dass die Erfassung des Auftrags aus seiner Sicht abgeschlossen ist.
            Dieses Merkmal kann mittels der completeErfassungAuftrag Methode geändert werden
          type: boolean
          # Read Only
        bemerkung:
          description: |
            Dieses Bemerkungsfeld ist eine reine Betriebsinformation und wird nicht als Geschäftsbedingung betrachtet.
          type: string
          maxLength: 4000
        anzahlWagen:
          type: integer
          format: int32
        anzahlWagenOhneAktuelleVersandzeit:
          description: |
            Anzahl Wagen mit unbekannter Versandzeit.
            Dieses Feld wird nur in den Status `bestaetigt`, `inKapaPruefung` und `begonnen` geliefert.
          type: integer
          format: int32
          # Read Only
        anzahlWagenOhneAktuelleEmpfangszeit:
          description: |
            Anzahl Wagen mit unbekannter Empfangszeit. 
            Dieses Feld wird nur in den Status `bestaetigt`, `inKapaPruefung` und `begonnen` geliefert.
          type: integer
          format: int32
          # Read Only
        wagennummern:
          description: Liste aller bekannten Wagennummern aller Auftragspostionen. Wenn die Wagennummern noch nicht angegeben wurden, stimmt der anzahlWagen nicht mit der Länge der wagennummern Liste überein.
          type: array
          items:
            type: string
          # Read Only
        istWlv:
          type: boolean
          description: Ob es sich um einen WLV-Auftrag (Wagenladungsverkehr) handelt.
          # Read Only
        produkt:
          $ref: '#/components/schemas/VertraglichesProdukt'
          # Read Only
        positionen:
          description: |
            Liste aller Positionen des Auftrages. 
            Diese Liste wird nur mit der Methode `getAuftrag` oder mit `getAuftraege` mit `detailliert=true` geliefert (z.B. `getAuftraege` mit `detailliert=false` liefert es nicht)
          type: array
          items:
            $ref: '#/components/schemas/Auftragsposition'
        kapazitaetBestaetigt:
          $ref: '#/components/schemas/KapazitaetBestaetigt'
        zusatzleistungen:
          description: Liste aller Zusatzleistungen des Auftrages. Diese Liste wird nur mit der Methode getAuftrag geliefert (z.B. getAuftraege liefert die nicht).
          type: array
          items:
            $ref: '#/components/schemas/Zusatzleistung'
    AuftragPositionStatus:
      description: |
        Status der Auftragsposition
      type: string
      enum:
        - neu
        - geplant
        - begonnen
        - erledigt
        - abgebrochen
        - storniert
    Auftragsposition:
      description: |
        Eine Auftragsposition enthält die spezifischen Details eines Auftrags der umgesetzt wird, zum Beispiel der Wagen 1234 mit Zug 5678 um 13:37 Uhr von Ladestelle L zu Bahnhof B mit Ware W und einem Gewicht von 33t und den Warenarten P,O und I.
        Es können entweder Ladeeinheiten oder Gutarten in der Auftragsposition enthalten sein, jedoch nicht beides.
      type: object
      properties:
        # Read Only
        laufnummer:
          description: Laufende Nummer der Position. Die Laufnummer wird für neue Positionen automatisch generiert und ist anschliessend unveränderlich. D.h. die Laufnummer ist bei Neuanlage optional, aber beim Update required.
          type: integer
          format: int32
        status:
          $ref: '#/components/schemas/AuftragPositionStatus'
        wagennummer:
          type: string
          pattern: '[0-9]{12}'
        wagentyp:
          type: string
          description: Typ des Wagens
          maxLength: 10
        beladen:
          type: boolean
          # Read Only
        nhmCodeLadezustand:
          description: NHM-Codierung des Ladezustandes des Wagens
          type: string
        gewichtNetto:
          description: Gewicht der gesamten Ladung auf dem Wagen in kg. Wird nur überschrieben falls gesetzt (kein löschen durch weglassen des Attributs). Falls mehrere Gewichte gesetzt sind (Netto/Brutto/Tara) müssen diese zusammen passen.
          type: integer
          format: int32
          # Read Only
        gewichtBrutto:
          description: Bruttogewicht des gesamten Wagens in kg. Wird nur überschrieben falls gesetzt (kein löschen durch weglassen des Attributs). Falls mehrere Gewichte gesetzt sind (Netto/Brutto/Tara) müssen diese zusammen passen.
          type: integer
          format: int32
          # Read Only
        gewichtTara:
          description: Taragewicht des Wagens in kg. Wird nur überschrieben falls gesetzt (kein löschen durch weglassen des Attributs). Falls mehrere Gewichte gesetzt sind (Netto/Brutto/Tara) müssen diese zusammen passen.
          type: integer
          format: int32
          # Read Only
        gutarten:
          description: Alle Gutarten, die auf diesem Wagen transportiert werden. Darf bei Transport von Ladeeinheiten nicht verwendet werden.
          type: array
          items:
            $ref: '#/components/schemas/LadungGutart'
        ladeeinheiten:
          description: Alle Ladeeinheiten, die auf diesem Wagen transportiert werden.
          type: array
          items:
            $ref: '#/components/schemas/Ladeeinheit'
        transportplan:
          description: |
            Der Tansportplan der Auftragsposition. Ein Transportplan setzt sich aus allen geplanten Zugfahrten der Auftragsposition zusammen.
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/Transportplanabschnitt'
        kundenbezeichnung:
          type: string
          description: Wagenbezeichnung gemäss Kunde
          maxLength: 40
        asNummer:
          description: |
            Liste der Bewilligungsnummern (AS Nummern) bei Aussergewöhnlichen Sendungen.
            Achtung, es ist nicht möglich, denselben EIU Code zweimal einzutragen.
          type: array
          items:
            $ref: '#/components/schemas/AsNummer'
        mrnNummern:
          type: array
          description: Liste der MrnNummer der Auftragsposition (Wagen). Wenn die MrnNummern auf Ebene Auftragsposition erfasst werden, dürfen keine MrnNummern auf Ebene Ladeeinheit oder LadungGutart dieser Auftragsposition erfasst werden.
          items:
            $ref: '#/components/schemas/MrnNummer'
        plomben:
          type: array
          items:
            $ref: '#/components/schemas/Plombierung'
          maxItems: 10
        befoerderungsbeschraenkungen:
          type: array
          description: Liste der Codes für ladungsbedingte Beförderungsbeschränkungen
          items:
            type: string
        vMax:
          type: integer
          minimum: 1
          maximum: 999
          format: int32
          description: Maximale Geschwindigkeit in km/h
        versandzeit:
          $ref: '#/components/schemas/ZeitPlanung'
        empfangszeit:
          $ref: '#/components/schemas/ZeitPlanung'
        meldepunkte:
          type: array
          description: |
            Die Liste der Meldepunkte. Sie zeigt auf, wann dieser Wagen die Meldepunkte passieren wird oder bereits passiert hat.

            Hinweis: Auftrags-spezifische Meldepunkte können derzeit nicht über die API definiert werden.
          items:
            $ref: '#/components/schemas/Meldepunkt'
          readOnly: true
          # Read Only          
    AsNummer:
      type: object
      properties:
        eiuCode:
          description: EIU-Code
          type: string
          pattern: '[0-9]{4}'
        asNummer:
          type: string
          minLength: 1
          maxLength: 20
          description: AS-Nummer
    AuftragStatus:
      description: |
        Der aktuelle Zustand des Auftrags bei SBB Cargo:
        * Neu: Der Auftrag ist angelegt, wird aber nicht weiter bearbeitet. Der Kunde kann die Bestellung jederzeit abändern, ergänzen oder vervollständigen.
        * Gelöscht: Der Auftrag wurde gelöscht.
        * In Prüfung: Der Auftrag ist zureit bei SBB Cargo in Prüfung.
        * Abgelehnt: Der Auftrag wurde durch SBB Cargo abgelehnt.
        * Bestätigt: Der Auftrag ist geplant und wird bei SBB Cargo zu dem definierten Zeitpunkt durchgeführt.
        * In Kapa Prüfung: Der Auftrag ist geplant und bestätigt, aber der Kunde hat eine Erweiterung der vorher bestätigten Kapazität angefragt und die Machbarkeit wird bei SBB Cargo geprüft.
        * Storniert: Der Auftrag wurde durch den Kunden oder SBB Cargo storniert.
        * Begonnen: Die Durchführung des Auftrags hat begonnen, der Kunde darf keine Änderung mehr ausführen.
        * Erledigt: Der Auftrag ist aus SBB Cargo Sicht erledigt.
        * Abgebrochen: Der Auftrag wird nicht weiter fortgeführt und hatte schon den Status "begonnen" erreicht.
      type: string
      enum:
        - neu
        - geloescht
        - inpruefung
        - abgelehnt
        - bestaetigt
        - inKapaPruefung
        - storniert
        - begonnen
        - erledigt
        - abgebrochen
    Bedienzeitfenster:
      description: |
        Beinhaltet alle relevanten Informationen zu einem Bedienzeitfenster (BZF)
      type: object
      properties:
        gueltigVon:
          description: Beginn der Gültigkeit des BZF
          type: string
          format: date
          # Read Only
        gueltigBis:
          description: Ende der Gültigkeit des BZF
          type: string
          format: date
          # Read Only
        beginn:
          description: Beginn des BZF
          type: string
          pattern: 'HH:mm'
          # Read Only
        ende:
          description: Ende des BZF
          type: string
          pattern: 'HH:mm'
          # Read Only
        endeAmFolgetag:
          description: Zeigt an, ob ein BZF über Mitternacht hinweg dauert
          type: boolean
          # Read Only
        montag:
          type: boolean
          # Read Only
        dienstag:
          type: boolean
          # Read Only
        mittwoch:
          type: boolean
          # Read Only
        donnerstag:
          type: boolean
          # Read Only
        freitag:
          type: boolean
          # Read Only
        samstag:
          type: boolean
          # Read Only
        sonntag:
          type: boolean
          # Read Only
        befoerderungsart:
          $ref: '#/components/schemas/Befoerderungsart'
          # Deprecated
          # Read Only
        wlvCR:
          type: boolean
        wlvExpress:
          type: boolean
        kvTrain:
          type: boolean
        zustellungsart:
          description: |
            Definiert, ob dieses Bedienzeitfenster für Zustellung, Abholung  oder Kombiniert (Zustellung und Abholung) verwendet werden kann
            * Zustellung: dieses BZF ist nur für die Zustellung von eintreffenden Wagen durch SBB Cargo gültig
            * Abholung: dieses BZF ist nur für die Abholung von versandbereiten Wagen durch SBB Cargo gültig
            * Kombiniert: dieses BZF ist sowohl für Zustellung als auch Abholung gültig
          type: string
          # Read Only
        ort:
          $ref: '#/components/schemas/Ort'
          # Read Only
    Bedienzeit:
      description: |
        Beinhaltet alle relevanten Informationen zu einer Bedienzeit
      type: object
      required:
        - beginn
        - ende
        - montag
        - dienstag
        - mittwoch
        - donnerstag
        - freitag
        - samstag
        - sonntag
        - produkte
        - zustellungsart
        - ort
      properties:
        gueltigVon:
          description: |
            Beginn der Gültigkeit der Bedienzeit. Mit gueltigVon und gueltigBis, werden zum Beispiel Feiertage ausgeschlossen.
          type: string
          format: 'date-time'
          # Read Only
        gueltigBis:
          description: |
            Ende der Gültigkeit der Bedienzeit. Mit gueltigVon und gueltigBis, werden zum Beispiel Feiertage ausgeschlossen.
          type: string
          format: 'date-time'
          # Read Only
        beginn:
          description: 'Beginn der Bedienzeit (Zeitzone: Europe/Bern)'
          type: string
          pattern: '\d\d:\d\d'
          # Read Only
        ende:
          description: 'Ende der Bedienzeit (Zeitzone: Europe/Bern)'
          type: string
          pattern: '\d\d:\d\d'
          # Read Only
        endeAmFolgetag:
          description: 'Zeigt an, ob eine Bedienzeit über Mitternacht (Zeitzone: Europe/Bern) hinweg dauert'
          type: boolean
          # Read Only
        montag:
          type: boolean
          # Read Only
        dienstag:
          type: boolean
          # Read Only
        mittwoch:
          type: boolean
          # Read Only
        donnerstag:
          type: boolean
          # Read Only
        freitag:
          type: boolean
          # Read Only
        samstag:
          type: boolean
          # Read Only
        sonntag:
          type: boolean
          # Read Only
        produkte:
          description: |
            Die zur Bedienzeit passenden Produkte.
            Eine leere Liste bedeutet, dass die Bedienzeit für alle Produkte passt.
          type: array
          items:
            $ref: '#/components/schemas/VertraglichesProdukt'
          # Read Only
        zustellungsart:
          description: |
            Definiert, ob diese Bedienzeit für Zustellung, Abholung oder Kombiniert (Zustellung und Abholung) verwendet werden kann
            * zustellung: diese Bedienzeit ist nur für die Zustellung von eintreffenden Wagen durch SBB Cargo gültig
            * abholung: diese Bedienzeit ist nur für die Abholung von versandbereiten Wagen durch SBB Cargo gültig
            * kombiniert: diese Bedienzeit ist sowohl für Zustellung als auch Abholung gültig
          type: string
          enum:
            - zustellung
            - abholung
            - kombiniert
          # Read Only
        ort:
          $ref: '#/components/schemas/Ort'
          # Read Only
    Befoerderungsart:
      description: |
        Mit welcher Beförderungsart ist der Transport der Sendung
        organisiert?

        * wlvCR - Wagenladungsverkehre, Cargo Rail
        * wlvExpress - Wagenladungsverkehre, Cargo Rail Express Netz
        * spezial - Eigens organisierte Transporte z.B. für Baumaschinen oder andere Waren mit speziellen Anforderungen
        * partnerZug - von SBB Cargo AG transportierte Züge für andere Bahnen
        * ganzZug - Ganzzugsverkehr, Cargo Train Netz
        * kvTrain - Kombinierter Verkehr im KV Liniennetz (Achtung - es gibt auch KV im Wagenladungsverkehrsnetz)
        * postPaket - Ganzugsverkehre für die Paketpost Netze
        * postBrief - Ganzugsverkehre für die Briefpost Netze
        * zucker - Wagenladungsverkehr ohne Bedienzeitfenster, die im Zuckerfabrik Netz transportiert werden
      type: string
      enum:
        - wlvCR
        - wlvExpress
        - spezial
        - partnerZug
        - ganzZug
        - kvTrain
        - postPaket
        - postBrief
        - zucker
      example: wlvCR
    Befoerderungsbeschraenkung:
      type: object
      required:
        - code
        - typ
      properties:
        code:
          type: string
        typ:
          $ref: '#/components/schemas/BefoerderungsbeschraenkungTyp'
        bezeichnung:
          type: string
    BefoerderungsbeschraenkungTyp:
      type: string
      description: Hinweis - derzeit wird nur Ladung unterstützt
      enum:
        - Ladung
        - Bauart
        - Schaden
    Behaelter:
      properties:
        laufnummer:
          description: Die Position des Behälters innerhalb der Sendung.
          type: integer
          format: int32
        nummer:
          description: Die Behälteridentifikation
          type: string
          pattern: '[a-zA-Z]{3}\s?[a-zA-Z]{1}\s?\d{6}\s?\d{1}'
        tara:
          description: Das Leergewicht des Behälters in kg
          type: integer
          format: int32
          pattern: "[0-9]+"
      example:
        laufnummer: 4
        nummer: HGBD4567892
        gewicht: 1500
      type: object
    BerechnungsgrundlageParameter:
      description: Ein Parameter für die Kostenberechnung bei Cargo Storage.
      type: object
      required:
        - name
        - kostenProStunde
        - gueltigVon
        - gueltigBis
      properties:
        name:
          type: string
          enum:
            - WagenNormaltarif
            - WagenHochtarif
            - WagenLangsteher
            - WagenHochtarifLangsteher
            - Gleis
          # Read Only
        gueltigVon:
          description: Ab wann dieser Parameter gilt.
          type: string
          format: date
          # Read Only
        gueltigBis:
          description: Bis wann dieser Parameter gilt.
          type: string
          format: date
          # Read Only
        kostenProStunde:
          description: Die tatsächlichen Kosten in CHF (nach Berücksichtigung eines allfälligen Rabatts).
          type: number
          format: double
          # Read Only
        kostenProStundeOhneRabatt:
          description: Die Kosten in CHF pro Stunde ohne Berücksichtigung eines allfälligen Rabatts.
          type: number
          format: double
          # Read Only
        faktorRabatt:
          description: Ein Faktor, der den Rabatt für Wagen oder Gleis beschreibt, der dem Kunden gewährt wird. Zum Beispiel bedeutet ein Faktor von 0.8, dass der Kunde nur das 0.8-fache des normalen Preises des Wagens oder Gleises bezahlen muss und somit einen Rabatt von 20% erhält.
          type: number
          format: double
          # Read Only
    Bestellung:
      description: |
        Eine Bestellung ist analog einem Warenkorb, den ein Kunde als ganzes bei SBB Cargo bestellen möchte
      type: object
      properties:
        nummer:
          type: string
          description: die ID einer Bestellung, wird bei Erstellung automatisch vergeben.
          # Read Only
        datumVon:
          type: string
          format: date
          description: |
            Ab welchem Datum gilt die Bestellung? Wird automatisch im Backend generiert und aktualisiert. 
            Entspricht dem Minimum aus gewünschter und original geplanter Versandzeit.
          # Read Only
        datumBis:
          type: string
          format: date
          description: |
            Bis zu welchem Datum gilt die Bestellung? Wird automatisch im Backend generiert und aktualisiert.
            Entspricht dem Maximum aus gewünschter und original geplanter Empfangszeit.
          # Read Only
        status:
          $ref: '#/components/schemas/BestellungStatus'
          # Read Only
        stornobegruendung:
          $ref: '#/components/schemas/Stornobegruendung'
          # Read Only
        grundAblehnung:
          type: string
          # Read Only
        letzteUmbestellungFolgeaktivitaet:
          $ref: '#/components/schemas/UmbestellungFolgeaktivitaet'
          # Read Only
        umbestellungStatus:
          $ref: '#/components/schemas/UmbestellungStatus'
          # Read Only
        auftraege:
          type: array
          items:
            $ref: '#/components/schemas/Auftrag'
    BestellungStatus:
      description: |
        Der aktuelle Zustand der Bestellung bei SBB Cargo:
        * Angelegt: Die Bestellung ist angelegt, wird aber nicht weiter bearbeitet durch SBB Cargo. Der Kunde kann die Bestellung jederzeit abändern, ergänzen oder löschen.
        * Gesendet: Die Bestellung ist aus Kundensicht komplett und kann bei SBB Cargo bearbeitet werden.
        * Bestaetigt: Kann nicht vom Kunden erzwungen werden, sondern zeigt (nach individueller Prüfung) die offizielle Annahme zur Ausführung durch SBB Cargo an. Wird automatisch von SBB Cargo nach Prüfung vergeben.
        * In Umbestellung: Für die Bestellung wurde eine Umbestellung ausgelöst und die Machbarkeit der gewünschten Änderung wird geprüft.
        * Begonnen: Mindestens ein Auftrag ist im Status begonnen.
        * Abgelehnt: Die Bestellung wurde durch SBB Cargo abgelehnt.
        * Storniert: Die Bestellung wurde durch den Kunden oder durch SBB Cargo storniert.
        * Zurückgegeben: Ganzzug: Die Bestellung wurde durch SBB Cargo geändert und dem Kunden zurück zur Prüfung gegeben. WLV: Die Bestellung konnte nicht bestätigt werden und kann durch den Kunden mit angepassten Daten neu bestellt werden.
        * KundenAbgelehnt: Die Bestellung wurde durch SBB Cargo in Status geaendert gesetzt und vom Kunden abgelehnt.
        * Erledigt: Die Bestellung wurde von SBB Cargo erfolgreich produziert.
      type: string
      enum:
        - angelegt
        - gesendet
        - bestaetigt
        - inUmbestellung
        - begonnen
        - abgelehnt
        - storniert
        - zurueckgegeben
        - kundenAbgelehnt
        - erledigt
    CancelBestellungRequest:
      description: Liefert eine Bemerkung für SBB Cargo
      type: object
      properties:
        bemerkung:
          description: Bemerkung für SBB Cargo
          type: string
    CargoError:
      description: Ein Fehlerobjekt mit genaueren Informationen zusätzlich zum HTTP Code
      type: object
      properties:
        meldungen:
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/Fehlermeldung'
          minItems: 1
    CheckErgebnis:
      description: |
        Ergebnis der Prüfung ob einen Auftrag durchführbar ist oder eine Bestellung bestellbar ist.
        Für alle enthaltenen `meldungen` kann angenommen werden, dass `Fehlermeldung.system` den Wert `Transport` hat.
      type: object
      properties:
        erfolgreich:
          type: boolean
          # Read Only
        meldungen:
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/Fehlermeldung'
    EtaVeraenderung:
      description: Veränderung der ETA (estimated time of arrival) einer Sendung
      type: object
      properties:
        transportID:
          description: transportID der Sendung
          type: integer
          format: int32
          # Read Only
        etaUrspruenglich:
          description: die ursprüngliche ETA
          type: string
          format: date-time
          # Read Only
        etaAlt:
          description: die letzte gemeldete ETA
          type: string
          format: date-time
          # Read Only
        eta:
          description: die aktuelle ETA
          type: string
          format: date-time
          # Read Only
        partnerids:
          description: |
            Die IDs der Partner, die von dieser ETA-Veränderung betroffen sind:

            meldungsAbsender, versender, empfaenger, frachtzahlerVersand und frachtzahlerEmpfang.
          type: array
          # Read Only
          items:
            type: integer
            format: int32
            pattern: ^[0-9]{8}$
        typ:
          $ref: '#/components/schemas/EtaVeraenderungTyp'
          # Read Only
    EtaVeraenderungTyp:
      description: Art der ETA-Veränderung
      type: string
      enum:
        - bedienzeitfensterAenderung
        - zugVerspaetung
    Fehlermeldung:
      description: Ermöglicht eine fachliche oder technische Meldung den Kunden zu melden
      type: object
      required:
        - system
        - code
        - fehlermeldung
      properties:
        system:
          description: Das System welches den Fehler ausgelöst hat.
          type: string
          enum:
            - Api
            - Transport
            - Gateway
            - Partner
            - Storage
            - Push
          # Read Only
        code:
          description: |
            Der Fehlercode des Systems, in welchem der Fehler entstanden ist.
            Die wichigsten Fehlercodes lauten (Liste ist _nicht_ abschliessend!):        
            | System | Code | Beschreibung |
            | ---- | ---- | ---- |
            | Api | schema-validation | Anfrage entspricht nicht dem aktuell verwendeten Schema wie in dieser Datei definiert. In diesem Fall ist eine `FehlerReferenz` mit befüllten `feld` und `zurueckgewiesenerWert` enthalten. |
            | Transport | 13856 | Abweichende Relation zum Vertrag |
            | Transport | 13857 | Abweichender Absender zum Vertrag |
            | Transport | 14317 | Abweichender Auftraggeber zum Vertrag |
            | Transport | 13858 | Abweichender Empfänger zum Vertrag |
            | Transport | 14484 | Abweichender Endkunde zum Vertrag |
            | Transport | 13859 | Abweichender Frachtzahler Empfang zum Vertrag |
            | Transport | 13860 | Abweichender Frachtzahler Versand zum Vertrag |
            | Transport | 14485 | Abweichendes Produkt zum Vertrag |
            | Transport | 14331 | Andere Variante >{0}< passt besser zur Relation |
            | Transport | 14539 | Auftrag darf durch Sie nicht bearbeitet werden |
            | Transport | 13894 | Der Auftrag ist fehlerhaft: {0} |
            | Transport | 14548 | Auftrag {0} hat bereits eine Position mit Wagen {1}, Aktion nicht erlaubt |
            | Transport | 14538 | Auftrag/Bestellung hat mehr als 50 Positionen/Wagen |
            | Transport | 14540 | Auftraggeber passt nicht zum Vertrag |
            | Transport | 14549 | Auftrag {0} ist im Status "{1}", Aktion nicht erlaubt |
            | Transport | 14550 | Beim Bereich {0} liegt das Ende vor dem Beginn |
            | Transport | 14551 | Die Bereiche {0} und {1} sind nicht überschneidungsfrei |
            | Transport | 14542 | Reservierung darf nicht geändert werden |
            | Transport | 13656 | Reservierung nicht gefunden |
            | Transport | 14552 | Reservierung nicht gefunden |
            | Transport | 14553 | Bestellposition {0}: Auftrag nicht erzeugt: {1} |
            | Transport | 13862 | Die Bestellung ist fehlerhaft: {0} |
            | Transport | 14543 | Bestellungen haben unterschiedliche Auftraggeber |
            | Transport | 14544 | Bestellungen haben unterschiedlichen Status |
            | Transport | 14554 | Bestellung {0} ist im Status "{1}", Aktion nicht erlaubt |
            | Transport | 14555 | Bestellung nicht gefunden |
            | Transport | 14545 | Bitte Prio angeben |
            | Transport | 14546 | Bitte Prio nur einmal verwenden |
            | Transport | 14855 | Buchungsfrist von max. {0} Tagen nicht eingehalten |
            | Transport | 14573 | Datum des Auftrages darf nicht geändert werden |
            | Transport | 14557 | Das Datum der Bestellpos. liegt ausserhalb des Bestellzeitraums |
            | Transport | 14575 | Die Bestellung {0} hat mehrere Auftraggeber |
            | Transport | 14304 | Doppelte Buchung |
            | Transport | 14577 | Falscher Zollstatus |
            | Transport | 14694 | Fehlende Anzahl Wagen |
            | Transport | 14023 | Fehlende Art des Verzollungsortes |
            | Transport | 14305 | Fehlende LüP |
            | Transport | 14324 | Fehlende Referenzen: {0} |
            | Transport | 14692 | Fehlende Verladestelle |
            | Transport | 14695 | Fehlender Besteller |
            | Transport | 14693 | Fehlender Verladeort |
            | Transport | 14024 | Fehlender Verzoller (CH) |
            | Transport | 14696 | Fehlender Wagentyp (LWV) |
            | Transport | 14697 | Fehlender Zeitpunkt |
            | Transport | 14631 | Fehlender Zollstatus |
            | Transport | 14303 | Fehlendes Bruttogewicht |
            | Transport | 14578 | Fehlendes Frachtführerverhältnis |
            | Transport | 13912 | Fehlende Ladestelle |
            | Transport | 13909 | Fehlendes Nettogewicht |
            | Transport | 14257 | Fehlende Relation |
            | Transport | 13911 | Fehlendes Tara-Gewicht |
            | Transport | 14022 | Fehlendes Zollverfahren |
            | Transport | 13910 | Fehlerhafte Gefahrdaten |
            | Transport | 14089 | Fehlerhafte Zeiten |
            | Transport | 14579 | Frachtführerverhältnis und Beförderer passen nicht |
            | Transport | 14580 | Für Reservierung bitte Absender und Empfänger pflegen |
            | Transport | 14394 | Gegenseitige Grenzverzollung (Zollverfahren 0 und Nettogewicht >0) |
            | Transport | 14558 | Gleis {0} in der Anlage {1} nicht gefunden |
            | Transport | 14559 | Gleis {0} nicht gefunden |
            | Transport | 14581 | Gültigkeitsende {0} liegt vor dem Beginn {1} |
            | Transport | 14582 | Kein Kundenabkommen oder Tarifnummer |
            | Transport | 14583 | Kein Transportrecht angegeben |
            | Transport | 14560 | Für die Transportleistung ist kein Rundlauf geplant |
            | Transport | 14671 | Kontakt {0} hat keine Kundennummer |
            | Transport | 14584 | Ladestelle am Zielort nicht gefunden |
            | Transport | 14586 | Leerwagenbestellung darf nicht mehr bearbeitet werden |
            | Transport | 14858 | Nebengebühr hat keinen Ort |
            | Transport | 14490 | Netto-Explosiv ist größer als das Nettogewicht |
            | Transport | 14041 | Nicht verzollt |
            | Transport | 14274 | Nur die Codes 5,9,10,11,16,18 für Absender-Erklärung bei CUV-Frachtbriefen zulässig |
            | Transport | 14653 | Plombennummer wurde doppelt verwendet |
            | Transport | 14587 | Position darf nicht mehr geändert werden |
            | Transport | 14851 | Position darf nicht mehr geändert werden, da AK bereits erfolgt |
            | Transport | 14307 | Position hat keine gültige Wagen-Nr. |
            | Transport | 10915 | Position hat keine Wagen-Nr. |
            | Transport | 14588 | Relation darf nicht geändert werden |
            | Transport | 14589 | Rundlauf muss mind. 2 Einträge haben |
            | Transport | 14570 | Die Transportleistung hat kein Abre.-Verf. >Gefahrgutzuschlag< |
            | Transport | 14571 | Die Transportleistung hat kein Abre.-Verf. >Zoll< |
            | Transport | 14266 | Unbekannte Ladeeinheit |
            | Transport | 13908 | Unbekannter NHM-Code für leeren Wagen oder Ladeeinheit |
            | Transport | 14823 | Unbestätigte Transportkette |
            | Transport | 14590 | Ungültige Wagen-Nr. {0} |
            | Transport | 14592 | Vertrag {0} hat gleiches Kundenabkommen und überlappt sich zeitlich |
            | Transport | 13861 | Vertrag weicht von Reservierung ab |
            | Transport | 14572 | Der Vertrag {0} hat keine Position mit der Serviceleistung {1} |
            | Transport | 14593 | Vertrag/Variante darf nicht geändert werden |
            | Transport | 14021 | Verzoller (CH) ist nicht erlaubt |
            | Transport | 14594 | Wagen {0} ist doppelt |
            | Transport | 14595 | Wagennummer {0} kann nicht interpretiert werden |
            | Transport | 14597 | Zahlungsvermerk/Frankatur für internationalen Transport fehlt |
            | Transport | 14598 | Zusammenladeverbot: Gefahrklasse 1 darf nicht mit anderen kombiniert werden |
            | Transport | 14599 | Zusammenladeverbot: Verträglichkeitsgruppe {0} und {1} nicht kombinierbar |
            | Transport | 14927 | Annahmesperre: {Beschreibung der Bedingung} |
          type: string
          # Read Only
        fehlermeldung:
          description: Eine ausführliche Fehlerbeschreibung in natürlicher Sprache. In der Regel auf Deutsch oder mehrsprachig.
          type: string
          # Read Only
        fehlermeldungDe:
          description: Eine ausführliche Fehlerbeschreibung in deutscher Sprache - sofern verfügbar.
          type: string
          # Read Only
        fehlermeldungFr:
          description: Eine ausführliche Fehlerbeschreibung in französischer Sprache - sofern verfügbar.
          type: string
          # Read Only
        fehlermeldungIt:
          description: Eine ausführliche Fehlerbeschreibung in italienischer Sprache - sofern verfügbar.
          type: string
          # Read Only
        referenzen:
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/FehlerReferenz'

    FehlerReferenz:
      description: |
        Definiert welche(s) Objekt(e) die dazugehörige Fehlermeldung verursachen.
        Für Schemavalidierungen sind idR `feld` und `zurueckgewiesenerWert` befüllt.
        Für Fehler/Validierungen im eBooking sind idR `objektId` und `objektTyp` befüllt.
      type: object
      properties:
        objektId:
          description: ID / Nummer des Objektes (Auftragsnummer, Bestellungsnummer, ladeeinheit Bezeichnung, usw.)
          type: string
          # Read Only
        objektTyp:
          type: string
          # Read Only
          enum:
            - Bestellung
            - Auftrag
            - Wagen
            - Ladeeinheit
            - GutartPosition
            - Sonstiges
        feld:
          type: string
          # Read Only
        zurueckgewiesenerWert:
          type: object
          # Read Only

    Feiertag:
      description: Beinhaltet alle relevanten Informationen zu einem Feiertag
      type: object
      properties:
        datum:
          type: string
          format: date
          # Read Only
        nameDE:
          type: string
          # Read Only
        nameFR:
          type: string
          # Read Only
        nameIT:
          type: string
          # Read Only
        ort:
          $ref: '#/components/schemas/Ort'
          # Read Only
    FrachtbriefDaten:
      description: Beinhaltet Frachtbrief-relevante Daten, welche nicht im direkt im Auftrag vorhanden sind
      type: object
      properties:
        frankatur:
          $ref: '#/components/schemas/Frankatur'
        kommerzielleBedingungen:
          $ref: '#/components/schemas/KommerzielleBedingung'
        erklaerungenAbsender:
          type: array
          description: Liste der Absender-Erklaerungen
          items:
            $ref: '#/components/schemas/ErklaerungAbsender'
        beilagen:
          type: array
          description: Liste der Beilagen zum Frachtbrief
          items:
            $ref: '#/components/schemas/FrachtbriefBeilage'
        zollverfahren:
          type: string
          description: Beschreibung des Zollverfahren.
          # Read Only
        zollverfahrenCode:
          type: string
          description: Falls dieser Wert nicht gesetzt ist, ist das Zollverfahren aus Vertrag(-svariante) gültig.
        artVerzollungsort:
          type: string
          enum:
            - Bestimmungsland
            - Grenzeingangsland
            - Unterwegsbahnhof
            - BeimZugelassenenEmpfaneger
            - AufAnweisungZollbehoerde
        zollstatus:
          description: |
            Der Verzollungsstatus des Auftrages
            * Unverzollt: der Auftrag wurde noch nicht verzollt
            * In Bearbeitung: der Auftrag wird gerade durch den Zoll bearbeitet
            * Verzollt: die Verzollung des Auftrags wurde abgeschlossen
            * VerzollungZVE: die Verzollung erfolgt durch einen zugelassenen Versender oder Empfänger
          type: string
          enum:
            - Unverzollt
            - InBearbeitung
            - Verzollt
            - VerzollungZVE
          # Read only
        vermerkEmpfaenger:
          type: string
          description: Vermerk für den Empfänger
          maxLength: 250
    FrachtbriefBeilageStammdaten:
      type: object
      required:
        - code
        - bezeichnung
      properties:
        code:
          type: string
          # Read only
        bezeichnung:
          type: string
          # Read only
    FrachtbriefBeilage:
      type: object
      required:
        - code
      properties:
        code:
          type: string
        nummer:
          description: Bezeichnung oder Nummer des Dokuments/der Beilage
          type: string
          maxLength: 35
        anzahlKopien:
          type: integer
          format: int32
          maximum: 99
    ErklaerungAbsenderStammdaten:
      type: object
      required:
        - code
        - textPflicht
      properties:
        code:
          type: string
          # Read only
        bezeichnung:
          type: string
          # Read only
        textPflicht:
          description: Definiert ob ein Text im Objekt Auftrag.frachtbrief.erklaerungAbsender.text verpflichtet, optional oder nicht erlaubt ist.
          type: string
          enum:
            - keinTextErlaubt
            - optionalerText
            - verpflichtenderText
          # Read only
    ErklaerungAbsender:
      type: object
      required:
        - code
      properties:
        code:
          type: string
        text:
          type: string
          maxLength: 350
    GefahrgutDaten:
      description: Basis Objekt für alle Gefahrgut Daten Objekte
      type: object
      required:
        - vorschriftVersion
      properties:
        vorschriftVersion:
          $ref: '#/components/schemas/GefahrgutDatenVersion'
        unNummer:
          description: Die UN-Nummer, auch Stoffnummer genannt, ist eine Kennnummer, die für alle gefährlichen Stoffe, die gleichzeitig als gefährliche Güter (Gefahrgut) gelten, festgelegt wird. Sie ist die untere Nummer auf den auf allen Gefahrguttransporten angebrachten orangefarbigen Warntafeln und beschreibt die Zusammensetzung des Transportgutes.
          type: string
          pattern: '[0-9]{4}'
        gefahrKlasse:
          type: string
          maxLength: 3
        gefahrNummer:
          type: string
          maxLength: 4
        verpackungsgruppe:
          type: string
          maxLength: 3
        klassifizierungCode:
          type: string
          maxLength: 5
        gefahrZettel1:
          type: string
        gefahrZettel2:
          type: string
        gefahrZettel3:
          type: string
        gefahrZettel4:
          type: string
        umweltgefaehrdend:
          type: boolean
    GefahrgutDatenVersion:
      description: Version der Gefahrgut Daten
      type: string
      enum:
        - 2017
        - 2019
        - 2021
        - 2023
        - 2025
        - 2027
        - 2029
        - 2031
        - 2033
        - 2035
        - 2037
        - 2039
        - 2041
        - 2043
        - 2045
    GefahrgutSprache:
      description: Sprache der Gefahrgut Daten
      type: string
      enum:
        - de
        - fr
        - en
    GefahrgutStammdaten:
      description: |
        Stammdaten Objekt für Gefahrgut Daten.

        Bei den Sondervorschriften können die folgenden Platzhalter auftauchen:
          * <EHZ> - Ende der Haltezeit
          * <LAND> - UIC Land
          * <REF> - Referenz
      type: object
      allOf:
        - $ref: '#/components/schemas/GefahrgutDaten'
        - type: object
          properties:
            bezeichnung:
              type: string
              # Read Only
            offizielleBezeichnungDE:
              type: string
              # Read Only
            offizielleBezeichnungFR:
              type: string
              # Read Only
            offizielleBezeichnungEN:
              type: string
              # Read Only
            offizielleBezeichnungLangDE:
              type: string
              # Read Only
            offizielleBezeichnungLangFR:
              type: string
              # Read Only
            offizielleBezeichnungLangEN:
              type: string
              # Read Only
            sondervorschriftDE:
              type: string
              # Read Only
            sondervorschriftFR:
              type: string
              # Read Only
            sondervorschriftEN:
              type: string
              # Read Only
            technischeBenennungNotwendig:
              type: boolean
              description: Dieses Feld definiert ob die technische Benennung für diese UN Nummer notwendig ist oder nicht.
    Verpackungsart:
      description: Verpackungsart eines Gutes
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: Code der Verpackungsart
        bezeichnung:
          type: string
          description: Bezeichnung der Verpackungsart
    GefahrgutLeerverpackungStammdaten:
      description: Stammdaten Objekt für Leerverpackung Gefahrgut Daten
      type: object
      required:
        - code
      properties:
        code:
          type: string
          pattern: '[0-9]{2}'
          # Read Only
        bezeichnungDE:
          type: string
          # Read Only
        bezeichnungFR:
          type: string
          # Read Only
        bezeichnungEN:
          type: string
          # Read Only
    GefahrgutSondervorschriftStammdaten:
      type: object
      properties:
        sondervorschriftDE:
          type: string
        sondervorschriftFR:
          type: string
        sondervorschriftEN:
          type: string
    GefahrgutVorschriftVersionStammdaten:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/GefahrgutDatenVersion'
        gueltigVon:
          type: string
          format: date
          description: Gültigkeitsbeginn der Version
        gueltigBis:
          type: string
          format: date
          description: Gültigkeitsende der Version
        aktiv:
          type: boolean
          description: Ist die Version aktiv
    Geofence:
      description: Definiert einen Geofence durch Angabe von Koordinaten und Radius
      type: object
      properties:
        koordinaten:
          $ref: '#/components/schemas/Koordinaten'
        radius:
          description: Definiert die Grösse in Metern der Geofence
          type: integer
          format: int32
    KapazitaetBestaetigt:
      description: |
        Die bei der Bestätigung der Bestellung zugesicherte Kapazität. Wird bei jedem wiederholten Bestätigen eines Auftrags aktualisiert.
      type: object
      properties:
        anzahlWagen:
          type: integer
          format: int32
          # Read Only
        tonnenBrutto:
          type: integer
          format: int32
          # Read Only
        meterBrutto:
          type: number
          format: double
          # Read Only
    Kapazitaetsstatus:
      description: |
        Der Kapazitätsstatus zeigt beim Ändern eines Auftrags an, ob der Auftrag mit den Änderungen noch der (bei der Bestellung) bestätigten Kapazität entspricht oder ob diese überschritten wurde.
        Dieser ist nur im Status "bestaetigt" vorhanden.
      type:
        object
      required:
        - bestaetigteKapazitaetUeberschritten
      properties:
        bestaetigteKapazitaetUeberschritten:
          description: |
            Zeigt an, ob die aktuellen Auftragsdaten die bestätigte Kapazität überschreiten.
              * TRUE: die bestätigte Kapazität wurde überschritten, es muss eine Kapazitätsanpassung vorgenommen werden
              * FALSE: die bestätigte Kapazität wurde eingehalten, die Erfassung kann abgeschlossen werden
          type: boolean
          # Read Only
    KeyNumberValuePair:
      description: Ein geordnetes Paar, das einem Key einen numerischen Wert zuweist, z.B. ('Eanos', '42') oder ('2019-05', 1200.00).
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
          example:
            - 'Eanos'
            - '2019-05'
        value:
          type: number
          example:
            - 42
            - 100.00
            - 3.1415926
    KommerzielleBedingung:
      type: object
      properties:
        leitungsweg:
          type: string
          maxLength: 100
        befoerderer:
          type: string
          maxLength: 100
        sonstiges:
          type: string
          maxLength: 100
    Kontrolletikett:
      description: Das Kontrolletikett/Sendungsnummer ist die CIM Frachtbriefnummer.
      type: object
      properties:
        uicLand:
          description: Der UIC-Ländercode, woher die Sendung stammt
          type: string
          pattern: '[0-9]{2}'
          # Read only
        uicBahnhof:
          description: Der Bahnhof bzw. sein UIC Bahnhofscode, von dem die Sendung versenden wird.
          type: string
          pattern: '[0-9]{6}'
          # Read only
        uicEVU:
          description: Die UIC Nummer für das EVU, welches die Sendung aufgegeben hat.
          type: string
          pattern: '[0-9]{4}'
          # Read only
        laufnummer:
          description: Eine automatisch generierte Nummer, die bei der Buchung vergeben wird.
          type: string
          pattern: '[0-9]{5}'
          # Read only
        pruefziffer:
          description: Pruefziffer für die Nummer
          type: string
          pattern: '[0-9]{1}'
          # Read only
    Koordinaten:
      description: Ein Koordinatenpaar bestehend aus Laengen- und Breitengrad.
      properties:
        laengengrad:
          type: number
          format: float
        breitengrad:
          type: number
          format: float
      example:
        laengengrad: 7.4667
        breitengrad: 40.741895
      type: object
    Ladeeinheit:
      description: |
        Details zu einer auf einem Wagen verladenen Ladeeinheit (Container, Wechselbehälter, Sattelaufleger o.ä.).
        Der `absenderLadeeinheit` und der `empfaengerLadeeinheit` dienen nur als Information für die korrekte Zustellung der Ladeeinheiten bei den Kunden. Es handelt sich bei diesen Angaben nicht um eine Beteiligung am Auftrag.
        Diese können vom Typ `ZKK` und Typ `KundenKontakt` sein.
      type: object
      required:
        - art
      properties:
        bezeichnung:
          description: Bezeichnung der Ladeeinheit z.B. MRKU1234567
          type: string
          pattern: '^[0-9A-Z]{1,11}$'
        art:
          $ref: '#/components/schemas/LadeeinheitArt'
        kundenreferenz:
          type: string
          minLength: 1
          maxLength: 35
          description: Kundenreferenz
        mrnNummern:
          type: array
          description: Liste der MrnNummer der Ladeeinheit. Wenn die MrnNummern auf Ebene Ladeeinheit erfasst werden, dürfen keine MrnNummern auf Ebene LadungGutart dieser Ladeeinheit erfasst werden.
          items:
            $ref: '#/components/schemas/MrnNummer'
        laenge:
          description: Länge der Ladeeinheit in Meter
          type: number
          format: float
        breite:
          description: Breite der Ladeeinheit in Meter
          type: number
          format: float
        hoehe:
          description: Höhe der Ladeeinheit in Meter
          type: number
          format: float
        laengencode:
          type: string
          pattern: '[0-9]{2}'
          description:  Längencode gemaess UIC-Merkblatt 592
        highCube:
          description: Flag-Feld welches angibt, ob es sich um eine HighCube Ladeeinheit handelt
          type: boolean
        beladen:
          description: Flag-Feld welches angibt, ob es sich um eine beladene oder leere Ladeeinheit handelt
          type: boolean
          # Read Only
        nhmCodeLadezustand:
          description: NHM-Codierung des Ladezustandes der Ladeeinheit
          type: string
        gewichtNetto:
          description: Nettogewicht in kg, Summe der einzelnen Bruttogewichte aller in der Ladeeinheit verladenen Gutarten. Wird nur überschrieben falls gesetzt (kein löschen durch weglassen des Attributs). Falls mehrere Gewichte gesetzt sind (Netto/Brutto/Tara) müssen diese zusammen passen.
          type: integer
          format: int32
          # Read Only
        gewichtBrutto:
          description: Bruttogewicht in kg, Gesamtgewicht der Ladeeinheit. Wird nur überschrieben falls gesetzt (kein löschen durch weglassen des Attributs). Falls mehrere Gewichte gesetzt sind (Netto/Brutto/Tara) müssen diese zusammen passen.
          type: integer
          format: int32
          # Read Only
        gewichtTara:
          description: Taragewicht in kg, Leergewicht der Ladeeinheit. Wird nur überschrieben falls gesetzt (kein löschen durch weglassen des Attributs). Falls mehrere Gewichte gesetzt sind (Netto/Brutto/Tara) müssen diese zusammen passen.
          type: integer
          format: int32
        gutarten:
          type: array
          items:
            $ref: '#/components/schemas/LadungGutart'
        plomben:
          type: array
          items:
            $ref: '#/components/schemas/Plombierung'
          maxItems: 10
        absenderLadeeinheit:
          $ref: '#/components/schemas/Partner'
        empfaengerLadeeinheit:
          $ref: '#/components/schemas/Partner'
    LadeeinheitArt:
      type: string
      enum:
        - Container
        - Fahrzeug
        - Wechselbehaelter
        - Sattelauflieger
    LadeeinheitMetadaten:
      description: |
        Metadaten zu einer Ladeeinheit
      type: object
      required:
        - art
        - bezeichnung
      properties:
        bezeichnung:
          description: Bezeichnung der Ladeeinheit z.B. MRKU1234567
          type: string
          pattern: '^[0-9A-Z]{1,20}$'
        art:
          $ref: '#/components/schemas/LadeeinheitArt'
        gewichtTara:
          description: Taragewicht in kg, Leergewicht der Ladeeinheit.
          type: integer
          format: int32
        laenge:
          description: Länge der Ladeeinheit in Meter
          type: number
          format: float
        breite:
          description: Breite der Ladeeinheit in Meter
          type: number
          format: float
        hoehe:
          description: Höhe der Ladeeinheit in Meter
          type: number
          format: float
        laengencode:
          type: string
          pattern: '[0-9]{2}'
          description:  Längencode gemaess UIC-Merkblatt 592
        highCube:
          description: Flag-Feld welches angibt, ob es sich um eine HighCube Ladeeinheit handelt
          type: boolean
    LadeeinheitMetadatenResponse:
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          required:
            - results
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/LadeeinheitMetadaten'
    Ladestelle:
      description: Eine Ladestelle ist eine (meistens vom Kunden) verwaltete Be- und Entladestelle für Bahntransporte mit entsprechenden Infrastrukturanlagen.
      type: object
      properties:
        nummer:
          description: Ladestellennummer. Dieses Feld ist "required" für den Binnenverkehr.
          type: string
          pattern: '[a-zA-Z0-9]{1,10}'
        name:
          description: Bezeichnung der Ladestellenname
          type: string
      example:
        nummer: '01'
        name: 'FVL'
    LadungGefahrgutDaten:
      description: Gefahrgut Daten Objekt im Ladung Kontext
      type: object
      allOf:
        - $ref: '#/components/schemas/GefahrgutDaten'
        - type: object
          properties:
            begrenzteMenge:
              type: boolean
              description: Handelt es sich um eine begrenzte-Menge-Deklaration
            spracheDeklaration:
              $ref: '#/components/schemas/GefahrgutSprache'
            offizielleBezeichnung:
              type: string
              maxLength: 350
              description: Die kurze Bezeichnung aus den Stammdaten (GefahrgutStammdaten.offizielleBezeichnungDE/FR/IT)
            technischeBenennung:
              type: string
              maxLength: 350
            gewichtNettoExplosiv:
              type: integer
              format: int32
              description: Explosives Gewicht des Nettogewicht in kg
            leerverpackungCode:
              type: string
              pattern: '[0-9]{2}'
            sondervorschrift:
              type: string
              maxLength: 255
              description: |
                Bei der Sondervorschrift-Stamdaten, können die folgenden Platzhalter auftauchenm, die müssen mit den vom kunden Daten ersetzt werden.
                  * <EHZ> - Ende der Haltezeit
                  * <LAND> - UIC Land
                  * <REF> - Referenz
    LadungGutart:
      description: |
        Details zu einer auf einem Wagen oder in einer Ladeeinheit verladenen Gutart.
      type: object
      properties:
        nhmGutart:
          $ref: '#/components/schemas/NhmGutart'
        kundenbezeichnung:
          type: string
          description: Ladungsbezeichnung gemäss Kunde
          maxLength: 250
        kundenreferenz:
          type: string
          minLength: 1
          maxLength: 30
          description: Kundenreferenz
        gewichtNetto:
          description: Nettogewicht in kg
          type: integer
          format: int32
        gefahrgutDaten:
          $ref: '#/components/schemas/LadungGefahrgutDaten'
        abfallBegleitschein:
          type: string
        abfallNotifizierungsnummer:
          type: string
        packstueckeAnzahl:
          type: integer
          format: int32
          description: Anzahl der Packstuecke
        verpackungsart:
          $ref: '#/components/schemas/Verpackungsart'
        mrnNummern:
          type: array
          description: Liste der MrnNummer der Gutart.
          items:
            $ref: '#/components/schemas/MrnNummer'
    Leerwagenbestellung:
      description: |
        Das Objekt enthält alle Informationen zur einer Leerwagenbestellung
      type: object
      required:
        - auftraggeber
      properties:
        nummer:
          type: string
          description: die ID einer Leerwagenbestellung, wird bei Erstellung automatisch vergeben.
          # Read Only
        auftraggeber:
          $ref: '#/components/schemas/Partner'
        verlader:
          $ref: '#/components/schemas/Partner'
        verladerAnsprechpartner:
          type: string
          description: |
            Der Name des Ansprechpartners beim Verlader
          maxLength: 50
        verladerAnsprechpartnerTelefon:
          type: string
          description: |
            Die Telefonnummer des Ansprechpartners
          maxLength: 20
        datum:
          description: |
            Datum der Leerwagenbestellung - das Feld wird automatisch vom System gerechnet:
              * Wenn `bedienzeit` nicht gesetzt ist, wird das Feld auf das heutige Datum + 14 Tage gesetzt
              * Wenn `bedienzeit` gesetzt ist, wird das Feld auf dieses Datum gesetzt
          type: string
          format: date
          # Read Only
        bedienzeit:
          $ref: '#/components/schemas/Zeit'
        verladeort:
          $ref: '#/components/schemas/Ort'
        transportZiel:
          $ref: '#/components/schemas/Ort'
        bemerkung:
          type: string
          description: Bemerkung zur Leerwagenbestellung
          maxLength: 300
        referenzKundensystem:
          type: string
          description: Referenz der Leerwagenbestellung im Kundensystem. Bietet die Möglichkeit eine kundeninterne Auftragsnummer der Leerwagenbestellung zuzuordnen.
          maxLength: 50
        tarieren:
          deprecated: true
          type: boolean
          description: |
            Wenn für den bestellten Wagen ein Abwiegen des unbeladenen Wagens (Tarieren) gewünscht ist, kann dies hier angegeben werden. 
            Ein Tarieren kann Kosten verursachen.

            DEPRECATED: Das "Tarieren" soll als Zusatzleistung zu einer Leerwagenbestellung bestellt werden.
          default: false
        zusatzleistungen:
          type: array
          description: |
            Die Liste der gewünschten Zusatzleistungen (z.B. Tarierung, Lademittel, etc.) zu dieser Leerwagenbestellung.
            Die bestellbaren Zusatzleistungen sind aus dem Katalog der /stammdaten/leerwagenbestellungZusatzleistungen zu entnehmen.
            Solange die Leerwagenbestellung im Status "neu" ist, können Zusatzleistung beliebig hinzugefügt, verändert oder gelöscht werden. 
            Im Status "gesendet" können Zusatzleistungen nur noch storniert werden.
            In allen anderen Status kann die Liste der Zusatzleistungen nicht mehr verändert werden.
          items:
            $ref: "#/components/schemas/Zusatzleistung"
        status:
          $ref: '#/components/schemas/LeerwagenbestellungStatus'
        bestellteWagen:
          type: array
          description: |
            Liste der bestellten Wagen (ein Objekt pro Typ). Es können maximal 4 verschiedenen Wagentypen geliefert (den gewünschten Wagentyp plus 3 alternativen Typen) werden.
          items:
            $ref: '#/components/schemas/LeerwagenbestellungWagen'
        garantierteWagen:
          type: array
          description: Liste der zugesagten/garantierten Positionen
          # Read Only
          items:
            $ref: '#/components/schemas/LeerwagenbestellungGarantierteWagen'
        anzahlWiederbelader:
          type: integer
          format: int32
          description: Anzahl von Wiederbelader
        wiederbelader:
          description: Liste der Wagennummern für die Wiederbeladung
          type: array
          items:
            type: string
        transportAuftragNummer:
          description: Auftragsnummer des Transportes (wenn die Leerwagenbestellung aus einem Auftrag bestellt wurde)
          type: string
        transportBestellungNummer:
          description: Bestellungsnummer des Transportes (wenn die Leerwagenbestellung aus einem Auftrag bestellt wurde)
          type: string
    LeerwagenbestellungStatus:
      description: |
        Der aktuelle Zustand der Leerwagenbestellung bei SBB Cargo:
        * Neu: Die Bestellung ist angelegt, wird aber nicht weiter bearbeitet durch SBB Cargo. Der Kunde kann die Leerwagenbestellung jederzeit abändern, ergänzen oder löschen.
        * Gesendet: Die Leerwagenbestellung ist aus Kundensicht komplett und kann bei SBB Cargo bearbeitet werden.
        * Teilerleidgt: Mindestens einer der bestellten Wagen (oder ein Alternativwagen) wurde dem Kunden zugestellt.
        * Erledigt: Alle bestellten Wagen (oder die Alternativwagen) wurden dem Kunden zugestellt.
        * Storniert: Die Leerwagenbestellung wurde durch den Kunden oder durch SBB Cargo storniert.
        * Geloescht: Die Leerwagenbestellung wurde gelöscht.
      type: string
      enum:
        - neu
        - gesendet
        - teilerledigt
        - erledigt
        - storniert
        - geloescht
    LeerwagenbestellungReferenz:
      type: object
      description: Verweist auf ein Objekt vom Typ `Leerwagenbestellung`
      required:
        - nummer
      properties:
        nummer:
          type: string
          # Read Only
    LeerwagenbestellungReferenzMitZustellung:
      type: object
      description: Verweist auf ein Objekt vom Typ `Leerwagenbestellung` oder eine CISCargo Leerwagenbuchung.
      allOf:
        - $ref: '#/components/schemas/LeerwagenbestellungReferenz'
        - type: object
          required:
            - gebuchteZustellung
          properties:
            gebuchteZustellung:
              description: |
                Zeitpunkt für welchen die Leerwagenzustellung gebucht wurde.
                Auch wenn der Wagen vor diesem Zeitpunkt zugestellt wird, beginnt die vereinbarte Freiperiode erst ab diesem Zeitpunkt.
              type: string
              format: date-time
              # Read Only
    LeerwagenbestellungGarantierteWagen:
      type: object
      properties:
        wagentyp:
          type: string
          # Read Only
        status:
          $ref: '#/components/schemas/LeerwagenbestellungGarantierteWagenStatus'
          # Read Only
        wagennummer:
          type: string
          pattern: '[0-9]{12}'
          # Read Only
    LeerwagenbestellungGarantierteWagenStatus:
      type: string
      enum:
        - geplant
        - erledigt
        - storniert
        - geloescht
    LeerwagenbestellungWagen:
      type: object
      required:
        - prio
        - anzahl
      properties:
        prio:
          type: integer
          format: int32
          description: Priorität des Wagentyps innerhalb der Leerwagenbestellung (0 ist die höchste Prio = gewünschter Wagentyp, 1 bis 3 für die Alternativen, 3 ist der geringste)
          minimum: 0
          maximum: 3
        anzahl:
          type: integer
          format: int32
          description: Anzahl von gewünschten Wagen (total, inkl. Wiederbelader)
        wagentyp:
          type: string
    MrnNummer:
      description:
        Die MRN-Nummer steht für „Master Reference Number“ (ehemals Movement Reference Number). Sie ist so zu sagen DIE endgültige und einmalige Registriernummer, die du vom Zoll für Ware nach der Überführung in ein Versand- oder Ausfuhrverfahren erhältst.
      type: object
      required:
        - code
      properties:
        code:
          type: string
          enum:
            - MrnTs
            - MrnT
            - MrnExs
            - MrnEns
            - MrnE
            - Mrn1
            - Mrn2
            - Mrn3
            - Mrn4
            - Mrn5
            - Mrn6
            - Mrn7
            - Mrn8
            - Mrn9
        referenz:
          type: string
          description: Referenz oder Dokumentbezeichung
          maxLength: 35
    Musterbestellung:
      description: |
        Die Musterbestellung bietet dem Kunden die Möglichkeit eine Bestellvorlage für regelmässige Verkehre anzulegen und diese beim Erstellen einer neuen Bestellung zu kopieren.
      type: object
      allOf:
        - $ref: '#/components/schemas/Bestellung'
        - type: object
          required:
            - bezeichnung
            - letzteVerwendung
          properties:
            bezeichnung:
              description: Die vom Kunden vergebene Bezeichnung einer Musterbestellung
              type: string
            letzteVerwendung:
              description: Das Datum der letzten Verwendung der Musterbestellung. Wird beim Verändern eines Musters oder bei der Anlage einer Bestellung aus einem Muster aktualisiert.
              type: string
              format: date-time
              # Read Only
              example: '2017-04-05T09:15:55.232Z'
    NhmGutart:
      description: NHM Code und Bezeichung für eine Gutart/Ware
      type: object
      required:
        - nhmCode
      properties:
        nhmCode:
          description: Offizieller NHM-Code der Gutart
          type: string
          maxLength: 6
        nhmBezeichnung:
          description: Offizielle Bezeichnung der Gutart
          type: string
          maxLength: 350
    NhmLadezustand:
      description: NHM Code und Bezeichung für den Ladezustand eines Wagens/einer Ladeeinheit
      type: object
      allOf:
        - $ref: '#/components/schemas/NhmGutart'
        - type: object
          properties:
            leerwagenCim:
              type: boolean
              description: gültig für Leerwagen nach CIM-Recht
            leerwagenCuv:
              type: boolean
              description: gültig für Leerwagen nach CUV-Recht
            containerLeer:
              type: boolean
              description: gültig für leere Container
            containerBeladen:
              type: boolean
              description: gültig für beladene Container
            fahrzeugLeer:
              type: boolean
              description: gültig für leere Fahrzeuge/LKW
            fahrzeugBeladen:
              type: boolean
              description: gültig für beladene Fahrzeuge/LKW
            wechselbrueckeLeer:
              type: boolean
              description: gültig für leere Wechselbrücken
            wechselbrueckeBeladen:
              type: boolean
              description: gültig für beladene Wechselbrücken
            sattelaufliegerLeer:
              type: boolean
              description: gültig für leere Sattelauflieger
            sattelaufliegerBeladen:
              type: boolean
              description: gültig für beladene Sattelauflieger
    Ort:
      description: |
        Ein Ort ist eine geographische Lokation, die jeweils mit einer optionalen GPS Position und einer optionale Ladestelle beschrieben werden kann.
      type: object
      required:
        - uicLand
        - uicNummer
      properties:
        uicLand:
          description: Der Ländercode des Bahnhofs. Kann von 10-99 gehen.
          type: integer
          format: int32
          pattern: '[0-9]{2}'
        uicNummer:
          description: Der Code des Bahnhofs inkl. Prüfziffer
          type: string
          pattern: '[0-9]{6}'
        name:
          description: Name des Ortes
          type: string
        ladestelle:
          $ref: '#/components/schemas/Ladestelle'
        betrieblicheBahnhoefe:
          items:
            $ref: '#/components/schemas/Ort'
        metaBetriebspunkt:
          $ref: '#/components/schemas/Ort'
        position:
          $ref: '#/components/schemas/Koordinaten'
      example:
        uicLand: 85
        uicNummer: 080010
        name: Schönbühl
    OrtTyp:
      description: |
        Um welchen Typ von Ort handelt es sich?
      type: string
      enum:
        - betriebspunkt
        - ladestelle
    Partner:
      required:
        - datentyp
      properties:
        datentyp:
          description: |
            * ZKK - Der Partner existiert im Adressbuch der SBB Cargo (ist eine ZKK Nummer)
            * KundenKontakt - Der Partner ist im SBB Cargo Adressbuch nicht bekannt und wurde vom Kunden in einem Auftrag als Beteiligter erfasst
          enum:
            - ZKK
            - KundenKontakt
        zkk:
          description: |
            Dieses Attribut ist immer genau dann gefüllt wenn `datentyp: ZKK`.
            Die ersten sechs Ziffern entsprechen der UIC-Nummer, die letzten zwei Ziffern der UIC-Filiale.
          type: string
          pattern: '^[0-9]{8}$'
        kundenKontaktNummer:
          description: |
            Dieses Attribut wird für `datentyp: KundenKontakt` verwendet (optional).
          type: string
        name:
          description: |
            Der Name des Partners (für `datentyp: KundenKontakt` mandatorisch)
          type: string
          maxLength: 50
        nameZusatz:
          description: Zusätzliches Namensfeld für den Partner
          type: string
          maxLength: 50
        ort:
          description: Die Ortschaft des Partners
          type: string
          maxLength: 30
        strasse:
          type: string
          description: Strasse und Hausnummer des Partners
          maxLength: 35
        postleitzahl:
          type: string
          maxLength: 10
        postfach:
          type: string
          maxLength: 10
        land:
          type: string
          description: Land des Partners (ISO ALPHA-2)
          pattern: '[A-Z]{2}'
        telefon:
          type: string
          maxLength: 30
        email:
          type: string
          description: Email des Partners
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          maxLength: 100
        verknuepftePartner:
          description: |
            Liste von Partner-Ids, die mit dem angefragten Partner verknüpft
            sind. Wenn kein Partner gefunden wurde, ist die Liste leer.
          type: array
          # Read Only
          items:
            type: integer
            format: int32
            description: Partner-Identifikation des Partners (Numerisches Format, 8 Zeichen)
      example:
        id: 64613203
        name: Genossenschaft Migros Aare
        ort: Schönbühl
        verknuepftePartner:
          - 12345678
          - 22345678
      type: object
    PartnerStammdaten:
      type: object
      required:
        - partnerId
        - name
      properties:
        partnerId:
          type: string
        name:
          type: string
        ort:
          type: string
        hatReservierungen:
          type: boolean
          description: Kann der Kunde aufgrund von Reservierungen bestellen
        hatBuchungssperre:
          type: boolean
          description: Hat der Kunde eine Buchungssperre
    PlanZugfahrt:
      required:
        - zugNummer
        - gueltigVon
        - gueltigBis
        - start
        - ziel
        - abfahrtSoll
        - ankunftSoll
        - verkehrstage
      type: object
      properties:
        zugnummer:
          description: Die Nummer des Zuges
          type: string
        gueltigVon:
          description: Erster Verkehrstag des geplanten Zugfahrt
          type: string
          format: date
        gueltigBis:
          description: letzter Verkehrstag der geplanten Zugfahrt
          type: string
          format: date
        verkehrstage:
          description: |
            binaerkodierter String der für alle Daten zwischen gueltigVon und gueltigBis angibt, ob der Zug an diesem Tag verkehrt.
            1=verkehrt, 0=verkehrt nicht, beginnend mit gueltigAb. '1111100' bedeutet, dass der Zug an 5 Tagen in Folge fährt und dann an 2 Tagen nicht.
          type: string
          example: '111110011111001111100'
        start:
          $ref: '#/components/schemas/Ort'
        ziel:
          $ref: '#/components/schemas/Ort'
        abfahrtSoll:
          description: 'Abfahrtszeit des Zuges (Zeitzone: Europe/Bern)'
          type: string
          pattern: '\d\d:\d\d'
        ankunftSoll:
          description: 'Ankunftszeit des Zuges (Zeitzone: Europe/Bern)'
          type: string
          pattern: '\d\d:\d\d'
        tagesdifferenz:
          description: Tagesdifferenz zwischen Ankunft und Abfahrt des Zuges
          type: integer
          format: int32
        maximalesBruttogewicht:
          description: maximales Bruttogewicht der Wagen in Tonnen
          type: integer
          format: int32
        maximaleLaengeWagen:
          description: maximale Gesamtlänge der Wagen in Meter
          type: integer
          format: int32
        vMax:
          description: maximale Geschwindigkeit
          type: integer
          format: int32
        planZwischenhalte:
          description: |
            Zusätzliche Betriebspunkte (Bahnhof) welche der Zug zwischen Start und Ziel anfährt und an welchen Wagen hinzugefügt oder weggenommen werden können.
          type: array
          items:
            $ref: '#/components/schemas/PlanZwischenhalt'
    Zugfahrt:
      required:
        - zugNummer
        - verkehrstag
        - start
        - ziel
        - abfahrtSoll
        - ankunftSoll
      type: object
      properties:
        zugnummer:
          description: Die Nummer des Zuges
          type: string
        verkehrsdatum:
          description: Verkehrsdatum der Zugfahrt
          type: string
          format: date
        start:
          $ref: '#/components/schemas/Ort'
        ziel:
          $ref: '#/components/schemas/Ort'
        abfahrtSoll:
          description: geplante Abfahrtszeit des Zuges
          type: string
          format: date-time
          example: '2022-08-23T13:13:13.1313'
        ankunftSoll:
          description: geplante Ankunftszeit des Zuges
          type: string
          format: date-time
          example: '2022-08-23T14:14:14.1414'
        maximalesBruttogewicht:
          description: maximales Bruttogewicht der Wagen in Tonnen
          type: integer
          format: int32
        maximaleLaengeWagen:
          description: maximale Gesamtlänge der Wagen in Meter
          type: integer
          format: int32
        vMax:
          description: maximale Geschwindigkeit
          type: integer
          format: int32
        zwischenhalte:
          description: |
            Zusätzliche Betriebspunkte (Bahnhof) welche der Zug zwischen Start und Ziel anfährt und an welchen Wagen hinzugefügt oder weggenommen werden können.
          type: array
          items:
            $ref: '#/components/schemas/Zwischenhalt'
    PlanZwischenhalt:
      description: |
        Zusätzlicher Betriebspunkt (Bahnhof) welchen der Zug zwischen Start und Ziel anfährt und an welchem Wagen hinzugefügt oder weggenommen werden können.
      type: object
      required:
        - betriebspunkt
      properties:
        betriebspunkt:
          $ref: '#/components/schemas/Ort'
        ankunftSoll:
          description: 'Ankunftszeit des Zuges am Zwischenhalt (Zeitzone: Europe/Bern)'
          type: string
          pattern: '\d\d:\d\d'
        tagesdifferenzAnkunftSoll:
          description: 'Tagesdifferenz zwischen Ankunft des Zuges im Zwischenhalt und Abfahrt des Zuges im Startbahnhof (Zeitzone: Europe/Bern)'
          type: integer
          format: int32
        abfahrtSoll:
          description: 'Abfahrtszeit des Zuges am Zwischenhalt (Zeitzone: Europe/Bern)'
          type: string
          pattern: '\d\d:\d\d'
        tagesdifferenzAbfahrtSoll:
          description: 'Tagesdifferenz zwischen Ankunft und Abfahrt des Zuges im Zwischenhalt (Zeitzone: Europe/Bern)'
          type: integer
          format: int32
        haltegruende:
          description: Codierung für die Haltegründe am Zwischenhalt
          type: array
          items:
            type: string
    Zwischenhalt:
      description: |
        Zusätzlicher Betriebspunkt (Bahnhof) welchen der Zug zwischen Start und Ziel anfährt und an welchem Wagen hinzugefügt oder weggenommen werden können.
      type: object
      required:
        - betriebspunkt
      properties:
        betriebspunkt:
          $ref: '#/components/schemas/Ort'
        ankunftSoll:
          description: geplante Abfahrtszeit des Zuges
          type: string
          format: date-time
          example: '2022-08-23T13:13:13.1313'
        abfahrtSoll:
          description: geplante Ankunftszeit des Zuges
          type: string
          format: date-time
          example: '2022-08-23T14:14:14.1414'
        haltegruende:
          description: Codierung für die Haltegründe am Zwischenhalt
          type: array
          items:
            type: string
    Plombierung:
      type: object
      required:
        - plombenNummer
      properties:
        plombenNummer:
          type: string
          maxLength: 35
          description: Falls Plombennummer nicht vorhanden, kann dieses Attribut der Leerstring sein
    Produkt:
      description: Ein Produkt ist ein von den verschiedenen Cargo Digital Produkte.
      required:
        - id
      properties:
        id:
          description: Eindeutiger Name eines Services
          type: string
          # Read Only
          enum:
            - "Check-in"
            - "FastTrack"
            - "Storage"
            - "Push"
            - "eBooking"
            - "Sense"
            - "eBookingWebhook"
        name:
          description: Bezeichnung des Service, welcher im Frontend angezeigt werden soll
          type: string
          # Read Only
        isAvailableForUser:
          description: Gibt an, ob das Produkt für den angemeldeten Benutzer verfügbar ist
          type: boolean
          # Read Only
        status:
          $ref: '#/components/schemas/Status'
          # Read Only
      example:
        id: "CargoCheck-in"
        name: Cargo Check-in
        isAvailableForUser: true
      type: object
    PushServiceETA:
      description: Eine Cargo Push Konfiguration für alle ETA Veränderungen aller Sendungen, die den aktuellen Benutzer betreffen.
      type: object
      allOf:
        - $ref: '#/components/schemas/UserSpecificService'
        - type: object
          properties:
            verteilerListe:
              description: Liste der Verteiler
              type: array
              items:
                $ref: '#/components/schemas/PushVerteilerETA'
            ort:
              $ref: '#/components/schemas/Ort'
    PushServiceSeal:
      description: Eine Cargo Push Konfiguration für Cargo Seal, die den aktuellen Benutzer betreffen.
      type: object
      allOf:
        - $ref: '#/components/schemas/UserSpecificService'
        - type: object
          properties:
            verteilerListe:
              description: Liste der Verteiler
              type: array
              items:
                $ref: '#/components/schemas/PushVerteilerSeal'
    PushVerteiler:
      description: Basiskonfiguration für einen Push Service
      type: object
      properties:
        sprache:
          $ref: '#/components/schemas/Sprache'
        eMailAdressen:
          description: Welche eMail Adresse sollen bei einem Ereignis angeschrieben werden?
          type: array
          items:
            type: string
            pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        mobilfunkRufnummern:
          description: |
            Welche Rufnummern sollen bei einem Ereignis per SMS informiert werden?

            Bei Mobilfunknummern sind momentan nur folgende Ländern zugelassen:
              - Schweiz
              - Deutschland
              - Frankreich
              - Italien
              - Österreich
              - Liechtenstein
          type: array
          items:
            type: string
            pattern: ^(\+|00)(33|39|41|423|43|49)(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|2[98654321]\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\d{4,20}$
      example:
        sprache: "de"
        eMailAdressen:
          - "dispo@fantasiaag.ch"
          - "bruno@paradiso.bern.com"
        mobilfunkRufnummern:
          - "+41792365487"
          - "003345621335"
    PushVerteilerETA:
      description: Konfiguration für einen ETA Push Service
      type: object
      allOf:
        - $ref: '#/components/schemas/PushVerteiler'
        - type: object
          properties:
            schwellwert:
              description: |
                Ab welcher ETA Veränderung (in Minuten) soll eine Information per Cargo Push gesendet werden? Es kann zwischen minimal 5 Minuten und maximal 7 Tagen konfiguriert werden.

                Benutzung:
                - **Für alle ETA Veränderungen**: Objekt ohne Angabe *betriebspunkt* und *ladestelle*
                - **Für alle ETA Veränderungen für Sendungen an einem Bahnhof**: Objekt **nur** mit Angabe *betriebspunkt*
                - **Für alle ETA Veränderungen für Sendungen an eine Ladestelle**: Objekt mit Angabe *betriebspunkt* **und** *ladestelle*
              type: integer
              format: int32
              minimum: 5
              maximum: 10080
            verfruehungPrognose:
              description: Definiert ob die Push Meldungen für Prognose-Verfrühungen verteilt werden müssen
              type: boolean
              default: true
    PushVerteilerSeal:
      description: Konfiguration für einen Cargo Seal Push Service
      type: object
      allOf:
        - $ref: '#/components/schemas/PushVerteiler'
        - type: object
          properties:
            geofences:
              type: array
              items:
                $ref: '#/components/schemas/Geofence'
    AllgemeineGeschaeftsbedingungen:
      description: Status der AGB Zustimmung
      type: object
      properties:
        aktuelleAllgemeineGeschaeftsbedingungenAkzeptiert:
          description: Aktuelle AGB Akzeptiert
          type: boolean
        timeStampZuletztAktzeptiert:
          description: Zeitstempel AGB zuletzt aktzeptiert
          type: string
          format: date-time
    SessionRecording:
      description: Status des Session-Recordings bei Benutzung der Website
      type: object
      properties:
        sessionRecordingAktiv:
          description: Session-Recording aktiviert
          type: boolean
        datumZuletztGeaendert:
          description: Zeitstempel Flag Session-Recording zuletzt geändert
          type: string
          format: date-time
    BenutzerProfilEinstellungen:
      description: Konfiguration des Benutzerprofils
      type: object
      properties:
        allgemeineGeschaeftsbedingungen:
          $ref: '#/components/schemas/AllgemeineGeschaeftsbedingungen'
        sessionRecording:
          $ref: '#/components/schemas/SessionRecording'
        benutzerEinstellung:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/BenutzerEinstellung'
    BenutzerEinstellung:
      type: object
      properties:
        timestampZuletztGeaendert:
          description: Zeitstempel zuletzt geändert (von Backend gemanaged)
          type: string
          format: date-time
          # Read Only
        wert:
          type: string
    Reservierung:
      description: |
        Eine Reservierung beschreibt (ausgehend von Vertragsoptionen) die Möglichkeiten, die SBB Cargo für einen Kunden an einem spezifischen Tag zum Transport eingeplant hat.
        Die kann zum Beispiel der Zug 1234 von Standort A zu Standort B mit 13 Wagen vom Typ XYZ sein.
        Dies ist noch keine Bestellung durch den Kunden, sondern wird im Planungsprozess bei SBB Cargo angelegt und ermöglicht dem Kunden eine bessere Verfügbarkeit.

        Bemerkung: `gewuenschteAbfahrtszeit`/`gewuenschteAnkunftszeit` beschreiben die Zeiten an der Ladestelle - `abfahrtsZeit`/`ankunftsZeit` hingegen beschreiben die Zeiten des Zuges am Bahnhof.
      type: object
      required:
        - nummer
        - datum
      properties:
        nummer:
          type: string
          # Read Only
        bezeichnung:
          type: string
          # Read Only
        datum:
          description: Datum für diese Bestellung
          type: string
          format: date
          # Read Only
        gewuenschteAbfahrtszeit:
          $ref: '#/components/schemas/Zeit'
          # Read only
        abfahrtsZeit:
          description: Gibt die Zugsabfahrtszeit am Versandbahnhof an
          type: string
          format: 'date-time'
          # Read Only
        ankunftsZeit:
          description: Gibt die Zugankunftszeit am Empfangsbahnhof an
          type: string
          format: 'date-time'
          # Read Only
        gewuenschteAnkunftszeit:
          $ref: '#/components/schemas/Zeit'
          # Read only
        versandort:
          $ref: '#/components/schemas/Ort'
          # Read Only
        zielort:
          $ref: '#/components/schemas/Ort'
          # Read Only
        vertragsvariante:
          $ref: '#/components/schemas/Vertragsvariante'
          # Read Only
        folgetransporte:
          description: Wenn zu der Reservierung weitere Transporte (z.B. ein Rücktransport der leeren Wagen) angedacht sind, sind hier die entsprechenden Resevierungen ersichtlich.
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/Reservierung'
    Sendung:
      deprecated: true
      description: cargo-api
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Sendungsnummer'
          # Read Only
        transportID:
          description: Der technische Schlüssel für eine Sendung
          type: integer
          format: int32
          # Read Only
          example: '878321'
        meldungsAbsender:
          $ref: '#/components/schemas/Partner'
        absender:
          $ref: '#/components/schemas/Partner'
        empfaenger:
          $ref: '#/components/schemas/Partner'
        frachtzahlerVersand:
          $ref: '#/components/schemas/Partner'
        frachtzahlerEmpfang:
          $ref: '#/components/schemas/Partner'
        bemerkungAbsender:
          type: string
          description: 'Eine optionaler, individueller Text vom Absender'
          example: 15 PL 401
        bemerkungEmpfaenger:
          type: string
          description: 'Eine optionaler, individueller Text für den Empfänger'
          example: Frischmilch 28.03 pasteurisiert
        versandort:
          $ref: '#/components/schemas/Ort'
        empfangsort:
          $ref: '#/components/schemas/Ort'
        versandZeitBahnhof:
          $ref: '#/components/schemas/Zeit'
        versandZeitLadestelle:
          $ref: '#/components/schemas/Zeit'
        empfangsZeitBahnhof:
          $ref: '#/components/schemas/Zeit'
        empfangsZeitBahnhofAlt:
          $ref: '#/components/schemas/Zeit'
        empfangsZeitLadestelle:
          $ref: '#/components/schemas/Zeit'
        empfangsZeitLadestelleAlt:
          $ref: '#/components/schemas/Zeit'
        checkInErfolgt:
          description: 'Gibt an, ob die Sendung eingecheckt wurde'
          type: boolean
          example: false
        letzteAenderung:
          description: Der Zeitpunkt der letzten Änderung der Sendung.
          type: string
          format: date-time
          # Read Only
          example: '2018-4-23T11:53:28.231Z'
        status:
          description: |
            * Vorbereitung: Sendungen, die keinen Check-in haben
            * Bereit: eingecheckte Sendungen, die bereit für den Transport sind (Sendung kann auch schon transportiert werden, da keine scharfe Trennung zwischen Status Bereit und Transport im betrieblichen Ablauf gemacht wird)
            * Transport: Sendungen in der Phase Transport
            * Angekommen: am Zielort angekommene Sendungen (Status hat nur kurze Zeit Bestand und wir nach einigen Stunden in die Abrechung/Archiv verschoben)
            * Abgeschlossen: abgeschlossene Sendungen (max. 14 Tage zurück)
          type: string
          # Read Only
          enum:
            - Vorbereitung
            - Bereit
            - Transport
            - Angekommen
            - Abgeschlossen
          example: Bereit
        befoerderungsart:
          $ref: '#/components/schemas/Befoerderungsart'
        checkInMoeglich:
          description: |
            Gibt an, ob für diese Sendung die Check-in Funktionalität möglich ist. Es sollte kein Check-in versucht werden.
          type: boolean
          # Read Only
          example: true
        checkInNichtMoeglichGrund:
          description: |
            Wenn kein Check-in für diese Sendung möglich ist, wird der Grund bei
            der Abfrage der Sendungsdetails mitgeteilt.
          type: string
          enum:
            - aussergewoehnlicheSendung
            - exportSendung
            - gefahrgutSendung
            - beiladSendung
            - selbstfahrendeFahrzeuge
            - sendungMitUnterwegsbahnhof
          # Read Only
          example: beiladSendung
        wagen:
          description: 'Alle Wagen, mit denen diese Sendung transportiert werden soll/wird.'
          type: array
          items:
            $ref: '#/components/schemas/Wagen'
        international:
          description: 'Gibt an, ob diese Sendung zum internationalen Verkehr gehört.'
          type: boolean
          example: true
        musterBeschreibung:
          description: Beschreibung für eine Mustersendung
          type: string
          example: PARADISO AG LEER
      example:
        transportID: 213
        bemerkungAbsender: Sendung Gate 4 für So
        bemerkungEmpfaenger: drittes Gleis aufstellen
        befoerderungsart: kvTrain
        checkInErfolgt: true
        letzteAenderung: '2017-1-11T13:57:24.382Z'
        checkInMoeglich: false
        checkInNichtMoeglichGrund: gefahrgutSendung
    Sendungsnummer:
      description: |
        Die Sendungsnummer stellt die eindeutige Identifikation der
        Vertragsleistung des Kunden mit SBB Cargo dar. Sie ist gleichzeitig auch
        die CIM Frachtbriefnummer.
      properties:
        uicLand:
          description: 'Der UIC-Ländercode, woher die Sendung stammt'
          type: integer
          format: int32
          pattern: '[0-9]{2}'
          # Read Only
        uicBahnhof:
          description: |
            Der Bahnhof bzw. sein UIC Bahnhofscode, von dem die Sendung
            versendet wird.
          type: integer
          format: int32
          pattern: '[0-9]{6}'
          # Read Only
        uicEVU:
          description: 'Die UIC Nummer für das EVU, welches die Sendung aufgegeben hat.'
          type: integer
          format: int32
          pattern: '[0-9]{2}'
          # Read Only
        laufnummer:
          description: |
            Eine automatisch generierte Nummer, die bei der Buchung vergeben
            wird. Die Nummer kann 5 Stellen für internationalen Verkehr und 9
            Stellen für nationalen Verkehr haben.
          type: integer
          format: int32
          pattern: '[0-9]{5,9}'
          # Read Only
      example:
        uicLand: 85
        uicBahnhof: 53090
        uicEVU: 2185
        laufnummer: 195787072
      type: object
    Sensor:
      description: Daten eines Sensoren
      type: object
      properties:
        system:
          # Read Only
          description: System von dem die Daten übernommen wurden
          type: string
          example: 'ThermoKing'
        wagennummer:
          # Read Only
          description: Wagennummer zu welcher der Sensor gehört
          type: string
          example: '218524710173'
        typ:
          $ref: '#/components/schemas/SensorenTyp'
        zeitpunkt:
          # Read Only
          description: Datum und Zeit wann den Wert übernommen worden ist
          type: string
          format: date-time
          example: '2021-06-10T13:21Z'
        temperaturDaten:
          # Dieses Objekt wird nur beim SensorenTyp temperatur gefüllt
          $ref: '#/components/schemas/SensorTemperatur'
    SensorTemperatur:
      description: Alle Temperatur-Sensoren relevanten Daten in einer strukturierten Form
      type: object
      properties:
        breitengrad:
          # Read Only
          type: string
          example: '47.53299'
        laengengrad:
          # Read Only
          type: string
          example: '7.653167'
        standortMetadaten:
          # Read Only
          type: string
          example: '0.67 km West of Carouge, Geneva, CHE'
        aktuelleGeschwindigkeit:
          # Read Only
          description: Geschwindigkeit [km/h]
          type: integer
          format: int32
          example: 102
        kuehlaggregatEin:
          # Read Only
          type: boolean
        fuellstandKraftstoff:
          # Read Only
          description: Füllstand Kraftstoff [l]
          type: integer
          format: int32
          example: 340
        einstellwertThermostat:
          # Read Only
          type: number
          format: double
          example: 14
        betriebsmodus:
          # Read Only
          type: string
          example: 'Mod Cool'
        temperaturfuehler1:
          # Read Only
          description: Aufzeichnungssensor 1 Raumluft Vorne (entspricht Return Air1) [°C]
          type: number
          format: double
          example: '14.41'
        temperaturfuehler2:
          # Read Only
          description: Aufzeichnungssensor 2 Raumluft Mitte [°C]
          type: number
          format: double
          example: '12.75'
        temperaturfuehler3:
          # Read Only
          description: Aufzeichnungssensor 3 Raumluft Hinten [°C]
          type: number
          format: double
          example: '13.25'
        aussentemperatur:
          # Read Only
          description: Aussentemperatur [°C]
          type: number
          format: double
          example: '27.63'
    SensorenTyp:
      type: string
      description: Beschreibt den Typ des Sensors.
      enum:
        # Zur Zeit nur 1 Typ, aber in Zukunft können zusätzlichen kommen
        - temperatur
    ServiceTyp:
      description: |
        Um welchen Typ von benutzerspezifischen Service handelt es sich?
      type: string
      enum:
        - pushETA
        - pushSeal
    Sprache:
      type: string
      enum:
        - de
        - fr
        - it
    Status:
      description: |
        Statuscode und die Beschreibung liefern detaillierte Informationen über den Betriebszustand des Produkts.
      properties:
        statusCode:
          description: |
            Statuscode:
            * Ok
            * teilweise Ok
            * nicht Ok
          type: string
          # Read Only
          enum:
            - ok
            - teilweiseOk
            - nichtOk
        beschreibung:
          description: Beschreibung des Betriebszustands (sprachabhängig)
          type: string
          # Read Only
      example:
        statusCode: 1
        beschreibung: Cargo Storage funktioniert einwandfrei
      type: object
    Stornobegruendung:
      description: Beschreibt die möglichen Begründungen für ein Storno
      type: object
      properties:
        beschreibung:
          description: Freitext um die Begründung zu beschreiben
          type: string
          # Read Only
        verursacher:
          type: string
          # Read Only
          enum:
            - auftragnehmer
            - auftraggeber
            - hoehereGewalt
        zeitpunkt:
          type: string
          format: 'date-time'
          # Read Only
    Stornokonditionen:
      description: Beschreibt die Stornokonditionen einer Bestellung
      type: object
      required:
        - stornoMoeglich
      properties:
        stornoMoeglich:
          description: Gibt ob das Storno möglich ist
          type: boolean
          # Read Only
        stornoNichtMoeglichGrund:
          description: Gibt den Grund an, falls kein Storno möglich ist.
          type: string
          # Read Only
        kostenpflichtig:
          type: boolean
          # Read Only
    Transportkettenglied:
      description: |
        Eine Teilstrecke der kompletten Transportkette, die jeweils von einem Wagen befahren wird. Es ist möglich, dass mehrere Wagen auf dem gleichen TK-Glied transportiert werden.
      properties:
        laufnummer:
          description: Die Position des TK-Glieds in der kompletten Transportkette
          type: integer
          format: int32
          pattern: "[0-9]+"
          # Read Only
        zug:
          $ref: "#/components/schemas/Zug"
          # Read Only
        versandort:
          $ref: "#/components/schemas/Ort"
          # Read Only
        empfangsort:
          $ref: "#/components/schemas/Ort"
          # Read Only
      example:
        laufnummer: 4
      type: object
    Umbestellungsanfrage:
      description: |
        Beinhaltet alle für die Umbestellung einer bestätigten Bestellung benötigten Informationen.
      type: object
      required:
        - folgeaktivitaet
        - auftraege
      properties:
        folgeaktivitaet:
          $ref: '#/components/schemas/UmbestellungFolgeaktivitaet'
        betroffeneAuftraege:
          type: array
          items:
            $ref: '#/components/schemas/UmbestellungsdatenAuftrag'
    UmbestellungAttribute:
      description: |
        Beinhaltet alle Attribute welche in einer Umbestellung geändert werden können.
      type: object
      properties:
        versandzeit:
          $ref: '#/components/schemas/Zeit'
        empfangszeit:
          $ref: '#/components/schemas/Zeit'
    UmbestellungFolgeaktivitaet:
      description: |
        Beschreibt die möglichen Folgeaktivitäten, wenn eine gewünschte Umbestellung durch SBB Cargo nicht vorgenommen werden kann.
        * Bestellung behalten: wenn die gewünschte Umbuchung nicht vorgenommen werden kann, wird die ursprünglich bestätigte Bestellung inkl. der geplanten Aufträge beibehalten.
        * Bestellung stornieren: wenn die gewünschte Umbuchung nicht vorgenommen werden kann, wird die ursprünglich bestätigte Bestellung inkl. aller Aufträge automatisch auf Grundlage der `Umbestellungsanfrage` storniert. Die Stornierung kann allenfalls kostenpflichtig sein.
      enum:
        - bestellungBehalten
        - bestellungStornieren
    UmbestellungsdatenAuftrag:
      description: |
        Beinhaltet die an einem Auftrag gewünschten Änderungen im Rahmen einer Umbestellung
      type: object
      required:
        - auftragsnummer
      properties:
        auftragsnummer:
          description: die Auftragsnummer des zu ändernden Auftrags in ORCA
          type: string
        gewuenscht:
          $ref: '#/components/schemas/UmbestellungAttribute'
        original:
          $ref: '#/components/schemas/UmbestellungAttribute'
        folgeaktivitaet:
          $ref: '#/components/schemas/UmbestellungFolgeaktivitaet'
          # Read Only
        umbestellungStatus:
          $ref: '#/components/schemas/UmbestellungStatus'
          # Read Only
        zeitpunktUmbestellung:
          description: Zeitpunkt zu welchem die Umbestellung abgeschlossen wurde
          type: string
          format: date-time
          example: '2017-04-05T09:15:55.232Z'
    UmbestellungStatus:
      description: |
        Beschreibt den aktuellen Zustand einer angefragten Umbestellung.
        * offen: die Umbestellungsanfrage wurde registriert und ist noch in Bearbeitung
        * erfolgreich: die gewünschte Umbestellung wurde erfolgreich durchgeführt. Die Bestellung wurde wie gewünscht verschoben.
        * abgelehnt: die gewünschte Umbestellung konnte nicht durchgeführt werden. Je nach gewählter Folgeaktivität wurde die vorherbestätigte Bestellung behalten oder storniert.
      enum:
        - offen
        - erfolgreich
        - abgelehnt
    UserSpecificService:
      description: Basisobjekt für eine Servicekonfiguration der Benutzer
      type: object
      required:
        - typ
        - aktiviert
      properties:
        id:
          description: Eindeutige Nummer der Servicekonfiguration
          type: string
          # Read Only
        typ:
          $ref: '#/components/schemas/ServiceTyp'
        aktiv:
          description: Ist der Service aktiviert?
          type: boolean
    Vertrag:
      description: |
        Informationen über einen Vertrag mit seinen Vertragsvarianten.

        Kann z.B. benutzt werden um eine Bestellung bei SBB Cargo auszulösen auf Basis einer bestimmten Vetragsvariante.
      type: object
      required:
        - nummer
        - auftraggeber
        - gueltigVon
        - varianten
      properties:
        gueltigVon:
          type: string
          format: date
        gueltigBis:
          type: string
          format: date
        nummer:
          type: string
          # Read Only
        bezeichnung:
          type: string
          maxLength: 50
          # Read Only
        kundenabkommen:
          type: string
          # Read Only
        auftraggeber:
          $ref: '#/components/schemas/Partner'
          # Read Only
        varianten:
          description: |
            Enthält spezifische Inhalte für einen Vetrag wie z.B. welche Konditionen auf welcher Relation gelten.
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/Vertragsvariante'
        istWlv:
          type: boolean
          description: |
            Ob es sich um einen WLV-Vertrag (Wagenladungsverkehr) handelt.
          # Read Only
        produkt:
          $ref: '#/components/schemas/VertraglichesProdukt'
          # Read Only
    Vertragsvariante:
      description: Vertragsdetails zum Beispiel für eine Relation mit spezifischer Ware
      type: object
      required:
        - vertragsnummer
        - bezeichnung
      properties:
        gueltigVon:
          type: string
          format: date
        gueltigBis:
          type: string
          format: date
        bezeichnung:
          description: Bezeichnung des Inhalts der Vertragsvariante
          maxLength: 50
          type: string
          # Read Only
        absender:
          description: |
            Ist diese Liste leer/nicht gesetzt, dürfen beliebige Partner aus den Stammdaten verwendet oder
            (bei internationalen Versandorten) Partner manuell erfasst (`KundenKontakt`) werden.
          type: array
          items:
            $ref: '#/components/schemas/Partner'
          # Read Only
        empfaenger:
          description: |
            Ist diese Liste leer/nicht gesetzt, dürfen beliebige Partner aus den Stammdaten verwendet oder
            (bei internationalen Empfangsorten) Partner manuell erfasst (`KundenKontakt`) werden.
          type: array
          items:
            $ref: '#/components/schemas/Partner'
          # Read Only
        erfasser:
          description: |
            Ist diese Liste leer/nicht gesetzt, dürfen beliebige Partner aus den Stammdaten verwendet werden.
          type: array
          items:
            $ref: '#/components/schemas/Partner'
          # Read Only
        frachtzahlerVersand:
          description: |
            Ist diese Liste leer/nicht gesetzt, darf _kein_ `frachtzahlerVersand` am Auftrag erfasst werden.
            In diesem Fall wird immer an den Auftraggeber oder den Frachtzahler Empfang (sofern vorhanden) verrechnet.
          type: array
          items:
            $ref: '#/components/schemas/Partner'
          # Read Only
        frachtzahlerEmpfang:
          description: |
            Ist diese Liste leer/nicht gesetzt, darf _kein_ `frachtzahlerEmpfang` am Auftrag erfasst werden.
            In diesem Fall wird immer an den Auftraggeber oder den Frachtzahler Versand (sofern vorhanden) verrechnet.
          type: array
          items:
            $ref: '#/components/schemas/Partner'
          # Read Only
        endkunde:
          description: |
            Ist diese Liste leer/nicht gesetzt, darf _kein_ `endkunde` am Auftrag erfasst werden.
          type: array
          items:
            $ref: '#/components/schemas/Partner'
          # Read Only
        beobachter:
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/Partner'
        versandsland:
          description: Dieses Attribut ist genau dann befüllt wenn es sich um eine "Fläche-*" Variante handelt.
          type: string
          pattern: '[0-9]{1,2}'
          # Read Only
        versandort:
          $ref: '#/components/schemas/Ort'
          # Read Only
        betrieblicherVersandort:
          $ref: '#/components/schemas/Ort'
          # Read Only
        empfangsland:
          description: Dieses Attribut ist genau dann befüllt wenn es sich um eine "*-Fläche" Variante handelt.
          type: string
          pattern: '[0-9]{1,2}'
          # Read Only
        empfangsort:
          $ref: '#/components/schemas/Ort'
          # Read Only
        betrieblicherEmpfangsort:
          $ref: '#/components/schemas/Ort'
          # Read Only
        vertragsnummer:
          description: Eine Referenz auf den Vertrag, aus dem diese Vertragsvariante stammt.
          type: string
          # Read Only
        vertragsbezeichnung:
          description: Eine Referenz auf die Bezeichnung des Vertrags, aus dem diese Vertragsvariante stammt.
          type: string
          maxLength: 50
          # Read Only
        frankatur:
          $ref: '#/components/schemas/Frankatur'
          # Read Only
        zollverfahren:
          type: string
          description: Zollverfahren-Code.
    VertraglichesProdukt:
      description: |
        Das SBB Cargo Produkt gemäss Vertrag
      type: object
      required:
        - code
        - bezeichnung
      properties:
        code:
          type: string
          description: Eindeutiger Code des vertraglichen Produkts
          example: "CE"
        bezeichnung:
          type: string
          description: Bezeichnung des vertraglichen Produkts
          example: "Cargo Express Schweiz"
        buchungsfrist:
          type: integer
          format: int32
          description: maximale Buchungsfrist in Tagen zwischen dem Bestelldatum und dem gewünschten Abgangsdatum des Auftrags (z.B. 1 = Folgetag)
    Frankatur:
      description: |
        Vermerk über die Zahlung der Kosten gemäss UICMerkblatt 920-7
      type: object
      required:
        - code
      properties:
        code:
          type: string
          pattern: '[0-9]{2}'
          description: Zahlungsvermerk nach CIM, aka Frankaturcode, z.B. 20 = Franko aller Kosten,  90 = Unfrei
        gebuehrenCodes:
          type: array
          description: Liste der Gebuehrencodes für die vom Absender übernommenen Gebühren, z.B. 41 = Gebühr für Erfüllung der Zollformalitäten in den Durchgangsländern;
          minimum: 0
          maximum: 5
          items:
            type: string
            pattern: '[0-9]{2}'
    FrankaturStammdaten:
      description: |
        Stammdaten über die Zahlung der Kosten gemäss UICMerkblatt 920-7
      type: object
      required:
        - code
        - mitGebuehren
      properties:
        code:
          type: string
          pattern: '[0-9]{2}'
          description: Zahlungsvermerk nach CIM, aka Frankaturcode, z.B. 20 = Franko aller Kosten,  90 = Unfrei
        mitGebuehren:
          type: boolean
          description: Dieses Feld definiert, ob Gebühren für diese Frankatur benötigt sind. Es definiert aber nicht welche.
        bezeichnung:
          type: string
    FrankaturGebuehrStammdaten:
      description: |
        Gebühr zu einer Frankatur
      type: object
      required:
        - code
      properties:
        code:
          type: string
          pattern: '[0-9]{2}'
          description: Gebührcode, z.B. 10 = Gebühr für Benutzung von Containern,  42 = Gebühr für Erfüllung der Zollvorschriften im Ankunftsland
        bezeichnung:
          type: string
    Wagen:
      properties:
        befoerderungsid:
          description: |
            Eindeutige Nummer eines Wagens innerhalb einer Sendung vom System vorgegeben
          type: string
          pattern: '[0-9]+'
        nummer:
          description: Die UIC Wagennummer
          type: string
          pattern: '[0-9]{12}'
        reihungsnummer:
          description: |
            Die Reihung eines Wagens innerhalb eines Transportes. Der Wagen kann
            an einem Unterwegsbahnhof eine neue Reihung erhalten. Die Reihung
            beginnt bei 0.
          type: integer
          format: int32
        laufnummer:
          description: Die Position des Wagens innerhalb der Sendung.
          type: integer
          format: int32
        waren:
          description: 'Alle Waren, die auf diesem Wagen transportiert werden.'
          type: array
          items:
            $ref: '#/components/schemas/Ware'
        transportkette:
          description: |
            Die Transportkette ist die Verbindung von allen Strecken (Bahnhof zu
            Bahnhof), die von einem Wagen während eines Transports befahren
            wird.
          type: array
          items:
            $ref: '#/components/schemas/Transportkettenglied'
        gewicht:
          description: Das Nettogewicht des Wagens mit allen geladenen Waren/Behältern in kg (d.h. Summe der Bruttogewichte aller Waren/Ladeeinheiten).
          type: integer
          format: int32
        tara:
          description: Das Eigengewicht des Wagens in kg
          type: integer
          format: int32
        gpsPosition:
          $ref: '#/components/schemas/Koordinaten'
      example:
        befoerderungsid: '733223'
        reihungsnummer: 0
        laufnummer: 2
        nummer: 018589037023
      type: object
    Wagenart:
      description: Art des Wagens je nach Wagenbesitzer. Je nach Wagenart fallen Kosten für die Wagenmiete an.
      type: string
      enum:
        - Privatwagen
        - Bahnwagen
        - BahnwagenKostenbefreit
    WagenEreignis:
      description: |
        Ein physisches oder abrechnungsrelevantes Ereignis innerhalb eines Zustellvorgangs, z.B. die Zustellung/Abholung des Wagens oder das Ende der Lagerperiode.
      type: object
      required:
        - zeit
        - ereignis
      properties:
        zeit:
          description: Zeitpunkt, zu dem ein Ereignis stattfindet, im Format ISO 8601.
          type: string
          format: date-time
          # Read Only
          example: '2007-12-24T18:21Z'
        ereignis:
          $ref: '#/components/schemas/ZustellvorgangStatus'
          # Read Only
    Wagenstandgeld:
      description: Liste der Wagenstandgeld-Ergebnisse für einen bestimmten Partner und Monat (Attribut `jahrMonat`), gruppiert nach Bahnhöfen.
      type: object
      required:
        - partnerid
        - jahrMonat
        - kosten
        - berechnungszeitpunkt
      properties:
        partnerid:
          description: die ZKK des Partners
          type: string
          pattern: '[0-9]{8}'
          # Read Only
        jahrMonat:
          $ref: '#/components/schemas/JahrMonat'
          # Read Only
        bonusMoeglich:
          description: |
            Ob für diesen Partner in diesem Monat bei der Berechnung eine Kompensation von Kosten durch Rückgabe von Wagen vor Ablauf der Lagerperiode berücksichtigt wurde (Bonus-/Malus-Rechnung, Produkt Cargo Storage Optimizer).
          type: boolean
          # Read Only
        kosten:
          description: Gesamtkosten, für diesen Partner an allen abgefragten Bahnhöfen, die (sicher) in diesem Monat abgerechnet werden.
          type: number
          format: double
          # Read Only
        offeneKosten:
          description: |
            Gesamtkosten, für diesen Partner an allen abgefragten Bahnhöfen welche (potentiell) in diesem Monat oder alternativ in folgenden Monaten abgerechnet werden.
            Wird nur für den aktuellen Monat befüllt.
          type: number
          format: double
          # Read Only
        berechnungszeitpunkt:
          description: Zeitpunkt, zu dem die Berechnung durchgeführt wurde, im Format ISO 8601.
          type: string
          format: date-time
          # Read Only
          example: '2007-12-24T18:21Z'
        wagenstandgeldProBahnhof:
          description: Liste von Objekten, die die monatlichen Kosten für einen bestimmten Bahnhof enthalten.
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/WagenstandgeldProBahnhof'
        wagenstandgeldAusBestellungLeerwagen:
          $ref: '#/components/schemas/WagenstandgeldAusBestellungLeerwagen'
    WagenstandgeldProBahnhof:
      description: Wagenstandgeld-Ergebnis für einen bestimmten Partner, Monat und Bahnhof, aufgeschlüsselt nach Wagen-Clustern.
      type: object
      required:
        - bahnhof
        - einheiten
        - kosten
      properties:
        bahnhof:
          $ref: '#/components/schemas/Ort'
          # Read Only
        einheiten:
          description: Einheiten, die in diesem Monat für diesen Partner an diesem Bahnhof angefallen sind
          type: number
          format: double
          # Read Only
        einheitenProCluster:
          description: Liste von KeyNumberValuePairs, wobei jedem Clusternamen die angefallenen Einheiten zugewiesen sind, z.B. 'Eanos' -> 527
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/KeyNumberValuePair'
        kosten:
          description: Kosten, die in diesem Monat für diesen Partner an diesem Bahnhof angefallen sind
          type: number
          format: double
          # Read Only
        offeneKosten:
          description: |
            Kosten, die für diesen Partner an diesem Bahnhof welche (potentiell) in diesem Monat oder alternativ in folgenden Monaten abgerechnet werden.
            Wird nur für den aktuellen Monat befüllt.
          type: number
          format: double
          # Read Only
        kostenProCluster:
          description: Liste von KeyNumberValuePairs, wobei jedem Clusternamen die angefallenen Kosten zugewiesen sind, z.B. 'Eanos' -> 1200.00
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/KeyNumberValuePair'
        zustellvorgaenge:
          description: |
            Liste der für diese Berechnung relevanten Zustellvorgänge, absteigend sortiert nach Beginn.
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/Zustellvorgang'
    WagenstandgeldAusBestellungLeerwagen:
      description: Wagenstandgeld-Ergebnis für aus Leerwagen, die ein bestimmter Partner in einem bestimmten Monat bestellt hat, aufsummiert über alle Bahnhöfe.
      type: object
      required:
        - einheiten
        - kosten
      properties:
        einheiten:
          description: Einheiten, die in diesem Monat für diesen Partner durch die Bestellung von Leerwagen angefallen sind
          type: number
          format: double
          # Read Only
        kosten:
          description: Kosten, die in diesem Monat für diesen Partner durch die Bestellung von Leerwagen angefallen sind
          type: number
          format: double
          # Read Only
        offeneKosten:
          description: |
            Gesamtkosten für diesen Partner die durch die Bestellung von Leerwagen (potentiell) in diesem Monat oder alternativ in folgenden Monaten abgerechnet werden.
            Wird nur für den aktuellen Monat befüllt.
          type: number
          format: double
          # Read Only
        zustellvorgaenge:
          description: |
            Liste der für diese Berechnung relevanten Zustellvorgänge, absteigend sortiert nach Beginn.
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/Zustellvorgang'
    ZustellvorgangStatus:
      type: string
      description: |
        Beschreibt den Zustand eines `Wagen` im Kontext des `Wagenstandgeld`.
        Im einfachsten Fall ist der Ablauf folgendermassen: `Zugestellt` > `Abholbereit` > `Abgeholt` > `Beendet`.
        * `Zugestellt` - Wagen befindet sich an der Ladestelle und kann durch den Kunden be-/entladen werden.
        * `Abholbereit` - Der Kunde hat angezeigt, dass der Wagen abgeholt werden kann. Der Wagen befindet sich normalerweise weiterhin an der Ladestelle. Ab dem darauffolgenden BZF fallen keine Gebühren mehr an.
        * `Abgeholt` - Der Wagen wurde von der Ladestelle abgeholt. Es fallen keine Gebühren mehr an.
        * `AbgestelltBetrieblich` - Abstellung aus betrieblichen Gründen (kostenfrei).
        * `AbgestelltKommerziell` - Abstellung auf Kundenwunsch und aus vom Kunden zu verantwortenden Gründen (kostenpflichtig).
        * `Beendet` - Der Zustellvorgang ist endgültig beendet.
      enum:
        - Zugestellt
        - Abholbereit
        - Abgeholt
        - AbgestelltBetrieblich
        - AbgestelltKommerziell
        - Beendet
    Ware:
      properties:
        laufnummer:
          description: Die Position der Ware innerhalb der Sendung.
          type: integer
          format: int32
        nummer:
          description: Der NHM Warencode
          type: string
          pattern: '[0-9]{6}'
        beschreibung:
          description: Die NHM Warenbezeichnung in Prosa
          type: string
        absenderBeschreibung:
          description: Eine vom Absender individuell erstellte Beschreibung der Ware
          type: string
        gewicht:
          description: Das effektive Gewicht der Ware in kg
          type: integer
          format: int32
        gewichtFrachtpflichtig:
          description: Das frachtpflichtige Gewicht der Ware in kg
          type: integer
          format: int32
        behaelter:
          $ref: '#/components/schemas/Behaelter'
        wareInBehaelter:
          description: |
            Wenn eine Ware auf mehrere Behälter aufgeteilt wird, ist hier die
            Laufnummer des Behälters für diesen Teil

            der Ware vorhanden.
          type: integer
          format: int32
      example:
        nummer: '03074210'
        bezeichnung: Leer Kisten Typs H ohne Gut
        gewicht: 4800
        gewichtFrachtpflichtig: 5000
      type: object
    WagenMetadatenResponse:
      description: |
        Liste der Wagenmetadaten die durch die letzten 4 Wagenummern Ziffern abgefragt worden sind.
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          required:
            - zuletzt
            - weitere
          properties:
            zuletzt:
              description: |
                Zuletzt kundenspezifisch verwendete Wagennummern (maximal 10). Sortierung: Aktuellste zuerst.
              type: array
              items:
                $ref: '#/components/schemas/WagenMetadaten'
            weitere:
              description: restlichen Wagennummer aus Stammdaten
              type: array
              items:
                $ref: '#/components/schemas/WagenMetadaten'
    WagenMetadaten:
      description: |
        Metadaten eines Wagens, inkl. Wagennummer, Max Ladegewicht, Anzahl Achsen, usw.
        Wagentyp ist nur im Ausnahmefällen nicht required (z.B. WagenMetadaten aus externen/internationalen Schnittstellen)
      type: object
      required:
        - wagennummer
        - anzahlAchsen
        - eigenGewicht
      properties:
        wagennummer:
          description: Die UIC Wagennummer
          type: string
          pattern: '[0-9]{12}'
          # Read Only
        wagentyp:
          description: Typ des Wagens. Dieses Feld ist nur im Ausnahmefällen nicht required (z.B. WagenMetadaten aus externen/internationalen Schnittstellen).
          type: string
          # Read Only
        wagengattung:
          description: Gattung des Wagens (z.B. Habis, Falls, usw.)
          type: string
          # Read Only
        eigengewicht:
          description: Eigengewicht in kg
          type: integer
          format: int32
          # Read Only
        anzahlAchsen:
          type: integer
          format: int32
          # Read Only
        wagenart:
          $ref: '#/components/schemas/Wagenart'
          # Read Only
        vMaxLeer:
          description: Maximale Geschwindigkeit (leer) als km/h
          type: integer
          format: int32
          # Read Only
        vMaxBeladen:
          description: Maximale Geschwindigkeit (beladen) als km/h
          type: integer
          format: int32
          # Read Only
    WagenTyp:
      description: Informationen bezüglich dem Typ des Wagens
      type: object
      required:
        - code
        - bezeichnung
      properties:
        code:
          type: string
          # Read Only
        bezeichnung:
          type: string
          # Read Only
        beschreibungDE:
          type: string
          # Read Only
        beschreibungFR:
          type: string
          # Read Only
        beschreibungIT:
          type: string
          # Read Only
        anzahlAchsen:
          type: integer
          format: int32
          # Read Only
        laengeUeberPuffer:
          description: Laenge über Puffer des Wagen in Meter
          type: number
          format: float
          # Read Only
        gewichtTara:
          type: integer
          format: int32
          # Read Only
        vMax:
          description: maximale Geschwindigkeit in km/h
          type: number
          format: float
          # Read Only
        bestellbarLeerwagenbestellung:
          description: Gibt an, ob der Wagentyp für Leerwagenbestellungen bestellt werden darf.
          type: boolean
          example: false
          # Read Only
        wagengattung:
          description: Gattung des Wagens (z.B. Habis, Falls, usw.)
          type: string
          # Read Only
    Zollverfahren:
      description: Zollverfahren
      type: object
      properties:
        code:
          type: string
          description: Code des Zollverfahren
        bezeichnung:
          type: string
          description: Bezeichnung des Zollverfahren
        hinweisReferenzen:
          type: string
          description: Hinweistext bzgl. der Referenzen
    Zeit:
      description: |
        Beschreibt einen Zeitpunkt oder ein Zeitfenster (kann ein Bedienzeitfenster (BZF) sein).
        * Ist ein Zeitpunkt gemeint, werden `beginn` und `ende` eingetragen, wobei `beginn` und `ende` gleich sind. (geschlossenes Intervall [x,y], wobei x=y)
        * Ist ein Zeitfenster gemeint, wird `beginn` und `ende` eingetragen. (geschlossenes Intervall [x,y], wobei x<y)
        * Ist ein Zeitraum gemeint (z.B. frühestens ab, spätestens um), wird nur eines der beiden Felder gefüllt. (unbeschränktes Intervall [x,&infin;[, oder ]&infin;,y])
      properties:
        beginn:
          description: Startzeitpunkt
          type: string
          format: date-time
          example: '2017-04-05T09:15:55.232Z'
        ende:
          description: Endzeitpunkt
          type: string
          format: date-time
          example: '2017-04-05T12:05:23.434Z'
      type: object
    ZeitPlanung:
      description: |
        Dieses Objekt enthält die verschiedenen bekannten Zeiten für einen Auftrag oder eine Auftragsposition.
        * `gewuenscht`: die vom Kunden gewünschte Ausführungszeit.
        * `original`: die von SBB Cargo original geplante Zeit.
        * `aktuell`: die aktuell geplante Zeit. Initial entspricht die aktuell geplante Zeit der original geplanten Zeit. Wenn die Planung angepasst werden muss, 
          kann die aktuelle geplante Zeit von der original geplanten Zeit abweichen. Wenn ein Ereignis eintritt, das eine Prognose verunmöglicht, kann die aktuelle Planung auch 
          nicht definiert sein. Falls die original geplante Zeit definiert ist und die aktuell geplante Zeit fehlt, handelt es sich um eine "unbekannte Abfahrtszeit" 
          bzw. "unbekannte Ankunftszeit".
        * `ist`: der Zeitpunkt wann der Auftrag oder die Auftragsposition begonnen/erledigt wurde. (wird erst geliefert wenn der Zug/Wagen am Bahnhof abgefahren/angekommen ist)
      type: object
      properties:
        gewuenscht:
          $ref: '#/components/schemas/Zeit'
        original:
          $ref: '#/components/schemas/Zeit'
        aktuell:
          $ref: '#/components/schemas/Zeit'
        ist:
          type: string
          format: date-time
          example: '2017-04-05T12:05:23.434Z'
    Zug:
      description: |
        Ein Zug ist eine Kombination aus Wagen und mindestens einem Triebfahrzeug, die an einem bestimmten Tag von einem Abgangsbahnhof zu einem Empfangsbahnhof fährt.
      required:
        - zugnummer
        - verkehrsDatum
      properties:
        zugnummer:
          description: Eine Zugnummer setzt sich aus einer festen Kennung und einer Variante des Zuglaufes zusammen
          type: string
          maxLength: 10
          # Read Only
        verkehrsDatum:
          description: Bietet zusammen mit der Zugnummer ein eindeutiges Identifizierungsmerkmal für einen Zug
          type: string
          format: date
          # Read Only
      example:
        zugnummer: 65211-007
        verkehrsDatum: '2017-04-05'
      type: object
    Transportplanabschnitt:
      description: |
        Ein Transportplanabschnitt bildet einen einzelnen Zug eines Transportplanes einer Auftragsposition ab und beinhaltet alle relevanten Daten zu diesem Zug sowie zur Position des Wagens der Auftragsposition im Zug.

        Beim Bestellen einer Transportleistung gibt der Kunde über Cargo Digital die Soll-Ladungen (Ladeeinheiten / Gutarten) mit. Nachdem die Bestellung durch den Kunden gesendet wurde, wird sie durch SBB Cargo geprüft. Die Daten können von den ursprünglich geplanten SOLL-Daten abweichen (z.B. Abwiegen, usw), und diese IST-Daten sind hier zu finden.

        Die Reihenfolge der verschiedenen Transportplanabschnitte kann aus der Abfahrtszeit `abfahrtSoll` bestimmt werden.
      type: object
      required:
        - zug
        - start
        - ziel
      properties:
        zug:
          $ref: '#/components/schemas/Zug'
          # Read Only
        start:
          $ref: '#/components/schemas/Ort'
          # Read Only
        ziel:
          $ref: '#/components/schemas/Ort'
          # Read Only
        wagenPos:
          description: Position im Zug (exklusiv Triebfahrzeug/Lokomotive)
          type: integer
          format: int32
          # Read Only
        abfahrtszeit:
          deprecated: true
          description: |
            Die fahrplanmässige Abfahrtszeit am Start des Transportplanabschnitts.

            DEPRECATED per v13.2: Dieses Attribut ist veraltet und wird durch `abfahrtSoll` ersetzt.
          type: string
          format: 'date-time'
          # Read Only
        ankunftszeit:
          deprecated: true
          description: |
            Die fahrplanmässige Ankunftszeit am Ziel des Transportplanabschnitts.

            DEPRECATED per v13.2: Dieses Attribut ist veraltet und wird durch `ankunftSoll` ersetzt.
          type: string
          format: 'date-time'
          # Read Only
        abfahrtSoll:
          description: Die fahrplanmässige Abfahrtszeit am Start des Transportplanabschnitts.
          type: string
          format: date-time
        ankunftSoll:
          description: Die fahrplanmässige Ankunftszeit am Ziel des Transportplanabschnitts.
          type: string
          format: date-time
        abfahrtPrognose:
          description: Die voraussichtliche Abfahrtszeit am Start des Transportplanabschnitts.
          type: string
          format: date-time
        ankunftPrognose:
          description: Die voraussichtliche Ankunftszeit am Ziel des Transportplanabschnitts.
          type: string
          format: date-time
        abfahrtIst:
          description: Die effektive Abfahrtszeit am Start des Transportplanabschnitts.
          type: string
          format: date-time
        ankunftIst:
          description: Die effektive Ankunftszeit am Ziel des Transportplanabschnitts.
          type: string
          format: date-time
        beladen:
          type: boolean
          # Read Only
        nhmCodeLadezustand:
          description: NHM-Codierung des Ladezustandes des Wagens
          type: string
          # Read Only
        gewichtNetto:
          description: Gewicht der gesamten Ladung auf dem Wagen in kg
          type: integer
          format: int32
          # Read Only
        gewichtBrutto:
          description: Bruttogewicht des gesamten Wagens in kg
          type: integer
          format: int32
          # Read Only
        gewichtTara:
          description: Taragewicht des Wagens in kg
          type: integer
          format: int32
          # Read Only
        gutarten:
          description: Alle Gutarten, die auf diesem Wagen transportiert werden. Darf bei Transport von Ladeeinheiten nicht verwendet werden.
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/LadungGutart'
        ladeeinheiten:
          description: Alle Ladeeinheiten, die auf diesem Wagen transportiert werden.
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/Ladeeinheit'
        plomben:
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/Plombierung'
          maxItems: 10
    ZugZubringer:
      type: object
      description: |
        Zubringer Zug für einen internationalen Auftrag (Import).
      properties:
        zugNummer:
          type: string
        endbahnhofZubringerZug:
          $ref: '#/components/schemas/Ort'
        geplanteAnkunftzeit:
          type: string
          format: 'date-time'
          description: Geplante Ankunftzeit des Zubringer Zuges
    ZugNachfolger:
      type: object
      description: |
        Nachfolger Zug für einen internationalen Auftrag (Export).
      properties:
        zugNummer:
          type: string
        startbahnhofNachfolgerZug:
          $ref: '#/components/schemas/Ort'
        geplanteAbgangszeit:
          type: string
          format: 'date-time'
          description: Geplante Abgangszeit des Zubringer Zuges
    Zuglauf:
      description: |
        Ein Zuglauf ist eine Liste von Betriebspunkten, die der Zug durchfährt. Dabei kann es verschiedene Ansichten geben wie z.B. die geplante Route (Plan) oder die bisher befahrenen Betriebspunkte (Ist).
      properties:
        zug:
          $ref: '#/components/schemas/Zug'
          # Read Only
        ist:
          description: 'Eine Liste der Betriebspunkte, die der Zug bisher durchfahren hat.'
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/Ort'
        plan:
          description: 'Eine Liste der Betriebspunkte, die der Zug durchfahren sollte.'
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/Ort'
      type: object
    Zustellvorgang:
      description: |
        Beschreibt die Ereignisse von der Zustellung oder kommerziellen Abstellung eines Wagens bis zur Abgangskontrolle oder betrieblichen Abstellung.
        `kundenAbrechnungsMonat`: Monat in welchem die Kosten dem Kunden in Rechnung gestellt werden.
      type: object
      required:
        - id
        - wagennummer
        - beginn
        - partnerid
        - ort
        - wagenart
        - privatgleis
        - kostenpflichtig
      properties:
        id:
          description: eine technische ID, die zur Identifikation des Zustellvorgangs verwendet wird
          type: string
          # Read Only
        wagennummer:
          description: die 12-stellige UIC-Wagennummer
          type: string
          pattern: '[0-9]{12}'
          # Read Only
        zasaAbrechnung:
          type: boolean
          # Read Only
        beginn:
          description: |
            Zeitpunkt, zu dem der Zustellvorgang beginnt, also Zeitpunkt der Zustellung bzw. kommerziellen Abstellung des Wagens im Format
            ISO 8601.
          type: string
          format: date-time
          # Read Only
          example: '2007-12-24T18:21Z'
        ende:
          description: |
            Zeitpunkt, zu dem der Zustellvorgang endgültig endet, im Format ISO 8601. Dieses Feld ist nur dann befüllt, wenn der Wagen am Bahnhof
            abgegangen ist.
          type: string
          format: date-time
          # Read Only
          example: '2007-12-24T18:21Z'
        beginnLadefrist:
          description: |
            Zeitpunkt, zu dem die Ladefrist begonnen hat, im Format ISO 8601.
          type: string
          format: date-time
          # Read Only
          example: '2007-12-24T18:21Z'
        endeLadefrist:
          description: |
            Zeitpunkt, zu dem die Ladefrist endet, im Format ISO 8601.
          type: string
          format: date-time
          # Read Only
          example: '2007-12-24T18:21Z'
        endeKostenrelevanteStandzeit:
          description: |
            Zeitpunkt, ab dem keine weiteren Kosten mehr anfallen, im Format ISO 8601. Dieser Zeitpunkt ist der Beginn des Bedienzeitfensters,
            das für die Rückgabe des Wagens massgeblich ist. Dieses Feld ist nur dann befüllt, wenn der Wagen schon zurückgegeben wurde.
          type: string
          format: date-time
          # Read Only
          example: '2007-12-24T18:21Z'
        beginnLangsteherTarif:
          description: |
            Zeitpunkt, zu dem der Langsteher-Tarif beginnt, im Format ISO 8601.
          type: string
          format: date-time
          # Read Only
          example: '2039-12-24T18:21Z'
        naechsteMoeglicheRueckgabe:
          description: |
            Nur für noch laufende Zustellvorgänge: Beginn des nächsten Bedienzeitfensters, zu dem eine Rückgabe des Wagens möglich ist, im Format
            ISO 8601. Für bereits abgeschlossene Zustellvorgänge ist dieses Feld nicht befüllt.
          type: string
          format: date-time
          # Read Only
          example: '2007-12-24T18:21Z'
        partnerid:
          description: die ZKK des Partners
          type: string
          pattern: '[0-9]{8}'
          # Read Only
        partneridBestellerLeerwagen:
          description: |
            Falls es sich um eine Leerwagenbestellung handelt und der Wagen von einem anderen Partner bestellt wurde: die ZKK dieses Partners.
            In diesem Fall übernimmt dieser Partner die Kosten für den Zustellvorgang.
          type: integer
          format: int32
          pattern: '[0-9]{8}'
          # Read Only
        wagentyp:
          description: der Name des Wagentyps
          type: string
          example: 'Eanos'
          # Read Only
        cluster:
          description: der Name des Wagenclusters, aus dem dieser Wagen stammt
          type: string
          # Read Only
        wagenart:
          $ref: '#/components/schemas/Wagenart'
          # Read Only
        privatgleis:
          description: Ob der Wagen auf einem Privatgleis zugestellt wurde. Falls nicht, fallen Kosten für die Gleismiete an.
          type: boolean
          # Read Only
        kostenpflichtig:
          description: Ob für diesen Zustellvorgang grundsätzlich (nach Ablauf der Ladefrist) Kosten anfallen können. Das ist nicht der Fall, wenn ein Privatwagen auf einem Privatgleis steht.
          type: boolean
          # Read Only
        ort:
          $ref: '#/components/schemas/Ort'
          # Read Only
        status:
          $ref: '#/components/schemas/ZustellvorgangStatus'
          # Read Only
        beladen:
          description: Ob der Wagen beladen ist.
          type: boolean
          # Read Only
        langsteher:
          description: |
            Ob es sich bei diesem Zustellvorgang um einen Langsteher handelt. In der Langsteher-Phase ist die Wagenmiete deutlich höher.
          type: boolean
          # Read Only
        einheiten:
          description: Einheiten, die insgesamt (für Wagen und Gleis) in diesem Zustellvorgang anfallen.
          type: number
          format: double
          # Read Only
        einheitenProMonat:
          description: |
            Einheiten (für Wagen und Gleis), aufgeteilt auf Monate. Die Summe der monatlichen Werte ergibt den Wert einheiten. Beispiel für ein
            KeyNumberValuePair aus der zurückgegebenen Liste: Key '2019-05' -> Value 1200.0
            Es werden genau die Monate übermittelt für welche Einheiten anfallen.
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/KeyNumberValuePair'
        kosten:
          description: |
            Kosten in CHF, die insgesamt (für Wagen und Gleis) für diesem Zustellvorgang anfallen. Eine eventuelle Kompensation durch
            Bonus-/Malus-Berechnung innerhalb des Wagen-Clusters ist hier noch nicht berücksichtigt.
          type: number
          format: double
          # Read Only
        kostenProMonat:
          description: |
            Kosten in CHF (für Wagen und Gleis), aufgeteilt auf Monate. Die Summe der monatlichen Werte ergibt den Wert kosten.
            Es werden genau die Monate übermittelt für welche Kosten anfallen (oder angefallen waren, aber korrigiert wurden).
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/KeyNumberValuePair'
        kundenAbrechnungsMonat:
          $ref: '#/components/schemas/JahrMonat'
          # Read Only
        details:
          $ref: '#/components/schemas/ZustellvorgangDetails'
          # Read Only
        korrektur:
          $ref: '#/components/schemas/ZustellvorgangKorrektur'
          # Read Only
        abholbereitKundeGesendet:
          description: Zeigt an, ob der Kunde für diesen Zustellvorgang die Abholbereitschaft beladen oder leer bereits gesendet hat.
          type: boolean
          # Read Only
        zeitpunktAbholbereitKundeGesendet:
          description: Zeitpunkt für welchen der Wagen abholbereit ist gemäss Meldung des Kunden. Gefüllt wenn abholbereitKundeGesendet true ist.
          type: string
          format: date-time
          example: '2022-07-18T12:28:28.231Z'
          # Read Only
    ZustellvorgangDetails:
      description: |
        Details zu diesem Zustellvorgang. Wenn eine Liste von Zustellvorgängen über den Endpoint /wagenstandgeld abgerufen wird, lässt sich über einen
        Request Parameter steuern, ob dieses Attribut befüllt sein soll.
      type: object
      required:
        - wiederbelad
      properties:
        wiederbelad:
          description: |
            Ob es sich bei diesem Zustellvorgang um einen Wiederbelad (Entladung und Beladung im gleichen Zustellvorgang) handelt. Bei
            einem Wiederbelad wird eine doppelt so lange Freiperiode angesetzt.
          type: boolean
          # Read Only
        dauerFreiperiodeInStunden:
          description: Dauer der Freiperiode in Stunden. Während dieser Zeit fallen keine Kosten an.
          type: integer
          format: int32
          # Read Only
        einheitenWagen:
          description: Einheiten, die für den Wagen in diesem Zustellvorgang anfallen. Bei Rückgabe vor Ende der Freiperiode ist dieser Wert negativ.
          type: number
          format: double
          # Read Only
        einheitenWagenProMonat:
          description: Einheiten für den Wagen, aufgeteilt auf Monate. Die Summe der monatlichen Werte ergibt den Wert einheitenWagen.
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/KeyNumberValuePair'
        einheitenGleis:
          description: Einheiten, die für das Gleis in diesem Zustellvorgang anfallen. Steht der Wagen auf einem Privatgleis, ist dieser Wert 0.
          type: number
          format: double
          # Read Only
        einheitenGleisProMonat:
          description: Einheiten für das Gleis, aufgeteilt auf Monate. Die Summe der monatlichen Werte ergibt den Wert einheitenGleis.
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/KeyNumberValuePair'
        kostenWagen:
          description: Kosten, die für den Wagen in diesem Zustellvorgang anfallen. Bei Rückgabe vor Ende der Freiperiode ist dieser Wert negativ.
          type: number
          format: double
          # Read Only
        kostenWagenProMonat:
          description: |
            Kosten für den Wagen, aufgeteilt auf Monate. Die Summe der monatlichen Werte ergibt den Wert kostenWagen.
            Es werden genau die Monate übermittelt für welche Kosten anfallen (oder angefallen waren, aber korrigiert wurden).
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/KeyNumberValuePair'
        kostenGleis:
          description: Kosten, die für das Gleis in diesem Zustellvorgang anfallen. Steht der Wagen auf einem Privatgleis, ist dieser Wert 0.
          type: number
          format: double
          # Read Only
        kostenGleisProMonat:
          description: |
            Kosten für das Gleis, aufgeteilt auf Monate. Die Summe der monatlichen Werte ergibt den Wert kostenGleis.
            Es werden genau die Monate übermittelt für welche Kosten anfallen (oder angefallen waren, aber korrigiert wurden).
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/KeyNumberValuePair'
        anAbrechnungsSystemUebermittelt:
          description: Ob die Kosten an das Abrechnungssystem übermittelt wurden.
          type: boolean
        wagenEreignisse:
          description: Liste der für diesen Zustellvorgang relevanten Ereignisse in chronologischer Reihenfolge
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/WagenEreignis'
        berechnungsgrundlage:
          description: Liste von Parametern, die in die Berechnung dieses Zustellvorgangs eingingen.
          type: array
          # Read Only
          items:
            $ref: '#/components/schemas/BerechnungsgrundlageParameter'
        herkunft:
          $ref: '#/components/schemas/Ort'
          # Read Only
        bestimmung:
          $ref: '#/components/schemas/Ort'
          # Read Only
        beladenEingang:
          description: Ob der Wagen beladen zugestellt wurde.
          type: boolean
          # Read Only
        beladenAusgang:
          description: Ob der Wagen abhobereit gemeldet wurde oder abgeholt oder abgegangen ist.
          type: boolean
          # Read Only
        transportId:
          description: Transport-ID der zugehörigen Sendung
          type: integer
          format: int32
        leerwagenBestellung:
          $ref: '#/components/schemas/LeerwagenbestellungReferenzMitZustellung'
    Webhook:
      description: |
        Beschreibt einen Webhook für ein Cargo Digital Objekt. An die hier definierte URL werden alle in der API definierten Änderungen an dieses Objekt gemeldet, an denen der Ersteller des Webhooks in irgendeiner Form beteiligt ist (als Versender, Empfänger, Meldungsabsender oder Frachtzahler Versand/Empfang).
      type: object
      required:
        - callbackUrl
      properties:
        id:
          description: |
            Identifiziert dieses Webhook-Objekt. Diese ID wird zum Ändern oder Löschen des Webhooks verwendet. Da die ID von SBB Cargo erzeugt wird, braucht sie beim Erstellen des Webhooks nicht übergeben zu werden.
          type: string
          # Read Only
        typ:
          description: Definiert den Typ des Webhooks (entspricht eine HTTP Ressource)
          type: string
          enum:
            - auftrag
            - bestellung
            - sendung
            - sensor
          # Read Only            
        callbackUrl:
          description: Die HTTPS-URL, an die Nachrichten des gewünschten Typs geschickt werden.
          type: string
          format: uri
        signaturSchluessel:
          description: |
            Ein beliebiger String, der als Schlüssel für die Erstellung einer Signatur der Requests verwendet wird, die an diesen Webhook geschickt
            werden. Diese Signatur ist ein HMAC SHA-1 Hash, der aus dem Request Body mit dem hier angegebenen Schlüssel berechnet wird. Die Signatur
            wird bei allen Requests im Header X-Cargo-Signature mitgeschickt. Indem der Besitzer des Webhooks die Signatur aus dem Request Body und
            dem Schlüssel selbst ermittelt und mit der erhaltenen Signatur vergleicht, kann er überprüfen, ob das an den Webhook gesandte Request von
            SBB Cargo stammt.
            Dieses Attribut ist optional. Wenn es nicht existiert, wird in den Requests an diesen Webhook keine Signatur mitgeschickt.
          type: string
        apiVersion:
          description: Die API Major-Version mit welcher dieser Webhook konfiguriert wurde. Die Daten die mit diesem Webhook geliefert werden entsprechen der Definition dieser API Major-Version.
          type: string
          # Read Only
          example: 'v9'
    BestellungCallbackTyp:
      type: string
      description: |
        Beschreibt den Typ der Änderung auf Bestellungsebene.
        Für Statustyp status: Wenn die Bestellung gelöscht wird, wird das Objekt Bestellung als Body im Callback geliefert, der Bestellungsstatus ist in diesem Fall aber null.
      enum:
        - status
    AuftragCallbackTyp:
      type: string
      description: |
        Beschreibt den Typ der Änderung auf Auftragsebene.
        * `status` - Wird geschickt, sobald der Status des Auftrags sich geändert hat.
        * `eta` - Eine ETA Veränderung ist definiert bei einer Änderung des Objekts Auftrag.empfangszeit.aktuell mit einer minimalen Abweichung von 15 Minuten.
        * `zugplanung` - Wird geschickt, wenn der Transportplan definiert oder aktualisiert wird.
        * `nichtDurchfuehrbar` - Der Auftrag ist 60 Minuten vor der Abfahrt nicht durchführbar, bitte der Auftrag vervollständigen/korrigieren und als erfassungAbgeschlossen melden.
        * `tk` - Die Transportkette wurde geändert ohne unbedingt eine ETA Änderung zu verursachen. Wenn sich TK und ETA gleichzeitig ändert, dann werden (unabhängig von einander) Webhooks sowohl vom Typ `tk` als auch vom Typ `eta` ausgelöst.
        * `meldepunkt` - Wird geschickt, wenn die Ist-Zeit (Ankunft oder Abfahrt) gesetzt wurde.
        * `erfassungAbgeschlossen` - Wird geschickt, sobald sich das Attribut 'erfassungAbgeschlossen' auf dem Auftrag geändert hat.
      enum:
        - status
        - eta
        - zugplanung
        - nichtDurchfuehrbar
        - tk
        - meldepunkt
        - erfassungAbgeschlossen
    SendungCallbackTyp:
      type: string
      description: |
        Beschreibt den Typ der Änderung auf Sendungsebene.
        Eine ETA Veränderung ist definiert bei einer Änderung des Bedienzeitfenster im Objekt Sendung.
        Eine TK Veränderung ist definiert bei einer Änderung eines beliebigen Zuges der Transportkette.
      enum:
        - status
        - eta
        - tk
    EiuCode:
      description: |
        Stammdatenobjekt für Eisenbahninfrastrukturunternehmung
      type: object
      required:
        - eiuCode
      properties:
        eiuCode:
          type: string
          # Read Only
          pattern: '[0-9]{4}'
          description: EIU-Code
        name:
          type: string
          # Read Only
          description: Name der Eisenbahninfrastrukturunternehmung
    AsNummerStammdaten:
      description: |
        Stammdatenobjekt für Bewillgungsnummern (AS Nummer) für die Erfassung von Aussergwöhnlichen Sendungen
      type: object
      required:
        - uicLand
        - asNummer
        - datumGueltigVon
        - datumGueltigBis
      allOf:
        - $ref: '#/components/schemas/AsNummer'
        - type: object
          properties:
            datumGueltigVon:
              type: string
              # Read Only
              format: date
            datumGueltigBis:
              type: string
              # Read Only
              format: date
            bemerkung:
              type: string
              # Read Only
    IsoLand:
      description: Ein im System hinterlegtes politisches Land.
      type: object
      required:
        - isoCode2
        - bezeichnung
      properties:
        isoCode2:
          description: aus zwei Grossbuchstaben bestehender ISO-Ländercode
          type: string
          pattern: '[A-Z]{2}'
          example: 'CH'
        bezeichnung:
          type: string
          example: 'Schweiz'
    JahrMonat:
      description: Ein spezifischer Monat eines Jahres.
      type: string
      pattern: '[0-9]{4}-[0-9]{2}'
      example: '2019-05'
    UicLand:
      description: Ein im System hinterlegtes UIC Land.
      type: object
      required:
        - uicCode
      properties:
        uicCode:
          description: aus zwei Ziffern bestehender UIC-Ländercode
          type: string
          pattern: '[0-9]{2}'
          example: '85'
        isoCode:
          description: aus zwei Grossbuchstaben bestehender ISO-Ländercode
          type: string
          pattern: '[A-Z]{2}'
          example: 'CH'
        bezeichnung:
          type: string
          example: 'Schweiz'
    PageInfo:
      type: object
      description: |
        Informationen über die zurückgelieferte Ergebnisliste (Page/Seite).
      required:
        - offset
        - limit
        - gesamt
      properties:
        offset:
          description: |
            Für diesen Request gegebenes Offset (in Elementen).
          type: integer
          format: int32
        limit:
          description: |
            Für diesen Request verwendetes Limit.
          type: integer
          format: int32
        gesamt:
          description: |
            Gesamtzahl der vorhandenen Ergebnisse.
          type: integer
          format: int32
    ZustellvorgangKorrektur:
      type: object
      required:
        - id
        - kommentar
      properties:
        id:
          description: ID eines Zustellvorgangs
          type: string
          # Read Only
        kosten:
          $ref: '#/components/schemas/ZustellvorgangKostenKorrektur'
        # Read Only
        parameter:
          $ref: '#/components/schemas/ZustellvorgangParameterKorrektur'
        kommentar:
          description: |
            Ein vom Anwender erstellter Kommentar zu einer vorgenommenen Korrektur, der im internen Cargo Storage Cockpit (aber nicht in Cargo
            Storage selbst) angezeigt wird.
          type: string
    ZustellvorgangKostenKorrektur:
      description: Korrektur der Kosten eines Zustellvorgangs
      type: object
      properties:
        kostenWagenProMonat:
          description: |
            Korrigierte Kosten für den Wagen, aufgeteilt auf Monate. Die hier übergebenen Kosten überschreiben die von Cargo Storage berechneten
            Kosten. Für Monate, die hier nicht auftauchen, gelten weiter die berechneten Kosten.
          type: array
          items:
            $ref: '#/components/schemas/KeyNumberValuePair'
          # Read Only
        kostenWagenProMonatVorKorrektur:
          description: Kosten für den Wagen vor der Korrektur. Wird vom Backend geliefert, falls die Wagenkosten korrigiert wurden.
          type: array
          items:
            $ref: '#/components/schemas/KeyNumberValuePair'
          # Read Only
        kostenGleisProMonat:
          description: |
            Korrigierte Kosten für das Gleis, aufgeteilt auf Monate. Die hier übergebenen Kosten überschreiben die von Cargo Storage berechneten
            Kosten. Für Monate, die hier nicht auftauchen, gelten weiter die berechneten Kosten.
          type: array
          items:
            $ref: '#/components/schemas/KeyNumberValuePair'
          # Read Only
        kostenGleisProMonatVorKorrektur:
          description: |
            Kosten für das Gleis vor der Korrektur. Wird vom Backend geliefert, falls die Gleiskosten korrigiert wurden.
          type: array
          items:
            $ref: '#/components/schemas/KeyNumberValuePair'
          # Read Only
    ZustellvorgangParameterKorrektur:
      description: Korrektur der Eingabeparameter eines Zustellvorgangs
      type: object
      properties:
        partnerid:
          description: |
            Die korrigierte PartnerID. Falls vorhanden, entspricht dieser Wert `Zustellvorgang.partnerid`.
          type: string
        partneridVorKorrektur:
          description: |
            Die PartnerID des Zustellvorgangs vor der Korrektur. Wird vom Backend geliefert, falls die PartnerID korrigiert wurde.
          type: string
          # Read Only
        dauerFreiperiodeInStunden:
          description: Die korrigierte Ladefrist. Falls vorhanden, entspricht dieser Wert `ZustellvorgangDetails.dauerFreiperiodeInStunden`.
          type: integer
          format: int32
        dauerFreiperiodeInStundenVorKorrektur:
          description: |
            Die Ladefrist des Zustellvorgangs vor der Korrektur. Wird vom Backend geliefert, falls die Ladefrist korrigiert wurde.
          type: integer
          format: int32
          # Read Only
        beginn:
          description: |
            Der korrigierte Beginn des Zustellvorgangs, also Zeitpunkt der Zustellung bzw. kommerziellen Abstellung des Wagens. Falls vorhanden,
            entspricht dieser Wert `Zustellvorgang.beginn`.
          type: string
          format: date-time
        beginnVorKorrektur:
          description: |
            Der Beginn des Zustellvorgangs vor der Korrektur. Wird vom Backend geliefert, falls der Beginn des Zustellvorgangs korrigiert wurde.
          type: string
          format: date-time
          # Read Only
        zeitpunktAbholbereit:
          description: |
            Der korrigierte Zeitpunkt der Abholbereitschaft. Falls vorhanden, entspricht dieser Wert dem Zeitpunkt des WagenEreignisses vom Typ
            `Abholbereit`.
          type: string
          format: date-time
        zeitpunktAbholbereitVorKorrektur:
          description: |
            Der Zeitpunkt der Abholbereitschaft vor der Korrektur. Wird vom Backend geliefert, falls der Zeitpunkt der Abholbereitschaft korrigiert
            wurde. Falls vor der Korrektur kein Event `Abholbereit` vorhanden war, wird `null` geliefert.
          type: string
          format: date-time
          # Read Only
        langsteherMoeglich:
          description: |
            Ob bei diesem Zustellvorgang der Langsteher-Tarif verwendet werden soll, falls der Wagen lange genug steht. Durch dieses Flag kann
            der Langsteher-Tarif für einen einzelnen Zustellvorgang annuliert werden. Wert `false`, da standardmässig mit Langsteher-Tarif gerechnet wird,
            kann als zurücksetzten ein `true` stattfinden.
          type: boolean
        kostenGenullt:
          description: |
            Ob bei diesem Zustellvorgang alle Kosten (Wagen und Gleis) auf 0 gesetzt werden.
            In diesem Fall wird für alle betroffenen Monate (`kostenWagenProMonat`, `kostenGleisProMonat`) ein Eintrag mit dem Wert `0` geliefert 
            und in `ZustellvorgangKostenKorrektur` sind die ursprünglichen Kosten ersichtlich.
          type: boolean
        kostenWagenGenullt:
          description: |
            Ob bei diesem Zustellvorgang Wagen Kosten auf 0 gesetzt werden.
            In diesem Fall wird für alle betroffenen Monate (`kostenWagenProMonat`) ein Eintrag mit dem Wert `0` geliefert 
            und in `ZustellvorgangKostenKorrektur` sind die ursprünglichen Kosten ersichtlich.
          type: boolean
        kostenGleisGenullt:
          description: |
            Ob bei diesem Zustellvorgang Gleis Kosten auf 0 gesetzt werden.
            In diesem Fall wird für alle betroffenen Monate (`kostenGleisProMonat`) ein Eintrag mit dem Wert `0` geliefert 
            und in `ZustellvorgangKostenKorrektur` sind die ursprünglichen Kosten ersichtlich.
          type: boolean
        ladestelle:
          # Die korrigierte Ladestelle des Zustellvorgangs.
          $ref: '#/components/schemas/Ladestelle'
        ladestelleVorKorrektur:
          $ref: '#/components/schemas/Ladestelle'
        kommentar:
          description: |
            Ein vom Anwender erstellter Kommentar zu einer vorgenommenen Parameterkorrektur, der im internen Cargo Storage Cockpit (aber nicht in
            Cargo Storage selbst) angezeigt wird.
          type: string
    ZusatzleistungArt:
      description: Beschreibt die Art der Zusatzleistung gem. Katalog "Preise und Konditionen von SBB Cargo AG".
      type: object
      required:
        - code
      properties:
        code:
          description: Der Leistungsart-Code (LAC) der Zusatzleistung gem. Katalog.
          type: string
          # Read Only
        bezeichnung:
          description: Die Leistungsbeschreibung gem. Katalog.
          type: string
          # Read Only
        einheit:
          description: Die Einheit, in der mengenbasiert abgerechnete Zusatzleistungen gebucht werden. Bei pauschal abgerechneten Zusatzleistungen entfällt die Einheit.
          type: string
          # Read Only
      example:
        code: '1003'
        bezeichnung: 'Einweggurte'
        einheit: 'ST (Stück)'
    Zusatzleistung:
      description: |
        Repräsentiert eine Zusatzleistung die im Rahmen eines Auftrags bestellt wurde.
        Vertraglich vereinbarte Zusatzleistungen werden beim Erstellen eines Auftrags automatisch miterstellt.
        Der Kunde hat die Möglichkeit weitere Zusatzleistungen aus dem Katalog zu einem Auftrag zu bestellen.
      type: object
      required:
        - art
      properties:
        laufnummer:
          description: Eine Laufnummer, die die Zusatzleistung innerhalb eines Auftrags eindeutig identifiziert.
          type: string
          # Read Only
        art:
          $ref: '#/components/schemas/ZusatzleistungArt'
        menge:
          description: |
            Mengenangabe für Zusatzleistungen, die nach Menge einer artspezifischen Einheit abgerechnet werden.
            Die Mengenangabe ist erforderlich für alle Arten von Zusatzleistungen, die nicht pauschal abgerechnet werden.
          type: number
          format: float
          minimum: 0.0
        status:
          description: |
            Der Status der Zusatzleistung:
            * geplant: Die Zusatzleistung ist bestellt und geplant.
            * begonnen: Die Ausführung der Zusatzleistung hat begonnen. Zusatzleistungen in Ausführung haben immer einen Beginnzeitpunkt.
            * erledigt: Die Zusatzleistung wurde ausgeführt. Erledigte Zusatzleistungen haben immer ein Endzeitpunkt.
            * storniert: Die Zusatzleistung wurde storniert. Stornierte Zusatzleistungen haben immer eine Begründung für die Stornierung.
            * abgebrochen: Die Ausführung der Zusatzleistung wurde abgebrochen.
          type: string
          enum:
            - geplant
            - begonnen
            - erledigt
            - storniert
            - abgebrochen
        bahnhof:
          $ref: '#/components/schemas/Ort'
        ersteller:
          description: |
            Der Ersteller dieser Zusatzleistung:
            * sbbcargo: Zusatzleistungen können durch SBB Cargo erstellt werden, z.B. wenn dies betrieblich erforderlich ist.
            * kunde: Zusatzleistung können durch den Kunden beim Anlegen eines Auftrags erstellt werden.
          type: string
          enum:
            - sbbcargo
            - kunde
        beginn:
          description: Die effektive Startzeit der Ausführung der Zusatzleistung.
          type: string
          format: date-time
        ende:
          description: Die effektive Endzeit der Ausführung der Zusatzleistung.
          type: string
          format: date-time
        storno:
          $ref: '#/components/schemas/Stornobegruendung'
    Wagenlokalisierung:
      description: |
        Dieses Objekt beschreibt Position und Zustand eines Wagens zu einem bestimmten Zeitpunkt.
        Wenn der Wagen im Zustand `unterwegs` ist (und nur dann), wird auch die Zugfahrt mitgeliefert, 
        auf der der Wagen transportiert wird. Auf dem Objekt Zugfahrt sind aber nur die Attribute
        * `zugnummer`
        * `verkehrsdatum`
        * `start`
        * `ziel`
        * `abfahrtSoll`
        * `ankunftSoll`
        
        definiert. Neben der Zugfahrt wird auch der letzte bekannte Bahnhof ausgegeben, an dem der Zug 
        abgefahren oder durchgefahren ist.

        Neben den im Attribut `wagenstatus` definierten Werte beschreiben auch die Attribute `ausgesetzt` 
        und `beladen` den Zustand des Wagens. Letztere sind aber unabhängig vom `wagenstatus`, d.h. alle 
        Kombinationen von `wagenstatus`, `ausgesetzt` und `beladen` sind zulässig.
      type: object
      required:
        - wagennummer
        - wagenStatus
        - wagenStatusZeitpunkt
        - ausgesetzt
        - beladen
        - position
      properties:
        wagennummer:
          description: Die 12-stellige UIC-Wagennummer.
          type: string
          pattern: '[0-9]{12}'
        wagenstatus:
          description: |
            Der Wagenstatus:
              * `unterwegs`: Der Wagen ist auf einem Zug unterwegs.
              * `eingegangen`: Der Wagen ist an seinem Bestimmungsort am Bahnhof angekommen.
              * `zugestellt`: Der Wagen wurde an einer Ladestelle zugestellt.
              * `abgeholt`: Der Wagen wurde an einer Ladestelle abgeholt.
              * `abgestellt`: Der Wagen wurde an einem Bahnhof abgestellt.
          type: string
          enum:
            - unterwegs
            - eingegangen
            - zugestellt
            - abgeholt
            - abgestellt
        wagenstatusZeitpunkt:
          description: |
            Zeitpunkt der letzten Transition des Wagenstatus.

            Hinweis: Die Status `unterwegs` und `abgestellt` lassen auch Selbstübergänge zu, also z.B. eine 
            Transition von `unterwegs` nach `unterwegs` beim Vorbeifahren an einem Bahnhof. Der Zeitpunkt 
            kann sich also auch auf einen Selbstübergang beziehen.
          type: string
          format: date-time
        ausgesetzt:
          description: "`true` wenn der Wagen ausgesetzt wurde, sonst `false`."
          type: boolean
        beladen: 
          description: "`true` wenn der Wagen beladen ist, sonst `false`."
          type: boolean
        position:
          $ref: "#/components/schemas/Ort"
        zugfahrt:
          $ref: "#/components/schemas/Zugfahrt"
    Meldepunkt:
      description: |
        Meldepunkte können auf dem Vertrag, der Vertragsvariante und auf dem Auftrag definiert werden. Wenn ein Auftrag angelegt wird, 
        werden ihm alle auf dem Vertrag oder der -Variante definierten Meldepunkte zugewiesen. Zusätzlich können Meldepunkte individuell 
        und unabhängig vom Vertrag einem Auftrag zugewiesen werden. Für die Meldepunkte werden Soll- und Prognose-Zeiten berechnet und 
        Ist-Zeiten festgehalten, wenn Wagen des Auftrags den Meldepunkt passieren.
        Bei der Definition eines Meldepunktes kann festgelegt werden ob Änderungen nur der Ankunftszeit, nur der Abfahrtszeit oder an beiden 
        Zeiten am Meldepunkt gemeldet werden sollen.

        Mit dem Konzept der Meldepunkte werden also nicht generell alle, sondern nur ausgewählte Betriebspunkte gemeldet, die in der 
        Ausführung eines Auftrags passiert werden.

        Aktualisierungen der Zeiten (Soll, Prognose, Ist) werden per Webhook (`/webhooks/auftraege`, Callback `auftragGeaendert`, 
        `AuftragCallbackTyp` `status`) gemeldet. Zusätzlich werden die Meldepunkte mit der Abfrage des Auftrags geliefert. (push und pull)
      type: object
      required:
        - betriebspunkt
      properties:
        ankunftSoll:
          description: Die fahrplanmässige Ankunftszeit am Meldepunkt.
          type: string
          format: date-time
        abfahrtSoll:
          description: Die fahrplanmässige Abfahrtszeit am Meldepunkt.
          type: string
          format: date-time
        ankunftPrognose:
          description: Die voraussichtliche Ankunftszeit am Meldepunkt.
          type: string
          format: date-time
        abfahrtPrognose:
          description: Die voraussichtliche Abfahrtszeit am Meldepunkt.
          type: string
          format: date-time
        ankunftIst:
          description: Die effektive Ankunftszeit am Meldepunkt.
          type: string
          format: date-time
        abfahrtIst:
          description: Die effektive Abfahrtszeit am Meldepunkt.
          type: string
          format: date-time
        betriebspunkt:
          $ref: "#/components/schemas/Ort"